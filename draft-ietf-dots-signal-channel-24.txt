



DOTS                                                       T. Reddy, Ed.
Internet-Draft                                                    McAfee
Intended status: Standards Track                       M. Boucadair, Ed.
Expires: March 3, 2019                                            Orange
                                                                P. Patil
                                                                   Cisco
                                                            A. Mortensen
                                                    Arbor Networks, Inc.
                                                               N. Teague
                                                          Verisign, Inc.
                                                         August 30, 2018


   Distributed Denial-of-Service Open Threat Signaling (DOTS) Signal
                         Channel Specification
                   draft-ietf-dots-signal-channel-24

Abstract

   This document specifies the DOTS signal channel, a protocol for
   signaling the need for protection against Distributed Denial-of-
   Service (DDoS) attacks to a server capable of enabling network
   traffic mitigation on behalf of the requesting client.

   A companion document defines the DOTS data channel, a separate
   reliable communication layer for DOTS management and configuration
   purposes.

Editorial Note (To be removed by RFC Editor)

   Please update these statements within the document with the RFC
   number to be assigned to this document:

   o  "This version of this YANG module is part of RFC XXXX;"

   o  "RFC XXXX: Distributed Denial-of-Service Open Threat Signaling
      (DOTS) Signal Channel Specification";

   o  "| [RFCXXXX] |"

   o  reference: RFC XXXX

   Please update TBD statements with the port number to be assigned to
   DOTS Signal Channel Protocol.

   Also, please update the "revision" date of the YANG module.





Reddy, et al.             Expires March 3, 2019                 [Page 1]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 3, 2019.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   5
   3.  Design Overview . . . . . . . . . . . . . . . . . . . . . . .   6
   4.  DOTS Signal Channel: Messages & Behaviors . . . . . . . . . .   8
     4.1.  DOTS Server(s) Discovery  . . . . . . . . . . . . . . . .   8
     4.2.  CoAP URIs . . . . . . . . . . . . . . . . . . . . . . . .   9
     4.3.  Happy Eyeballs for DOTS Signal Channel  . . . . . . . . .   9
     4.4.  DOTS Mitigation Methods . . . . . . . . . . . . . . . . .  10
       4.4.1.  Request Mitigation  . . . . . . . . . . . . . . . . .  11
       4.4.2.  Retrieve Information Related to a Mitigation  . . . .  26
         4.4.2.1.  DOTS Servers Sending Mitigation Status  . . . . .  30
         4.4.2.2.  DOTS Clients Polling for Mitigation Status  . . .  33
       4.4.3.  Efficacy Update from DOTS Clients . . . . . . . . . .  34
       4.4.4.  Withdraw a Mitigation . . . . . . . . . . . . . . . .  36



Reddy, et al.             Expires March 3, 2019                 [Page 2]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


     4.5.  DOTS Signal Channel Session Configuration . . . . . . . .  37
       4.5.1.  Discover Configuration Parameters . . . . . . . . . .  39
       4.5.2.  Convey DOTS Signal Channel Session Configuration  . .  43
       4.5.3.  Configuration Freshness and Notifications . . . . . .  48
       4.5.4.  Delete DOTS Signal Channel Session Configuration  . .  49
     4.6.  Redirected Signaling  . . . . . . . . . . . . . . . . . .  50
     4.7.  Heartbeat Mechanism . . . . . . . . . . . . . . . . . . .  52
   5.  DOTS Signal Channel YANG Module . . . . . . . . . . . . . . .  53
     5.1.  Tree Structure  . . . . . . . . . . . . . . . . . . . . .  53
     5.2.  YANG Module . . . . . . . . . . . . . . . . . . . . . . .  55
   6.  Mapping Parameters to CBOR  . . . . . . . . . . . . . . . . .  69
   7.  (D)TLS Protocol Profile and Performance Considerations  . . .  71
     7.1.  (D)TLS Protocol Profile . . . . . . . . . . . . . . . . .  71
     7.2.  (D)TLS 1.3 Considerations . . . . . . . . . . . . . . . .  72
     7.3.  MTU and Fragmentation . . . . . . . . . . . . . . . . . .  73
   8.  Mutual Authentication of DOTS Agents & Authorization of DOTS
       Clients . . . . . . . . . . . . . . . . . . . . . . . . . . .  74
   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  76
     9.1.  DOTS Signal Channel UDP and TCP Port Number . . . . . . .  76
     9.2.  Well-Known 'dots' URI . . . . . . . . . . . . . . . . . .  76
     9.3.  DOTS Signal Channel CBOR Mappings Registry  . . . . . . .  76
       9.3.1.  Registration Template . . . . . . . . . . . . . . . .  77
       9.3.2.  Initial Registry Content  . . . . . . . . . . . . . .  78
     9.4.  DOTS Signal Channel YANG Module . . . . . . . . . . . . .  79
   10. Security Considerations . . . . . . . . . . . . . . . . . . .  79
   11. Contributors  . . . . . . . . . . . . . . . . . . . . . . . .  80
   12. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  81
   13. References  . . . . . . . . . . . . . . . . . . . . . . . . .  81
     13.1.  Normative References . . . . . . . . . . . . . . . . . .  81
     13.2.  Informative References . . . . . . . . . . . . . . . . .  83
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  87

1.  Introduction

   A distributed denial-of-service (DDoS) attack is an attempt to make
   machines or network resources unavailable to their intended users.
   In most cases, sufficient scale can be achieved by compromising
   enough end-hosts and using those infected hosts to perpetrate and
   amplify the attack.  The victim in this attack can be an application
   server, a host, a router, a firewall, or an entire network.

   Network applications have finite resources like CPU cycles, the
   number of processes or threads they can create and use, the maximum
   number of simultaneous connections it can handle, the limited
   resources of the control plane, etc.  When processing network
   traffic, such applications are supposed to use these resources to
   offer the intended task in the most efficient manner.  However, a
   DDoS attacker may be able to prevent an application from performing



Reddy, et al.             Expires March 3, 2019                 [Page 3]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   its intended task by making the application exhaust its finite
   resources.

   TCP DDoS SYN-flood, for example, is a memory-exhausting attack while
   ACK-flood is a CPU-exhausting attack [RFC4987].  Attacks on the link
   are carried out by sending enough traffic so that the link becomes
   congested, thereby likely causing packet loss for legitimate traffic.
   Stateful firewalls can also be attacked by sending traffic that
   causes the firewall to maintain an excessive number of states that
   may jeopardize the firewall's operation overall, besides likely
   performance impacts.  The firewall then runs out of memory, and can
   no longer instantiate the states required to process legitimate
   flows.  Other possible DDoS attacks are discussed in [RFC4732].

   In many cases, it may not be possible for network administrators to
   determine the cause(s) of an attack.  They may instead just realize
   that certain resources seem to be under attack.  This document
   defines a lightweight protocol that allows a DOTS client to request
   mitigation from one or more DOTS servers for protection against
   detected, suspected, or anticipated attacks.  This protocol enables
   cooperation between DOTS agents to permit a highly-automated network
   defense that is robust, reliable, and secure.

   An example of a network diagram that illustrates a deployment of DOTS
   agents is shown in Figure 1.  In this example, a DOTS server is
   operating on the access network.  A DOTS client is located on the LAN
   (Local Area Network), while a DOTS gateway is embedded in the CPE
   (Customer Premises Equipment).

      Network
      Resource        CPE router         Access network     __________
    +-----------+   +--------------+    +-------------+    /          \
    |           |___|              |____|             |___ | Internet |
    |DOTS client|   | DOTS gateway |    | DOTS server |    |          |
    |           |   |              |    |             |    |          |
    +-----------+   +--------------+    +-------------+    \__________/

                   Figure 1: Sample DOTS Deployment (1)

   DOTS servers can also be reachable over the Internet, as depicted in
   Figure 2.










Reddy, et al.             Expires March 3, 2019                 [Page 4]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


      Network                                           DDoS mitigation
      Resource          CPE router      __________        service
    +-----------+   +-------------+    /          \    +-------------+
    |           |___|             |____|          |___ |             |
    |DOTS client|   |DOTS gateway |    | Internet |    | DOTS server |
    |           |   |             |    |          |    |             |
    +-----------+   +-------------+    \__________/    +-------------+

                   Figure 2: Sample DOTS Deployment (2)

   In typical deployments, the DOTS client belongs to a different
   administrative domain than the DOTS server.  For example, the DOTS
   client is embedded in a firewall protecting services owned and
   operated by a customer, while the DOTS server is owned and operated
   by a different administrative entity (service provider, typically)
   providing DDoS mitigation services.  The latter might or might not
   provide connectivity services to the network hosting the DOTS client.

   The DOTS server may (not) be co-located with the DOTS mitigator.  In
   typical deployments, the DOTS server belongs to the same
   administrative domain as the mitigator.  The DOTS client can
   communicate directly with a DOTS server or indirectly via a DOTS
   gateway.

   The document adheres to the DOTS architecture
   [I-D.ietf-dots-architecture].  The requirements for DOTS signal
   channel protocol are documented in [I-D.ietf-dots-requirements].
   This document satisfies all the use cases discussed in
   [I-D.ietf-dots-use-cases].

   This document focuses on the DOTS signal channel.  This is a
   companion document of the DOTS data channel specification
   [I-D.ietf-dots-data-channel] that defines a configuration and a bulk
   data exchange mechanism supporting the DOTS signal channel.

2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119].

   (D)TLS is used for statements that apply to both Transport Layer
   Security [RFC5246][RFC8446] and Datagram Transport Layer Security
   [RFC6347].  Specific terms are used for any statement that applies to
   either protocol alone.





Reddy, et al.             Expires March 3, 2019                 [Page 5]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   The reader should be familiar with the terms defined in
   [I-D.ietf-dots-requirements].

   The meaning of the symbols in YANG tree diagrams is defined in
   [RFC8340].

3.  Design Overview

   The DOTS signal channel is built on top of the Constrained
   Application Protocol (CoAP) [RFC7252], a lightweight protocol
   originally designed for constrained devices and networks.  The many
   features of CoAP (expectation of packet loss, support for
   asynchronous Non-confirmable messaging, congestion control, small
   message overhead limiting the need for fragmentation, use of minimal
   resources, and support for (D)TLS) makes it a good candidate to build
   the DOTS signaling mechanism from.

   The DOTS signal channel is layered on existing standards (Figure 3).

                          +---------------------+
                          | DOTS Signal Channel |
                          +---------------------+
                          |         CoAP        |
                          +----------+----------+
                          |   TLS    |   DTLS   |
                          +----------+----------+
                          |   TCP    |   UDP    |
                          +----------+----------+
                          |          IP         |
                          +---------------------+

     Figure 3: Abstract Layering of DOTS Signal Channel over CoAP over
                                  (D)TLS

   By default, a DOTS signal channel MUST run over port number TBD as
   defined in Section 9.1, for both UDP and TCP, unless the DOTS server
   has a mutual agreement with its DOTS clients to use a different port
   number.  DOTS clients MAY alternatively support means to dynamically
   discover the ports used by their DOTS servers.  In order to use a
   distinct port number (as opposed to TBD), DOTS clients and servers
   SHOULD support a configurable parameter to supply the port number to
   use.  The rationale for not using the default port number 5684
   ((D)TLS CoAP) is to allow for differentiated behaviors in
   environments where both a DOTS gateway and an IoT gateway (e.g.,
   Figure 3 of [RFC7452]) are present.

   The signal channel uses the "coaps" URI scheme defined in Section 6
   of [RFC7252] and "coaps+tcp" URI scheme defined in Section 8.2 of



Reddy, et al.             Expires March 3, 2019                 [Page 6]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   [RFC8323] to identify DOTS server resources accessible using CoAP
   over UDP secured with DTLS and CoAP over TCP secured with TLS.

   The signal channel is initiated by the DOTS client (Section 4.4).
   Once the signal channel is established, the DOTS agents periodically
   send heartbeats to keep the channel active (Section 4.7).  At any
   time, the DOTS client may send a mitigation request message to a DOTS
   server over the active channel.  While mitigation is active because
   of the higher likelihood of packet loss during a DDoS attack, the
   DOTS server periodically sends status messages to the client,
   including basic mitigation feedback details.  Mitigation remains
   active until the DOTS client explicitly terminates mitigation, or the
   mitigation lifetime expires.

   DOTS signaling can happen with DTLS over UDP and TLS over TCP.
   Likewise, DOTS requests may be sent using IPv4 or IPv6 transfer
   capabilities.  A Happy Eyeballs procedure for DOTS signal channel is
   specified in Section 4.3.

   Messages exchanged between DOTS agents are serialized using Concise
   Binary Object Representation (CBOR) [RFC7049], a binary encoding
   scheme designed for small code and message size.  CBOR-encoded
   payloads are used to carry signal channel-specific payload messages
   which convey request parameters and response information such as
   errors.  In order to allow the use of the same data models, [RFC7951]
   specifies the JavaScript Object Notation (JSON) encoding of YANG-
   modeled data.  A similar effort for CBOR is defined in
   [I-D.ietf-core-yang-cbor].

   From that standpoint, this document specifies a YANG module for
   representing DOTS mitigation scopes, DOTS signal channel session
   configuration data, and DOTS redirected signalling (Section 5).
   Representing these data as CBOR data is assumed to follow the rules
   in [I-D.ietf-core-yang-cbor] or those in [RFC7951] combined with
   JSON/CBOR conversion rules in [RFC7049].  All parameters in the
   payload of the DOTS signal channel are mapped to CBOR types as
   specified in Section 6.

   In order to prevent fragmentation, DOTS agents must follow the
   recommendations documented in Section 4.6 of [RFC7252].  Refer to
   Section 7.3 for more details.

   DOTS agents MUST support GET, PUT, and DELETE CoAP methods.  The
   payload included in CoAP responses with 2.xx Response Codes MUST be
   of content type "application/cbor" (Section 5.5.1 of [RFC7252]).
   CoAP responses with 4.xx and 5.xx error Response Codes MUST include a
   diagnostic payload (Section 5.5.2 of [RFC7252]).  The Diagnostic
   Payload may contain additional information to aid troubleshooting.



Reddy, et al.             Expires March 3, 2019                 [Page 7]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   In deployments where multiple DOTS clients are enabled in a network
   (owned and operated by the same entity), the DOTS server may detect
   conflicting mitigation requests from these clients.  This document
   does not aim to specify a comprehensive list of conditions under
   which a DOTS server will characterize two mitigation requests from
   distinct DOTS clients as conflicting, nor recommend a DOTS server
   behavior for processing conflicting mitigation requests.  Those
   considerations are implementation- and deployment-specific.
   Nevertheless, the document specifies the mechanisms to notify DOTS
   clients when conflicts occur, including the conflict cause
   (Section 4.4).

   In deployments where one or more translators (e.g., Traditional NAT
   [RFC3022], CGN [RFC6888], NAT64 [RFC6146], NPTv6 [RFC6296]) are
   enabled between the client's network and the DOTS server, DOTS signal
   channel messages forwarded to a DOTS server MUST NOT include internal
   IP addresses/prefixes and/or port numbers; external addresses/
   prefixes and/or port numbers as assigned by the translator MUST be
   used instead.  This document does not make any recommendation about
   possible translator discovery mechanisms.  The following are some
   (non-exhaustive) deployment examples that may be considered:

   o  Port Control Protocol (PCP) [RFC6887] or Session Traversal
      Utilities for NAT (STUN) [RFC5389] may be used to retrieve the
      external addresses/prefixes and/or port numbers.  Information
      retrieved by means of PCP or STUN will be used to feed the DOTS
      signal channel messages that will be sent to a DOTS server.

   o  A DOTS gateway may be co-located with the translator.  The DOTS
      gateway will need to update the DOTS messages, based upon the
      local translator's binding table.

4.  DOTS Signal Channel: Messages & Behaviors

4.1.  DOTS Server(s) Discovery

   This document assumes that DOTS clients are provisioned with the
   reachability information of their DOTS server(s) using a variety of
   means (e.g., local configuration, or dynamic means such as DHCP).
   The description of such means is out of scope of this document.

   Likewise, it is out of scope of this document to specify the behavior
   to be followed by a DOTS client to send DOTS requests when multiple
   DOTS servers are provisioned (e.g., contact all DOTS servers, select
   one DOTS server among the list).






Reddy, et al.             Expires March 3, 2019                 [Page 8]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


4.2.  CoAP URIs

   The DOTS server MUST support the use of the path-prefix of "/.well-
   known/" as defined in [RFC5785] and the registered name of "dots".
   Each DOTS operation is indicated by a path-suffix that indicates the
   intended operation.  The operation path (Table 1) is appended to the
   path-prefix to form the URI used with a CoAP request to perform the
   desired DOTS operation.

         +-----------------------+----------------+-------------+
         | Operation             | Operation Path | Details     |
         +-----------------------+----------------+-------------+
         | Mitigation            | /v1.0/mitigate | Section 4.4 |
         +-----------------------+----------------+-------------+
         | Session configuration | /v1.0/config   | Section 4.5 |
         +-----------------------+----------------+-------------+

             Table 1: Operations and their Corresponding URIs

4.3.  Happy Eyeballs for DOTS Signal Channel

   [I-D.ietf-dots-requirements] mentions that DOTS agents will have to
   support both connectionless and connection-oriented protocols.  As
   such, the DOTS signal channel is designed to operate with DTLS over
   UDP and TLS over TCP.  Further, a DOTS client may acquire a list of
   IPv4 and IPv6 addresses (Section 4.1), each of which can be used to
   contact the DOTS server using UDP and TCP.  The following specifies
   the procedure to follow to select the address family and the
   transport protocol for sending DOTS signal channel messages.

   Such procedure is needed to avoid experiencing long connection
   delays.  For example, if an IPv4 path to reach a DOTS server is
   found, but the DOTS server's IPv6 path is not working, a dual-stack
   DOTS client may experience a significant connection delay compared to
   an IPv4-only DOTS client.  The other problem is that if a middlebox
   between the DOTS client and DOTS server is configured to block UDP
   traffic, the DOTS client will fail to establish a DTLS session with
   the DOTS server and, as a consequence, will have to fall back to TLS
   over TCP, thereby incurring significant connection delays.

   To overcome these connection setup problems, the DOTS client attempts
   to connect to its DOTS server(s) using both IPv6 and IPv4, and tries
   both DTLS over UDP and TLS over TCP in a manner similar to the Happy
   Eyeballs mechanism [RFC8305].  These connection attempts are
   performed by the DOTS client when it initializes.  The results of the
   Happy Eyeballs procedure are used by the DOTS client for sending its
   subsequent messages to the DOTS server.




Reddy, et al.             Expires March 3, 2019                 [Page 9]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   The order of preference of the DOTS signal channel address family and
   transport protocol (most preferred first) is: UDP over IPv6, UDP over
   IPv4, TCP over IPv6, and finally TCP over IPv4.  This order adheres
   to the address preference order specified in [RFC6724] and the DOTS
   signal channel preference which privileges the use of UDP over TCP
   (to avoid TCP's head of line blocking).

   In reference to Figure 4, the DOTS client sends two TCP SYNs and two
   DTLS ClientHello messages at the same time over IPv6 and IPv4.  In
   this example, it is assumed that the IPv6 path is broken and UDP
   traffic is dropped by a middlebox but has little impact to the DOTS
   client because there is no long delay before using IPv4 and TCP.  The
   DOTS client repeats the mechanism to discover whether DOTS signal
   channel messages with DTLS over UDP becomes available from the DOTS
   server, so the DOTS client can migrate the DOTS signal channel from
   TCP to UDP.  Such probing SHOULD NOT be done more frequently than
   every 24 hours and MUST NOT be done more frequently than every 5
   minutes.

   A single DOTS signal channel between DOTS agents can be used to
   exchange multiple DOTS signal messages.  To reduce DOTS client and
   DOTS server workload, DOTS clients SHOULD re-use the (D)TLS session.

   +-----------+                                           +-----------+
   |DOTS client|                                           |DOTS server|
   +-----------+                                           +-----------+
         |                                                       |
         |--DTLS ClientHello, IPv6 ---->X                        |
         |--TCP SYN, IPv6-------------->X                        |
         |--DTLS ClientHello, IPv4 ---->X                        |
         |--TCP SYN, IPv4--------------------------------------->|
         |--DTLS ClientHello, IPv6 ---->X                        |
         |--TCP SYN, IPv6-------------->X                        |
         |<-TCP SYNACK-------------------------------------------|
         |--DTLS ClientHello, IPv4 ---->X                        |
         |--TCP ACK--------------------------------------------->|
         |<------------Establish TLS Session-------------------->|
         |----------------DOTS signal--------------------------->|
         |                                                       |

                       Figure 4: DOTS Happy Eyeballs

4.4.  DOTS Mitigation Methods

   The following methods are used by a DOTS client to request, withdraw,
   or retrieve the status of mitigation requests:





Reddy, et al.             Expires March 3, 2019                [Page 10]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   PUT:    DOTS clients use the PUT method to request mitigation from a
           DOTS server (Section 4.4.1).  During active mitigation, DOTS
           clients may use PUT requests to carry mitigation efficacy
           updates to the DOTS server (Section 4.4.3).

   GET:    DOTS clients may use the GET method to subscribe to DOTS
           server status messages, or to retrieve the list of its
           mitigations maintained by a DOTS server (Section 4.4.2).

   DELETE: DOTS clients use the DELETE method to withdraw a request for
           mitigation from a DOTS server (Section 4.4.4).

   Mitigation request and response messages are marked as Non-
   confirmable messages (Section 2.2 of [RFC7252]).

   DOTS agents SHOULD follow the data transmission guidelines discussed
   in Section 3.1.3 of [RFC8085] and control transmission behavior by
   not sending more than one UDP datagram per round-trip time (RTT) to
   the peer DOTS agent on average.

   Requests marked by the DOTS client as Non-confirmable messages are
   sent at regular intervals until a response is received from the DOTS
   server.  If the DOTS client cannot maintain an RTT estimate, it
   SHOULD NOT send more than one Non-confirmable request every 3
   seconds, and SHOULD use an even less aggressive rate whenever
   possible (case 2 in Section 3.1.3 of [RFC8085]).

4.4.1.  Request Mitigation

   When a DOTS client requires mitigation for some reason, the DOTS
   client uses the CoAP PUT method to send a mitigation request to its
   DOTS server(s) (Figure 5, illustrated in JSON diagnostic notation).

   If a DOTS client is entitled to solicit the DOTS service, the DOTS
   server can enable mitigation on behalf of the DOTS client by
   communicating the DOTS client's request to a mitigator and relaying
   the feedback of the thus-selected mitigator to the requesting DOTS
   client.













Reddy, et al.             Expires March 3, 2019                [Page 11]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


     Header: PUT (Code=0.03)
     Uri-Path: ".well-known"
     Uri-Path: "dots"
     Uri-Path: "v1.0"
     Uri-Path: "mitigate"
     Uri-Path: "cuid=dz6pHjaADkaFTbjr0JGBpw"
     Uri-Path: "mid=123"
     Content-Type: "application/cbor"
     {
       "ietf-dots-signal-channel:mitigation-scope": {
         "scope": [
           {
             "target-prefix": [
                "string"
              ],
             "target-port-range": [
                {
                  "lower-port": integer,
                  "upper-port": integer
                }
              ],
              "target-protocol": [
                integer
              ],
              "target-fqdn": [
                "string"
              ],
              "target-uri": [
                "string"
              ],
              "alias-name": [
                "string"
              ],
             "lifetime": integer,
             "trigger-mitigation": boolean
           }
         ]
       }
     }

             Figure 5: PUT to Convey DOTS Mitigation Requests

   The Uri-Path option carries a major and minor version nomenclature to
   manage versioning; DOTS signal channel in this specification uses
   'v1' major version and '0' minor version.

   The order of the Uri-Path options is important as it defines the CoAP
   resource.  In particular, 'mid' MUST follow 'cuid'.



Reddy, et al.             Expires March 3, 2019                [Page 12]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   The additional Uri-Path parameters to those defined in Section 4.2
   are as follows:

   cuid:  Stands for Client Unique Identifier.  A globally unique
      identifier that is meant to prevent collisions among DOTS clients,
      especially those from the same domain.  It MUST be generated by
      DOTS clients.

      Implementations SHOULD use the output of a cryptographic hash
      algorithm whose input is the Distinguished Encoding Rules (DER)-
      encoded Abstract Syntax Notation One (ASN.1) representation of the
      Subject Public Key Info (SPKI) of the DOTS client X.509
      certificate [RFC5280], the DOTS client raw public key [RFC7250],
      or the "Pre-Shared Key (PSK) identity" used by the DOTS client in
      the TLS ClientKeyExchange message to set 'cuid'.  In this version
      of the specification, the cryptographic hash algorithm used is
      SHA-256 [RFC6234].  The output of the cryptographic hash algorithm
      is truncated to 16 bytes; truncation is done by stripping off the
      final 16 bytes.  The truncated output is base64url encoded.

      The 'cuid' is intended to be stable when communicating with a
      given DOTS server, i.e., the 'cuid' used by a DOTS client SHOULD
      NOT change over time.  Distinct 'cuid' values MAY be used per DOTS
      server.

      DOTS servers MUST return 4.09 (Conflict) error code to a DOTS peer
      to notify that the 'cuid' is already in-use by another DOTS
      client.  Upon receipt of that error code, a new 'cuid' MUST be
      generated by the DOTS peer.

      Client-domain DOTS gateways MUST handle 'cuid' collision directly
      and it is RECOMMENDED that 'cuid' collision is handled directly by
      server-domain DOTS gateways.

      DOTS gateways MAY rewrite the 'cuid' used by peer DOTS clients.
      Triggers for such rewriting are out of scope.

      This is a mandatory Uri-Path parameter.

   mid:  Identifier for the mitigation request represented with an
      integer.  This identifier MUST be unique for each mitigation
      request bound to the DOTS client, i.e., the 'mid' parameter value
      in the mitigation request needs to be unique relative to the 'mid'
      parameter values of active mitigation requests conveyed from the
      DOTS client to the DOTS server.

      In order to handle out-of-order delivery of mitigation requests,
      'mid' values MUST increase monotonically.



Reddy, et al.             Expires March 3, 2019                [Page 13]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


      If the 'mid' value has reached 3/4 of (2**32 - 1) (i.e.,
      3221225471) and it is peace-time, the DOTS client MUST reset 'mid'
      to 0 to handle 'mid' rollover.  If the DOTS client maintains
      mitigation requests with pre-configured scopes, it MUST re-create
      them with the 'mid' restarting at 0.

      This identifier MUST be generated by the DOTS client.

      This is a mandatory Uri-Path parameter.

   'cuid' and 'mid' MUST NOT appear in the PUT request message body.

   The parameters in the CBOR body of the PUT request are described
   below:

   target-prefix:  A list of prefixes identifying resources under
      attack.  Prefixes are represented using Classless Inter-Domain
      Routing (CIDR) notation [RFC4632].
      As a reminder, the prefix length must be less than or equal to 32
      (resp. 128) for IPv4 (resp.  IPv6).

      The prefix list MUST NOT include broadcast, loopback, or multicast
      addresses.  These addresses are considered as invalid values.  In
      addition, the DOTS server MUST validate that target prefixes are
      within the scope of the DOTS client's domain.  Other validation
      checks may be supported by DOTS servers.

      This is an optional attribute.

   target-port-range:  A list of port numbers bound to resources under
      attack.

      A port range is defined by two bounds, a lower port number (lower-
      port) and an upper port number (upper-port).  When only 'lower-
      port' is present, it represents a single port number.

      For TCP, UDP, Stream Control Transmission Protocol (SCTP)
      [RFC4960], or Datagram Congestion Control Protocol (DCCP)
      [RFC4340], a range of ports can be, for example, 0-1023,
      1024-65535, or 1024-49151.

      This is an optional attribute.

   target-protocol:  A list of protocols involved in an attack.  Values
      are taken from the IANA protocol registry [proto_numbers].

      The value '0' has a special meaning for 'all protocols'.




Reddy, et al.             Expires March 3, 2019                [Page 14]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


      This is an optional attribute.

   target-fqdn:   A list of Fully Qualified Domain Names (FQDNs)
      identifying resources under attack.  An FQDN is the full name of a
      resource, rather than just its hostname.  For example, "venera" is
      a hostname, and "venera.isi.edu" is an FQDN [RFC1983].

      How a name is passed to an underlying name resolution library is
      implementation- and deployment-specific.  Nevertheless, once the
      name is resolved into one or multiple IP addresses, DOTS servers
      MUST apply the same validation checks as those for 'target-
      prefix'.

      This is an optional attribute.

   target-uri:   A list of Uniform Resource Identifiers (URIs) [RFC3986]
      identifying resources under attack.

      The same validation checks used for 'target-fqdn' MUST be followed
      by DOTS servers to validate a target URI.

      This is an optional attribute.

   alias-name:  A list of aliases of resources for which the mitigation
      is requested.  Aliases can be created using the DOTS data channel
      (Section 6.1 of [I-D.ietf-dots-data-channel]), direct
      configuration, or other means.

      An alias is used in subsequent signal channel exchanges to refer
      more efficiently to the resources under attack.

      This is an optional attribute.

   lifetime:   Lifetime of the mitigation request in seconds.  The
      RECOMMENDED lifetime of a mitigation request is 3600 seconds --
      this value was chosen to be long enough so that refreshing is not
      typically a burden on the DOTS client, while expiring the request
      where the client has unexpectedly quit in a timely manner.  DOTS
      clients MUST include this parameter in their mitigation requests.
      Upon the expiry of this lifetime, and if the request is not
      refreshed, the mitigation request is removed.  The request can be
      refreshed by sending the same request again.

      A lifetime of '0' in a mitigation request is an invalid value.

      A lifetime of negative one (-1) indicates indefinite lifetime for
      the mitigation request.  The DOTS server MAY refuse indefinite
      lifetime, for policy reasons; the granted lifetime value is



Reddy, et al.             Expires March 3, 2019                [Page 15]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


      returned in the response.  DOTS clients MUST be prepared to not be
      granted mitigations with indefinite lifetimes.

      The DOTS server MUST always indicate the actual lifetime in the
      response and the remaining lifetime in status messages sent to the
      DOTS client.

      This is a mandatory attribute.

   trigger-mitigation:   If the parameter value is set to 'false', DDoS
      mitigation will not be triggered for the mitigation request unless
      the DOTS signal channel session is lost.

      If the DOTS client ceases to respond to heartbeat messages, the
      DOTS server can detect that the DOTS session is lost.

      The default value of the parameter is 'true' (that is, the
      mitigation starts immediately).  If 'trigger-mitigation' is not
      present in a request, this is equivalent to receiving a request
      with 'trigger-mitigation' set to 'true'.

      This is an optional attribute.

   In deployments where server-domain DOTS gateways are enabled,
   identity information about the origin source client domain SHOULD be
   supplied to the DOTS server.  That information is meant to assist the
   DOTS server to enforce some policies such as correlating DOTS clients
   that belong to the same DOTS domain, limiting the number of DOTS
   requests, and identifying the mitigation scope.  These policies can
   be enforced per-client, per-client domain, or both.  Also, the
   identity information may be used for auditing and debugging purposes.

   Figure 6 shows an example of a request relayed by a server-domain
   DOTS gateway.

















Reddy, et al.             Expires March 3, 2019                [Page 16]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


     Header: PUT (Code=0.03)
     Uri-Path: ".well-known"
     Uri-Path: "dots"
     Uri-Path: "v1.0"
     Uri-Path: "mitigate"
     Uri-Path: "cdid=7eeaf349529eb55ed50113"
     Uri-Path: "cuid=dz6pHjaADkaFTbjr0JGBpw"
     Uri-Path: "mid=123"
     Content-Type: "application/cbor"
     {
       "ietf-dots-signal-channel:mitigation-scope": {
         "scope": [
           {
             "target-prefix": [
                "string"
              ],
             "target-port-range": [
                {
                  "lower-port": integer,
                  "upper-port": integer
                }
              ],
              "target-protocol": [
                integer
              ],
              "target-fqdn": [
                "string"
              ],
              "target-uri": [
                "string"
              ],
              "alias-name": [
                "string"
              ],
             "lifetime": integer
           }
         ]
       }
     }

      Figure 6: PUT to Convey DOTS Mitigation Request as relayed by a
                        Server-Domain DOTS Gateway

   A server-domain DOTS gateway SHOULD add the following Uri-Path
   parameter:

   cdid:  Stands for Client Domain Identifier.  The 'cdid' is conveyed
      by a server-domain DOTS gateway to propagate the source domain



Reddy, et al.             Expires March 3, 2019                [Page 17]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


      identity from the gateway's client-facing-side to the gateway's
      server-facing-side, and from the gateway's server-facing-side to
      the DOTS server. 'cdid' may be used by the final DOTS server for
      policy enforcement purposes (e.g., enforce a quota on filtering
      rules).  These policies are deployment-specific.

      Server-domain DOTS gateways SHOULD support a configuration option
      to instruct whether 'cdid' parameter is to be inserted.

      In order to accommodate deployments that require enforcing per-
      client policies, per-client domain policies, or a combination
      thereof, server-domain DOTS gateways MUST supply the SPKI hash of
      the DOTS client X.509 certificate, the DOTS client raw public key,
      or the hash of the "PSK identity" in the 'cdid', following the
      same rules for generating the hash conveyed in 'cuid', which is
      then used by the ultimate DOTS server to determine the
      corresponding client's domain.  The 'cdid' generated by a server-
      domain gateway is likely to be the same as the 'cuid' except if
      the DOTS message was relayed by a DOTS gateway or was generated
      from a rogue DOTS client.

      If a DOTS client is provisioned, for example, with distinct
      certificates as a function of the peer server-domain DOTS gateway,
      distinct 'cdid' values may be supplied by a server-domain DOTS
      gateway.  The ultimate DOTS server MUST treat those 'cdid' values
      as equivalent.

      The 'cdid' attribute MUST NOT be generated and included by DOTS
      clients.

      DOTS servers MUST ignore 'cdid' attributes that are directly
      supplied by source DOTS clients or client-domain DOTS gateways.
      This implies that first server-domain DOTS gateways MUST strip
      'cdid' attributes supplied by DOTS clients.  DOTS servers SHOULD
      support a configuration parameter to identify DOTS gateways that
      are trusted to supply 'cdid' attributes.

      Only single-valued 'cdid' are defined in this document.

      This is an optional Uri-Path.  When present, 'cdid' MUST be
      positioned before 'cuid'.

   A DOTS gateway MAY add the CoAP Hop-Limit Option
   [I-D.boucadair-core-hop-limit].

   Because of the complexity to handle partial failure cases, this
   specification does not allow for including multiple mitigation




Reddy, et al.             Expires March 3, 2019                [Page 18]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   requests in the same PUT request.  Concretely, a DOTS client MUST NOT
   include multiple 'scope' parameters in the same PUT request.

   FQDN and URI mitigation scopes may be thought of as a form of scope
   alias, in which the addresses associated with the domain name or URI
   represent the full scope of the mitigation.

   In the PUT request at least one of the attributes 'target-prefix',
   'target-fqdn','target-uri', or 'alias-name' MUST be present.

   Attributes and Uri-Path parameters with empty values MUST NOT be
   present in a request.

   Figure 7 shows a PUT request example to signal that ports 80, 8080,
   and 443 used by 2001:db8:6401::1 and 2001:db8:6401::2 servers are
   under attack (illustrated in JSON diagnostic notation).  The presence
   of 'cdid' indicates that a server-domain DOTS gateway has modified
   the initial PUT request sent by the DOTS client.  Note that 'cdid'
   MUST NOT appear in the PUT request message body.
































Reddy, et al.             Expires March 3, 2019                [Page 19]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


     Header: PUT (Code=0.03)
     Uri-Path: ".well-known"
     Uri-Path: "dots"
     Uri-Path: "v1.0"
     Uri-Path: "mitigate"
     Uri-Path: "cdid=7eeaf349529eb55ed50113"
     Uri-Path: "cuid=dz6pHjaADkaFTbjr0JGBpw"
     Uri-Path: "mid=123"
     Content-Format: "application/cbor"
     {
       "ietf-dots-signal-channel:mitigation-scope": {
         "scope": [
           {
             "target-prefix": [
                "2001:db8:6401::1/128",
                "2001:db8:6401::2/128"
              ],
             "target-port-range": [
               {
                 "lower-port": 80
               },
               {
                 "lower-port": 443
               },
               {
                  "lower-port": 8080
               }
              ],
              "target-protocol": [
                6
              ],
             "lifetime": 3600
           }
         ]
       }
     }

                 Figure 7: PUT for DOTS Mitigation Request

   The corresponding CBOR encoding format is shown in Figure 8.











Reddy, et al.             Expires March 3, 2019                [Page 20]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   A1                                      # map(1)
      01                                   # unsigned(1)
      A1                                   # map(1)
         02                                # unsigned(2)
         81                                # array(1)
            A3                             # map(3)
               06                          # unsigned(6)
               82                          # array(2)
                  74                       # text(20)
                     323030313A6462383A363430313A3A312F313238
                  74                       # text(20)
                     323030313A6462383A363430313A3A322F313238
               07                          # unsigned(7)
               83                          # array(3)
                  A1                       # map(1)
                     08                    # unsigned(8)
                     18 50                 # unsigned(80)
                  A1                       # map(1)
                     08                    # unsigned(8)
                     19 01BB               # unsigned(443)
                  A1                       # map(1)
                     08                    # unsigned(8)
                     19 1F90               # unsigned(8080)
               0A                          # unsigned(10)
               81                          # array(1)
                  06                       # unsigned(6)
               0E                          # unsigned(14)
                  19 0E10                  # unsigned(3600)

             Figure 8: PUT for DOTS Mitigation Request (CBOR)

   In both DOTS signal and data channel sessions, the DOTS client MUST
   authenticate itself to the DOTS server (Section 8).  The DOTS server
   MAY use the algorithm presented in Section 7 of [RFC7589] to derive
   the DOTS client identity or username from the client certificate.
   The DOTS client identity allows the DOTS server to accept mitigation
   requests with scopes that the DOTS client is authorized to manage.

   The DOTS server couples the DOTS signal and data channel sessions
   using the DOTS client identity and optionally the 'cdid' parameter
   value, so the DOTS server can validate whether the aliases conveyed
   in the mitigation request were indeed created by the same DOTS client
   using the DOTS data channel session.  If the aliases were not created
   by the DOTS client, the DOTS server MUST return 4.00 (Bad Request) in
   the response.

   The DOTS server couples the DOTS signal channel sessions using the
   DOTS client identity and optionally the 'cdid' parameter value, and



Reddy, et al.             Expires March 3, 2019                [Page 21]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   the DOTS server uses 'mid' and 'cuid' Uri-Path parameter values to
   detect duplicate mitigation requests.  If the mitigation request
   contains the 'alias-name' and other parameters identifying the target
   resources (such as 'target-prefix', 'target-port-range', 'target-
   fqdn', or 'target-uri'), the DOTS server appends the parameter values
   in 'alias-name' with the corresponding parameter values in 'target-
   prefix', 'target-port-range', 'target-fqdn', or 'target-uri'.

   The DOTS server indicates the result of processing the PUT request
   using CoAP response codes.  CoAP 2.xx codes are success.  CoAP 4.xx
   codes are some sort of invalid requests (client errors).  COAP 5.xx
   codes are returned if the DOTS server has erred or is currently
   unavailable to provide mitigation in response to the mitigation
   request from the DOTS client.

   Figure 9 shows an example response to a PUT request that is
   successfully processed by a DOTS server (i.e., CoAP 2.xx response
   codes).  This version of the specification forbids 'cuid' and 'cdid'
   (if used) to be returned in a response message body.

   {
     "ietf-dots-signal-channel:mitigation-scope": {
        "scope": [
           {
             "mid": 12332,
             "lifetime": 3600
           }
         ]
      }
   }

                       Figure 9: 2.xx Response Body

   If the request is missing a mandatory attribute, does not include
   'cuid' or 'mid' Uri-Path options, includes multiple 'scope'
   parameters, or contains invalid or unknown parameters, the DOTS
   server MUST reply with 4.00 (Bad Request).  DOTS agents can safely
   ignore Vendor-Specific parameters they don't understand.

   A DOTS server that receives a mitigation request with a lifetime set
   to '0' MUST reply with a 4.00 (Bad Request).

   If the DOTS server does not find the 'mid' parameter value conveyed
   in the PUT request in its configuration data, it MAY accept the
   mitigation request by sending back a 2.01 (Created) response to the
   DOTS client; the DOTS server will consequently try to mitigate the
   attack.




Reddy, et al.             Expires March 3, 2019                [Page 22]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   If the DOTS server finds the 'mid' parameter value conveyed in the
   PUT request in its configuration data bound to that DOTS client, it
   MAY update the mitigation request, and a 2.04 (Changed) response is
   returned to indicate a successful update of the mitigation request.

   The relative order of two mitigation requests, having the same
   'trigger-mitigation' type, from a DOTS client is determined by
   comparing their respective 'mid' values.  If two mitigation requests
   with the same 'trigger-mitigation' type have overlapping mitigation
   scopes, the mitigation request with the highest numeric 'mid' value
   will override the other mitigation request.  Two mitigation requests
   from a DOTS client have overlapping scopes if there is a common IP
   address, IP prefix, FQDN, URI, or alias-name.  To avoid maintaining a
   long list of overlapping mitigation requests (i.e., requests with the
   same 'trigger-mitigation' type and overlapping scopes) from a DOTS
   client and avoid error-prone provisioning of mitigation requests from
   a DOTS client, the overlapped lower numeric 'mid' MUST be
   automatically deleted and no longer available at the DOTS server.
   For example, if the DOTS server receives a mitigation request which
   overlaps with an existing mitigation with a higher numeric 'mid', the
   DOTS server rejects the request by returning 4.09 (Conflict) to the
   DOTS client.  The response includes enough information for a DOTS
   client to recognize the source of the conflict as described below:

   conflict-information:  Indicates that a mitigation request is
      conflicting with another mitigation request.  This optional
      attribute has the following structure:

      conflict-cause:  Indicates the cause of the conflict.  The
         following values are defined:

         1:  Overlapping targets. 'conflict-scope' provides more details
             about the conflicting target clauses.

      conflict-scope:  Indicates the conflict scope.  It may include a
         list of IP addresses, a list of prefixes, a list of port
         numbers, a list of target protocols, a list of FQDNs, a list of
         URIs, a list of alias-names, or a 'mid'.

   If the DOTS server receives a mitigation request which overlaps with
   an active mitigation request, but both having distinct 'trigger-
   mitigation' types, the DOTS server MUST deactivate (absent explicit
   policy/configuration otherwise) the mitigation request with 'trigger-
   mitigation' set to false.  Particularly, if the mitigation request
   with 'trigger-mitigation' set to false is active, the DOTS server
   withdraws the mitigation request (i.e., status code is set to '7' as
   defined in Table 2) and transitions the status of the mitigation
   request to '8'.



Reddy, et al.             Expires March 3, 2019                [Page 23]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   Upon DOTS signal channel session loss with a peer DOTS client, the
   DOTS server MUST withdraw (absent explicit policy/configuration
   otherwise) any active mitigation requests overlapping with mitigation
   requests having 'trigger-mitigation' set to false from that DOTS
   client.  Note that active-but-terminating period is not observed for
   mitigations withdrawn at the initiative of the DOTS server.

   DOTS clients may adopt various strategies for setting the scopes of
   immediate and pre-configured mitigation requests to avoid potential
   conflicts.  For example, a DOTS client may tweak pre-configured
   scopes so that the scope of any overlapping immediate mitigation
   request will be a subset of the pre-configured scopes.  Also, if an
   immediate mitigation request overlaps with any of the pre-configured
   scopes, the DOTS client sets the scope of the overlapping immediate
   mitigation request to be a subset of the pre-configured scopes.

   If the request is conflicting with an existing mitigation request
   from a different DOTS client, the DOTS server may return 2.01
   (Created) or 4.09 (Conflict) to the requesting DOTS client.  If the
   DOTS server decides to maintain the new mitigation request, the DOTS
   server returns 2.01 (Created) to the requesting DOTS client.  If the
   DOTS server decides to reject the new mitigation request, the DOTS
   server returns 4.09 (Conflict) to the requesting DOTS client.  For
   both 2.01 (Created) and 4.09 (Conflict) responses, the response
   includes enough information for a DOTS client to recognize the source
   of the conflict as described below:

   conflict-information:  Indicates that a mitigation request is
      conflicting with another mitigation request(s) from other DOTS
      client(s).  This optional attribute has the following structure:

      conflict-status:  Indicates the status of a conflicting mitigation
         request.  The following values are defined:

         1:  DOTS server has detected conflicting mitigation requests
             from different DOTS clients.  This mitigation request is
             currently inactive until the conflicts are resolved.
             Another mitigation request is active.

         2:  DOTS server has detected conflicting mitigation requests
             from different DOTS clients.  This mitigation request is
             currently active.

         3:  DOTS server has detected conflicting mitigation requests
             from different DOTS clients.  All conflicting mitigation
             requests are inactive.





Reddy, et al.             Expires March 3, 2019                [Page 24]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


      conflict-cause:  Indicates the cause of the conflict.  The
         following values are defined:

         1:  Overlapping targets. 'conflict-scope' provides more details
             about the conflicting target clauses.

         2:  Conflicts with an existing white list.  This code is
             returned when the DDoS mitigation detects source addresses/
             prefixes in the white-listed ACLs are attacking the target.

         3:  CUID Collision.  This code is returned when a DOTS client
             uses a 'cuid' that is already used by another DOTS client.
             This code is an indication that the request has been
             rejected and a new request with a new 'cuid' is to be re-
             sent by the DOTS client.  Note that 'conflict-status',
             'conflict-scope', and 'retry-timer' are not returned in the
             error response.

      conflict-scope:  Indicates the conflict scope.  It may include a
         list of IP addresses, a list of prefixes, a list of port
         numbers, a list of target protocols, a list of FQDNs, a list of
         URIs, a list of alias-names, or references to conflicting ACLs.

      retry-timer:  Indicates, in seconds, the time after which the DOTS
         client may re-issue the same request.  The DOTS server returns
         'retry-timer' only to DOTS client(s) for which a mitigation
         request is deactivated.  Any retransmission of the same
         mitigation request before the expiry of this timer is likely to
         be rejected by the DOTS server for the same reasons.

         The retry-timer SHOULD be equal to the lifetime of the active
         mitigation request resulting in the deactivation of the
         conflicting mitigation request.  The lifetime of the
         deactivated mitigation request will be updated to (retry-timer
         + 45 seconds), so the DOTS client can refresh the deactivated
         mitigation request after retry-timer seconds before expiry of
         lifetime and check if the conflict is resolved.

   As an active attack evolves, DOTS clients can adjust the scope of
   requested mitigation as necessary, by refining the scope of resources
   requiring mitigation.  This can be achieved by sending a PUT request
   with a new 'mid' value that will override the existing one with
   overlapping mitigation scopes.

   For a mitigation request to continue beyond the initial negotiated
   lifetime, the DOTS client has to refresh the current mitigation
   request by sending a new PUT request.  This PUT request MUST use the
   same 'mid' value, and MUST repeat all the other parameters as sent in



Reddy, et al.             Expires March 3, 2019                [Page 25]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   the original mitigation request apart from a possible change to the
   lifetime parameter value.

4.4.2.  Retrieve Information Related to a Mitigation

   A GET request is used by a DOTS client to retrieve information
   (including status) of DOTS mitigations from a DOTS server.

   'cuid' is a mandatory Uri-Path parameter for GET requests.

   Uri-Path parameters with empty values MUST NOT be present in a
   request.

   The same considerations for manipulating 'cdid' parameter by server-
   domain DOTS gateways specified in Section 4.4.1 MUST be followed for
   GET requests.

   The 'c' (content) parameter and its permitted values defined in
   [I-D.ietf-core-comi] can be used to retrieve non-configuration data
   (attack mitigation status), configuration data, or both.  The DOTS
   server MAY support this optional filtering capability.  It can safely
   ignore it if not supported.  If the DOTS client supports the optional
   filtering capability, it SHOULD use "c=n" query (to get back only the
   dynamically changing data) or "c=c" query (to get back the static
   configuration values) when the DDoS attack is active to limit the
   size of the response.

   The DOTS client can use Block-wise transfer [RFC7959] to get the list
   of all its mitigations maintained by a DOTS server, it can send
   Block2 Option in a GET request with NUM = 0 to aid in limiting the
   size of the response.  If the representation of all the active
   mitigation requests associated with the DOTS client does not fit
   within a single datagram, the DOTS server MUST use the Block2 Option
   with NUM = 0 in the GET response.  The Size2 Option may be conveyed
   in the response to indicate the total size of the resource
   representation.  The DOTS client retrieves the rest of the
   representation by sending additional GET requests with Block2 Options
   containing NUM values greater than zero.  The DOTS client MUST adhere
   to the block size preferences indicated by the DOTS server in the
   response.  If the DOTS server uses the Block2 Option in the GET
   response and the response is for a dynamically changing resource
   (e.g. "c=n" or "c=a" query), the DOTS server MUST include the ETag
   Option in the response.  The DOTS client MUST include the same ETag
   value in subsequent GET requests to retrieve the rest of the
   representation.

   The following examples illustrate how a DOTS client retrieves active
   mitigation requests from a DOTS server.  In particular:



Reddy, et al.             Expires March 3, 2019                [Page 26]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   o  Figure 10 shows the example of a GET request to retrieve all DOTS
      mitigation requests signaled by a DOTS client.

   o  Figure 11 shows the example of a GET request to retrieve a
      specific DOTS mitigation request signaled by a DOTS client.  The
      configuration data to be reported in the response is formatted in
      the same order as was processed by the DOTS server in the original
      mitigation request.

   These two examples assume the default of "c=a"; that is, the DOTS
   client asks for all data to be reported by the DOTS server.

     Header: GET (Code=0.01)
     Uri-Path: ".well-known"
     Uri-Path: "dots"
     Uri-Path: "v1.0"
     Uri-Path: "mitigate"
     Uri-Path: "cuid=dz6pHjaADkaFTbjr0JGBpw"
     Observe: 0

          Figure 10: GET to Retrieve all DOTS Mitigation Requests

     Header: GET (Code=0.01)
     Uri-Path: ".well-known"
     Uri-Path: "dots"
     Uri-Path: "v1.0"
     Uri-Path: "mitigate"
     Uri-Path: "cuid=dz6pHjaADkaFTbjr0JGBpw"
     Uri-Path: "mid=12332"
     Observe: 0

       Figure 11: GET to Retrieve a Specific DOTS Mitigation Request

   If the DOTS server does not find the 'mid' Uri-Path value conveyed in
   the GET request in its configuration data for the requesting DOTS
   client, it MUST respond with a 4.04 (Not Found) error response code.
   Likewise, the same error MUST be returned as a response to a request
   to retrieve all mitigation records (i.e., 'mid' Uri-Path is not
   defined) of a given DOTS client if the DOTS server does not find any
   mitigation record for that DOTS client.  As a reminder, a DOTS client
   is identified by its identity (e.g., client certificate, 'cuid') and
   optionally the 'cdid'.

   Figure 12 shows a response example of all active mitigation requests
   associated with the DOTS client as maintained by the DOTS server.
   The response indicates the mitigation status of each mitigation
   request.




Reddy, et al.             Expires March 3, 2019                [Page 27]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   {
     "ietf-dots-signal-channel:mitigation-scope": {
       "scope": [
         {
           "mid": 12332,
           "mitigation-start": "1507818434",
           "target-prefix": [
                "2001:db8:6401::1/128",
                "2001:db8:6401::2/128"
           ],
           "target-protocol": [
             17
           ],
           "lifetime": 1800,
           "status": "attack-successfully-mitigated",
           "bytes-dropped": "134334555",
           "bps-dropped": "43344",
           "pkts-dropped": "333334444",
           "pps-dropped": "432432"
         },
         {
           "mid": 12333,
           "mitigation-start": "1507818393",
           "target-prefix": [
                "2001:db8:6401::1/128",
                "2001:db8:6401::2/128"
           ],
           "target-protocol": [
             6
           ],
           "lifetime": 1800,
           "status": "attack-stopped",
           "bytes-dropped": "0",
           "bps-dropped": "0",
           "pkts-dropped": "0",
           "pps-dropped": "0"
         }
       ]
     }
   }

                 Figure 12: Response Body to a GET Request

   The mitigation status parameters are described below:

   mitigation-start:  Mitigation start time is expressed in seconds
      relative to 1970-01-01T00:00Z in UTC time (Section 2.4.1 of




Reddy, et al.             Expires March 3, 2019                [Page 28]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


      [RFC7049]).  The CBOR encoding is modified so that the leading tag
      1 (epoch-based date/time) MUST be omitted.

      This is a mandatory attribute when an attack mitigation is
      triggered.  Particularly, 'mitigation-start' is not returned for a
      mitigation with 'status' code set to 8.

   lifetime:  The remaining lifetime of the mitigation request, in
      seconds.

      This is a mandatory attribute.

   status:  Status of attack mitigation.  The various possible values of
      'status' parameter are explained in Table 2.

      This is a mandatory attribute.

   bytes-dropped:  The total dropped byte count for the mitigation
      request since the attack mitigation is triggered.  The count wraps
      around when it reaches the maximum value of unsigned integer64.

      This is an optional attribute.

   bps-dropped:  The average number of dropped bytes per second for the
      mitigation request since the attack mitigation is triggered.  This
      SHOULD be a five-minute average.

      This is an optional attribute.

   pkts-dropped:  The total number of dropped packet count for the
      mitigation request since the attack mitigation is triggered.  The
      count wraps around when it reaches the maximum value of unsigned
      integer64.

      This is an optional attribute.

   pps-dropped:  The average number of dropped packets per second for
      the mitigation request since the attack mitigation is triggered.
      This SHOULD be a five-minute average.

      This is an optional attribute.










Reddy, et al.             Expires March 3, 2019                [Page 29]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   +-----------+-------------------------------------------------------+
   | Parameter | Description                                           |
   |     Value |                                                       |
   +-----------+-------------------------------------------------------+
   |         1 | Attack mitigation setup is in progress (e.g.,         |
   |           | changing the network path to redirect the inbound     |
   |           | traffic to a DOTS mitigator).                         |
   +-----------+-------------------------------------------------------+
   |         2 | Attack is being successfully mitigated (e.g., traffic |
   |           | is redirected to a DDoS mitigator and attack traffic  |
   |           | is dropped).                                          |
   +-----------+-------------------------------------------------------+
   |         3 | Attack has stopped and the DOTS client can withdraw   |
   |           | the mitigation request. This status code will be      |
   |           | transmitted for immediate mitigation requests till    |
   |           | the mitigation is withdrawn or the lifetime expires.  |
   |           | For mitigation requests with pre-configured scopes    |
   |           | (i.e., 'trigger-mitigation' set to 'false'), this     |
   |           | status code will be transmitted 4 times and then      |
   |           | transition to "8".                                    |
   +-----------+-------------------------------------------------------+
   |         4 | Attack has exceeded the mitigation provider           |
   |           | capability.                                           |
   +-----------+-------------------------------------------------------+
   |         5 | DOTS client has withdrawn the mitigation request and  |
   |           | the mitigation is active but terminating.             |
   +-----------+-------------------------------------------------------+
   |         6 | Attack mitigation is now terminated.                  |
   +-----------+-------------------------------------------------------+
   |         7 | Attack mitigation is withdrawn. If a mitigation       |
   |           | request with 'trigger-mitigation' set to false is     |
   |           | withdrawn because it overlaps with an immediate       |
   |           | mitigation request, this status code will be          |
   |           | transmitted 4 times and then transition to "8" for    |
   |           | the mitigation request with pre-configured scopes.    |
   +-----------+-------------------------------------------------------+
   |         8 | Attack mitigation will be triggered for the           |
   |           | mitigation request only when the DOTS signal channel  |
   |           | session is lost.                                      |
   +-----------+-------------------------------------------------------+

                   Table 2: Values of 'status' Parameter

4.4.2.1.  DOTS Servers Sending Mitigation Status

   The Observe Option defined in [RFC7641] extends the CoAP core
   protocol with a mechanism for a CoAP client to "observe" a resource
   on a CoAP server: The client retrieves a representation of the



Reddy, et al.             Expires March 3, 2019                [Page 30]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   resource and requests this representation be updated by the server as
   long as the client is interested in the resource.  DOTS
   implementations MUST use the Observe Option for both 'mitigate' and
   'config' (Section 4.2).

   A DOTS client conveys the Observe Option set to '0' in the GET
   request to receive asynchronous notifications of attack mitigation
   status from the DOTS server.

   Unidirectional mitigation notifications within the bidirectional
   signal channel enables asynchronous notifications between the agents.
   [RFC7641] indicates that (1) a notification can be sent in a
   Confirmable (CON) or a Non-confirmable (NON) message, and (2) the
   message type used is typically application dependent and may be
   determined by the server for each notification individually.  For
   DOTS server application, the message type MUST always be set to Non-
   confirmable even if the underlying COAP library elects a notification
   to be sent in a Confirmable message.

   Due to the higher likelihood of packet loss during a DDoS attack, the
   DOTS server periodically sends attack mitigation status to the DOTS
   client and also notifies the DOTS client whenever the status of the
   attack mitigation changes.  If the DOTS server cannot maintain an RTT
   estimate, it SHOULD NOT send more than one asynchronous notification
   every 3 seconds, and SHOULD use an even less aggressive rate whenever
   possible (case 2 in Section 3.1.3 of [RFC8085]).

   When conflicting requests are detected, the DOTS server enforces the
   corresponding policy (e.g., accept all requests, reject all requests,
   accept only one request but reject all the others, ...).  It is
   assumed that this policy is supplied by the DOTS server administrator
   or it is a default behavior of the DOTS server implementation.  Then,
   the DOTS server sends notification message(s) to the DOTS client(s)
   at the origin of the conflict (refer to the conflict parameters
   defined in Section 4.4.1).  A conflict notification message includes
   information about the conflict cause, scope, and the status of the
   mitigation request(s).  For example,

   o  A notification message with 'status' code set to '7 (Attack
      mitigation is withdrawn)' and 'conflict-status' set to '1' is sent
      to a DOTS client to indicate that an active mitigation request is
      deactivated because a conflict is detected.

   o  A notification message with 'status' code set to '1 (Attack
      mitigation is in progress)' and 'conflict-status' set to '2' is
      sent to a DOTS client to indicate that this mitigation request is
      in progress, but a conflict is detected.




Reddy, et al.             Expires March 3, 2019                [Page 31]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   Upon receipt of a conflict notification message indicating that a
   mitigation request is deactivated because of a conflict, a DOTS
   client MUST NOT resend the same mitigation request before the expiry
   of 'retry-timer'.  It is also recommended that DOTS clients support
   means to alert administrators about mitigation conflicts.

   A DOTS client that is no longer interested in receiving notifications
   from the DOTS server can simply "forget" the observation.  When the
   DOTS server sends the next notification, the DOTS client will not
   recognize the token in the message and thus will return a Reset
   message.  This causes the DOTS server to remove the associated entry.
   Alternatively, the DOTS client can explicitly deregister itself by
   issuing a GET request that has the Token field set to the token of
   the observation to be cancelled and includes an Observe Option with
   the value set to '1' (deregister).

   Figure 13 shows an example of a DOTS client requesting a DOTS server
   to send notifications related to a mitigation request.  Note that for
   mitigations with pre-configured scopes (i.e., 'trigger-mitigation'
   set to 'false'), the state will need to transition from 3 (attack-
   stopped) to 8 (attack-mitigation-signal-loss).






























Reddy, et al.             Expires March 3, 2019                [Page 32]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   +-----------+                              +-----------+
   |DOTS client|                              |DOTS server|
   +-----------+                              +-----------+
         |                                          |
         |  GET /<mid>                              |
         |  Token: 0x4a                             | Registration
         |  Observe: 0                              |
         +----------------------------------------->|
         |                                          |
         |  2.05 Content                            |
         |  Token: 0x4a                             | Notification of
         |  Observe: 12                             | the current state
         |  status: "attack-mitigation-in-progress" |
         |                                          |
         |<-----------------------------------------+
         |  2.05 Content                            |
         |  Token: 0x4a                             | Notification upon
         |  Observe: 44                             | a state change
         |  status: "attack-successfully-mitigated" |
         |                                          |
         |<-----------------------------------------+
         |  2.05 Content                            |
         |  Token: 0x4a                             | Notification upon
         |  Observe: 60                             | a state change
         |  status: "attack-stopped"                |
         |<-----------------------------------------+
         |                                          |
                            ...

           Figure 13: Notifications of Attack Mitigation Status

4.4.2.2.  DOTS Clients Polling for Mitigation Status

   The DOTS client can send the GET request at frequent intervals
   without the Observe Option to retrieve the configuration data of the
   mitigation request and non-configuration data (i.e., the attack
   status).  The frequency of polling the DOTS server to get the
   mitigation status SHOULD follow the transmission guidelines in
   Section 3.1.3 of [RFC8085].

   If the DOTS server has been able to mitigate the attack and the
   attack has stopped, the DOTS server indicates as such in the status.
   In such case, the DOTS client recalls the mitigation request by
   issuing a DELETE request for this mitigation request (Section 4.4.4).

   A DOTS client SHOULD react to the status of the attack as per the
   information sent by the DOTS server rather than acknowledging by
   itself, using its own means, that the attack has been mitigated.



Reddy, et al.             Expires March 3, 2019                [Page 33]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   This ensures that the DOTS client does not recall a mitigation
   request prematurely because it is possible that the DOTS client does
   not sense the DDoS attack on its resources, but the DOTS server could
   be actively mitigating the attack because the attack is not
   completely averted.

4.4.3.  Efficacy Update from DOTS Clients

   While DDoS mitigation is in progress, due to the likelihood of packet
   loss, a DOTS client MAY periodically transmit DOTS mitigation
   efficacy updates to the relevant DOTS server.  A PUT request is used
   to convey the mitigation efficacy update to the DOTS server.  This
   PUT request is treated as a refresh of the current mitigation.

   The PUT request used for efficacy update MUST include all the
   parameters used in the PUT request to carry the DOTS mitigation
   request (Section 4.4.1) unchanged apart from the 'lifetime' parameter
   value.  If this is not the case, the DOTS server MUST reject the
   request with a 4.00 (Bad Request).

   The If-Match Option (Section 5.10.8.1 of [RFC7252]) with an empty
   value is used to make the PUT request conditional on the current
   existence of the mitigation request.  If UDP is used as transport,
   CoAP requests may arrive out-of-order.  For example, the DOTS client
   may send a PUT request to convey an efficacy update to the DOTS
   server followed by a DELETE request to withdraw the mitigation
   request, but the DELETE request arrives at the DOTS server before the
   PUT request.  To handle out-of-order delivery of requests, if an If-
   Match Option is present in the PUT request and the 'mid' in the
   request matches a mitigation request from that DOTS client, the
   request is processed by the DOTS server.  If no match is found, the
   PUT request is silently ignored by the DOTS server.

   An example of an efficacy update message, which includes an If-Match
   Option with an empty value, is depicted in Figure 14.
















Reddy, et al.             Expires March 3, 2019                [Page 34]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


      Header: PUT (Code=0.03)
      Uri-Path: ".well-known"
      Uri-Path: "dots"
      Uri-Path: "v1.0"
      Uri-Path: "mitigate"
      Uri-Path: "cuid=dz6pHjaADkaFTbjr0JGBpw"
      Uri-Path: "mid=123"
      Content-Format: "application/cbor"
      If-Match:
      {
       "ietf-dots-signal-channel:mitigation-scope": {
         "scope": [
           {
             "target-prefix": [
                "string"
              ],
             "target-port-range": [
                {
                  "lower-port": integer,
                  "upper-port": integer
                }
              ],
              "target-protocol": [
                integer
              ],
              "target-fqdn": [
                "string"
              ],
              "target-uri": [
                "string"
              ],
              "alias-name": [
                "string"
              ],
             "lifetime": integer,
             "attack-status": integer
           }
         ]
       }
      }

                        Figure 14: Efficacy Update

   The 'attack-status' parameter is a mandatory attribute when
   performing an efficacy update.  The various possible values contained
   in the 'attack-status' parameter are described in Table 3.





Reddy, et al.             Expires March 3, 2019                [Page 35]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   +-----------+-------------------------------------------------------+
   | Parameter | Description                                           |
   |     value |                                                       |
   +-----------+-------------------------------------------------------+
   |         1 | The DOTS client determines that it is still under     |
   |           | attack.                                               |
   +-----------+-------------------------------------------------------+
   |         2 | The DOTS client determines that the attack is         |
   |           | successfully mitigated (e.g., attack traffic is not   |
   |           | seen).                                                |
   +-----------+-------------------------------------------------------+

               Table 3: Values of 'attack-status' Parameter

   The DOTS server indicates the result of processing a PUT request
   using CoAP response codes.  The response code 2.04 (Changed) is
   returned if the DOTS server has accepted the mitigation efficacy
   update.  The error response code 5.03 (Service Unavailable) is
   returned if the DOTS server has erred or is incapable of performing
   the mitigation.

4.4.4.  Withdraw a Mitigation

   DELETE requests are used to withdraw DOTS mitigation requests from
   DOTS servers (Figure 15).

   'cuid' and 'mid' are mandatory Uri-Path parameters for DELETE
   requests.

   The same considerations for manipulating 'cdid' parameter by DOTS
   gateways, as specified in Section 4.4.1, MUST be followed for DELETE
   requests.  Uri-Path parameters with empty values MUST NOT be present
   in a request.

     Header: DELETE (Code=0.04)
     Uri-Path: ".well-known"
     Uri-Path: "dots"
     Uri-Path: "v1.0"
     Uri-Path: "mitigate"
     Uri-Path: "cuid=dz6pHjaADkaFTbjr0JGBpw"
     Uri-Path: "mid=123"

                   Figure 15: Withdraw a DOTS Mitigation

   If the DELETE request does not include 'cuid' and 'mid' parameters,
   the DOTS server MUST reply with a 4.00 (Bad Request).





Reddy, et al.             Expires March 3, 2019                [Page 36]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   Once the request is validated, the DOTS server immediately
   acknowledges a DOTS client's request to withdraw the DOTS signal
   using 2.02 (Deleted) response code with no response payload.  A 2.02
   (Deleted) Response Code is returned even if the 'mid' parameter value
   conveyed in the DELETE request does not exist in its configuration
   data before the request.

   If the DOTS server finds the 'mid' parameter value conveyed in the
   DELETE request in its configuration data for the DOTS client, then to
   protect against route or DNS flapping caused by a DOTS client rapidly
   removing a mitigation, and to dampen the effect of oscillating
   attacks, the DOTS server MAY allow mitigation to continue for a
   limited period after acknowledging a DOTS client's withdrawal of a
   mitigation request.  During this period, the DOTS server status
   messages SHOULD indicate that mitigation is active but terminating
   (Section 4.4.2).

   The initial active-but-terminating period SHOULD be sufficiently long
   to absorb latency incurred by route propagation.  The active-but-
   terminating period SHOULD be set by default to 120 seconds.  If the
   client requests mitigation again before the initial active-but-
   terminating period elapses, the DOTS server MAY exponentially
   increase the active-but-terminating period up to a maximum of 300
   seconds (5 minutes).

   Once the active-but-terminating period elapses, the DOTS server MUST
   treat the mitigation as terminated, as the DOTS client is no longer
   responsible for the mitigation.  For example, if there is a financial
   relationship between the DOTS client and server domains, the DOTS
   client stops incurring cost at this point.

   If a mitigation is triggered due to a signal channel loss, the DOTS
   server relies upon normal triggers to stop that mitigation
   (typically, receipt of a valid DELETE request, expiry of the
   mitigation lifetime, or observation of traffic to the attack target).
   In particular, the DOTS server MUST NOT consider the signal channel
   recovery as a trigger to stop the mitigation.

4.5.  DOTS Signal Channel Session Configuration

   A DOTS client can negotiate, configure, and retrieve the DOTS signal
   channel session behavior with its DOTS peers.  The DOTS signal
   channel can be used, for example, to configure the following:

   a.  Heartbeat interval (heartbeat-interval): DOTS agents regularly
       send heartbeats (CoAP Ping/Pong) to each other after mutual
       authentication is successfully completed in order to keep the
       DOTS signal channel open.  Heartbeat messages are exchanged



Reddy, et al.             Expires March 3, 2019                [Page 37]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


       between DOTS agents every 'heartbeat-interval' seconds to detect
       the current status of the DOTS signal channel session.

   b.  Missing heartbeats allowed (missing-hb-allowed): This variable
       indicates the maximum number of consecutive heartbeat messages
       for which a DOTS agent did not receive a response before
       concluding that the session is disconnected or defunct.

   c.  Acceptable signal loss ratio: Maximum retransmissions,
       retransmission timeout value, and other message transmission
       parameters for the DOTS signal channel.

   The same or distinct configuration sets may be used during times when
   a mitigation is active ('mitigating-config') and when no mitigation
   is active ('idle-config').  This is particularly useful for DOTS
   servers that might want to reduce heartbeat frequency or cease
   heartbeat exchanges when an active DOTS client has not requested
   mitigation.  If distinct configurations are used, DOTS agents MUST
   follow the appropriate configuration set as a function of the
   mitigation activity (e.g., if no mitigation request is active, 'idle-
   config'-related values must be followed).  Additionally, DOTS agents
   MUST automatically switch to the other configuration upon a change in
   the mitigation activity (e.g., if an attack mitigation is launched
   after a peacetime, the DOTS agent switches from 'idle-config' to
   'mitigating-config'-related values).

   Requests and responses are deemed reliable by marking them as
   Confirmable messages.  DOTS signal channel session configuration
   requests and responses are marked as Confirmable messages.  As
   explained in Section 2.1 of [RFC7252], a Confirmable message is
   retransmitted using a default timeout and exponential back-off
   between retransmissions, until the DOTS server sends an
   Acknowledgement message (ACK) with the same Message ID conveyed from
   the DOTS client.

   Message transmission parameters are defined in Section 4.8 of
   [RFC7252].  The DOTS server can either piggyback the response in the
   acknowledgement message or, if the DOTS server cannot respond
   immediately to a request carried in a Confirmable message, it simply
   responds with an Empty Acknowledgement message so that the DOTS
   client can stop retransmitting the request.  Empty Acknowledgement
   message is explained in Section 2.2 of [RFC7252].  When the response
   is ready, the server sends it in a new Confirmable message which in
   turn needs to be acknowledged by the DOTS client (see Sections 5.2.1
   and 5.2.2 of [RFC7252]).  Requests and responses exchanged between
   DOTS agents during peacetime are marked as Confirmable messages.





Reddy, et al.             Expires March 3, 2019                [Page 38]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


      Implementation Note: A DOTS client that receives a response in a
      CON message may want to clean up the message state right after
      sending the ACK.  If that ACK is lost and the DOTS server
      retransmits the CON, the DOTS client may no longer have any state
      that would help it correlate this response: from the DOTS client's
      standpoint, the retransmission message is unexpected.  The DOTS
      client will send a Reset message so it does not receive any more
      retransmissions.  This behavior is normal and not an indication of
      an error (see Section 5.3.2 of [RFC7252] for more details).

4.5.1.  Discover Configuration Parameters

   A GET request is used to obtain acceptable (e.g., minimum and maximum
   values) and current configuration parameters on the DOTS server for
   DOTS signal channel session configuration.  This procedure occurs
   between a DOTS client and its immediate peer DOTS server.  As such,
   this GET request MUST NOT be relayed by an on-path DOTS gateway.

   Figure 16 shows how to obtain acceptable configuration parameters for
   the DOTS server.

     Header: GET (Code=0.01)
     Uri-Path: ".well-known"
     Uri-Path: "dots"
     Uri-Path: "v1.0"
     Uri-Path: "config"

                 Figure 16: GET to Retrieve Configuration

   The DOTS server in the 2.05 (Content) response conveys the current,
   minimum, and maximum attribute values acceptable by the DOTS server
   (Figure 17).

   Content-Format: "application/cbor"
   {
     "ietf-dots-signal-channel:signal-config": {
       "mitigating-config": {
         "heartbeat-interval": {
           "max-value": integer,
           "min-value": integer,
           "current-value": integer
         },
         "missing-hb-allowed": {
           "max-value": integer,
           "min-value": integer,
           "current-value": integer
         },
         "max-retransmit": {



Reddy, et al.             Expires March 3, 2019                [Page 39]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


           "max-value": integer,
           "min-value": integer,
           "current-value": integer
         },
         "ack-timeout": {
           "max-value-decimal": number,
           "min-value-decimal": number,
           "current-value-decimal": number
         },
         "ack-random-factor": {
           "max-value-decimal": number,
           "min-value-decimal": number,
           "current-value-decimal": number
         }
       },
       "idle-config": {
         "heartbeat-interval": {
           "max-value": integer,
           "min-value": integer,
           "current-value": integer
         },
         "missing-hb-allowed": {
           "max-value": integer,
           "min-value": integer,
           "current-value": integer
         },
         "max-retransmit": {
           "max-value": integer,
           "min-value": integer,
           "current-value": integer
         },
         "ack-timeout": {
           "max-value-decimal": number,
           "min-value-decimal": number,
           "current-value-decimal": number
         },
         "ack-random-factor": {
           "max-value-decimal": number,
           "min-value-decimal": number,
           "current-value-decimal": number
         }
       }
     }
   }

                Figure 17: GET Configuration Response Body

   The parameters in Figure 17 are described below:



Reddy, et al.             Expires March 3, 2019                [Page 40]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   mitigating-config:  Set of configuration parameters to use when a
      mitigation is active.  The following parameters may be included:

      heartbeat-interval:   Time interval in seconds between two
         consecutive heartbeat messages.

         '0' is used to disable the heartbeat mechanism.

         This is an optional attribute.

      missing-hb-allowed:   Maximum number of consecutive heartbeat
         messages for which the DOTS agent did not receive a response
         before concluding that the session is disconnected.

         This is an optional attribute.

      max-retransmit:   Maximum number of retransmissions for a message
         (referred to as MAX_RETRANSMIT parameter in CoAP).

         This is an optional attribute.

      ack-timeout:   Timeout value in seconds used to calculate the
         initial retransmission timeout value (referred to as
         ACK_TIMEOUT parameter in CoAP).

         This is an optional attribute.

      ack-random-factor:   Random factor used to influence the timing of
         retransmissions (referred to as ACK_RANDOM_FACTOR parameter in
         CoAP).

         This is an optional attribute.

   idle-config:   Set of configuration parameters to use when no
      mitigation is active.  This attribute has the same structure as
      'mitigating-config'.

   Figure 18 shows an example of acceptable and current configuration
   parameters on a DOTS server for DOTS signal channel session
   configuration.  The same acceptable configuration is used during
   attack and peace times.

   Content-Format: "application/cbor"
   {
     "ietf-dots-signal-channel:signal-config": {
       "mitigating-config": {
         "heartbeat-interval": {
           "max-value": 240,



Reddy, et al.             Expires March 3, 2019                [Page 41]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


           "min-value": 15,
           "current-value": 30
         },
         "missing-hb-allowed": {
           "max-value": 9,
           "min-value": 3,
           "current-value": 5
         },
         "max-retransmit": {
           "max-value": 15,
           "min-value": 2,
           "current-value": 3
         },
         "ack-timeout": {
           "max-value-decimal": "30.0",
           "min-value-decimal": "1.0",
           "current-value-decimal": "2.0"
         },
         "ack-random-factor": {
           "max-value-decimal": "4.0",
           "min-value-decimal": "1.1",
           "current-value-decimal": "1.5"
         }
       },
       "idle-config": {
         "heartbeat-interval": {
           "max-value": 240,
           "min-value": 15,
           "current-value": 30
         },
         "missing-hb-allowed": {
           "max-value": 9,
           "min-value": 3,
           "current-value": 5
         },
         "max-retransmit": {
           "max-value": 15,
           "min-value": 2,
           "current-value": 3
         },
         "ack-timeout": {
           "max-value-decimal": "30.0",
           "min-value-decimal": "1.0",
           "current-value-decimal": "2.0"
         },
         "ack-random-factor": {
           "max-value-decimal": "4.0",
           "min-value-decimal": "1.1",



Reddy, et al.             Expires March 3, 2019                [Page 42]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


           "current-value-decimal": "1.5"
         }
       }
     }
   }

            Figure 18: Example of a Configuration Response Body

4.5.2.  Convey DOTS Signal Channel Session Configuration

   A PUT request is used to convey the configuration parameters for the
   signal channel (e.g., heartbeat interval, maximum retransmissions).
   Message transmission parameters for CoAP are defined in Section 4.8
   of [RFC7252].  The RECOMMENDED values of transmission parameter
   values are ack-timeout (2 seconds), max-retransmit (3), ack-random-
   factor (1.5).  In addition to those parameters, the RECOMMENDED
   specific DOTS transmission parameter values are 'heartbeat-interval'
   (30 seconds) and 'missing-hb-allowed' (5).

      Note: heartbeat-interval should be tweaked to also assist DOTS
      messages for NAT traversal (SIG-011 of
      [I-D.ietf-dots-requirements]).  According to [RFC8085], keepalive
      messages must not be sent more frequently than once every 15
      seconds and should use longer intervals when possible.
      Furthermore, [RFC4787] recommends NATs to use a state timeout of 2
      minutes or longer, but experience shows that sending packets every
      15 to 30 seconds is necessary to prevent the majority of
      middleboxes from losing state for UDP flows.  From that
      standpoint, this specification recommends a minimum heartbeat-
      interval of 15 seconds and a maximum heartbeat-interval of 240
      seconds.  The recommended value of 30 seconds is selected to
      anticipate the expiry of NAT state.

      A heartbeat-interval of 30 seconds may be considered as too chatty
      in some deployments.  For such deployments, DOTS agents may
      negotiate longer heartbeat-interval values to prevent any network
      overload with too frequent keepalives.

      Different heartbeat intervals can be defined for 'mitigating-
      config' and 'idle-config' to reduce being too chatty during idle
      times.  If there is an on-path translator between the DOTS client
      (standalone or part of a DOTS gateway) and the DOTS server, the
      'mitigating-config' heartbeat-interval has to be smaller than the
      translator session timeout.  It is recommended that the 'idle-
      config' heartbeat-interval is also smaller than the translator
      session timeout to prevent translator traversal issues, or set to
      '0'.  Means to discover the lifetime assigned by a translator are
      out of scope.



Reddy, et al.             Expires March 3, 2019                [Page 43]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   When a Confirmable "CoAP Ping" is sent, and if there is no response,
   the "CoAP Ping" is retransmitted max-retransmit number of times by
   the CoAP layer using an initial timeout set to a random duration
   between ack-timeout and (ack-timeout*ack-random-factor) and
   exponential back-off between retransmissions.  By choosing the
   recommended transmission parameters, the "CoAP Ping" will timeout
   after 45 seconds.  If the DOTS agent does not receive any response
   from the peer DOTS agent for 'missing-hb-allowed' number of
   consecutive "CoAP Ping" Confirmable messages, it concludes that the
   DOTS signal channel session is disconnected.  A DOTS client MUST NOT
   transmit a "CoAP Ping" while waiting for the previous "CoAP Ping"
   response from the same DOTS server.

   If the DOTS agent wishes to change the default values of message
   transmission parameters, it SHOULD follow the guidance given in
   Section 4.8.1 of [RFC7252].  The DOTS agents MUST use the negotiated
   values for message transmission parameters and default values for
   non-negotiated message transmission parameters.

   The signal channel session configuration is applicable to a single
   DOTS signal channel session between DOTS agents, so the 'cuid' Uri-
   Path MUST NOT be used.





























Reddy, et al.             Expires March 3, 2019                [Page 44]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


     Header: PUT (Code=0.03)
     Uri-Path: ".well-known"
     Uri-Path: "dots"
     Uri-Path: "v1.0"
     Uri-Path: "config"
     Uri-Path: "sid=123"
     Content-Format: "application/cbor"
     {
       "ietf-dots-signal-channel:signal-config": {
         "mitigating-config": {
           "heartbeat-interval": {
             "current-value": integer
           },
           "missing-hb-allowed": {
             "current-value": integer
           },
           "max-retransmit": {
             "current-value": integer
           },
           "ack-timeout": {
             "current-value-decimal": number
           },
           "ack-random-factor": {
             "current-value-decimal": number
           }
         },
         "idle-config": {
           "heartbeat-interval": {
             "current-value": integer
           },
           "missing-hb-allowed": {
             "current-value": integer
           },
           "max-retransmit": {
             "current-value": integer
           },
           "ack-timeout": {
             "current-value-decimal": number
           },
           "ack-random-factor": {
             "current-value-decimal": number
           }
         }
       }
     }

         Figure 19: PUT to Convey the DOTS Signal Channel Session
                            Configuration Data



Reddy, et al.             Expires March 3, 2019                [Page 45]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   The additional Uri-Path parameter to those defined in Table 1 is as
   follows:

   sid:  Session Identifier is an identifier for the DOTS signal channel
      session configuration data represented as an integer.  This
      identifier MUST be generated by DOTS clients.  'sid' values MUST
      increase monotonically.

      This is a mandatory attribute.

   The meaning of the parameters in the CBOR body is defined in
   Section 4.5.1.

   At least one of the attributes 'heartbeat-interval', 'missing-hb-
   allowed', 'max-retransmit', 'ack-timeout', and 'ack-random-factor'
   MUST be present in the PUT request.  Note that 'heartbeat-interval',
   'missing-hb-allowed', 'max-retransmit', 'ack-timeout', and 'ack-
   random-factor', if present, do not need to be provided for both
   'mitigating-config', and 'idle-config' in a PUT request.

   The PUT request with a higher numeric 'sid' value overrides the DOTS
   signal channel session configuration data installed by a PUT request
   with a lower numeric 'sid' value.  To avoid maintaining a long list
   of 'sid' requests from a DOTS client, the lower numeric 'sid' MUST be
   automatically deleted and no longer available at the DOTS server.

   Figure 20 shows a PUT request example to convey the configuration
   parameters for the DOTS signal channel.  In this example, the
   heartbeat mechanism is disabled when no mitigation is active, while
   the heartbeat interval is set to '91' when a mitigation is active.





















Reddy, et al.             Expires March 3, 2019                [Page 46]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


     Header: PUT (Code=0.03)
     Uri-Path: ".well-known"
     Uri-Path: "dots"
     Uri-Path: "v1.0"
     Uri-Path: "config"
     Uri-Path: "sid=123"
     Content-Format: "application/cbor"
     {
       "ietf-dots-signal-channel:signal-config": {
         "mitigating-config": {
           "heartbeat-interval": {
             "current-value": 91
           },
           "missing-hb-allowed": {
             "current-value": 3
           },
           "max-retransmit": {
             "current-value": 3
           },
           "ack-timeout": {
             "current-value-decimal": "2.0"
           },
           "ack-random-factor": {
             "current-value-decimal": "1.5"
           }
         },
         "idle-config": {
           "heartbeat-interval": {
             "current-value": 0
           },
           "max-retransmit": {
             "current-value": 3
           },
           "ack-timeout": {
             "current-value-decimal": "2.0"
           },
           "ack-random-factor": {
             "current-value-decimal": "1.5"
           }
         }
       }
     }

           Figure 20: PUT to Convey the Configuration Parameters

   The DOTS server indicates the result of processing the PUT request
   using CoAP response codes:




Reddy, et al.             Expires March 3, 2019                [Page 47]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   o  If the request is missing a mandatory attribute, does not include
      a 'sid' Uri-Path, or contains one or more invalid or unknown
      parameters, 4.00 (Bad Request) MUST be returned in the response.

   o  If the DOTS server does not find the 'sid' parameter value
      conveyed in the PUT request in its configuration data and if the
      DOTS server has accepted the configuration parameters, then a
      response code 2.01 (Created) MUST be returned in the response.

   o  If the DOTS server finds the 'sid' parameter value conveyed in the
      PUT request in its configuration data and if the DOTS server has
      accepted the updated configuration parameters, 2.04 (Changed) MUST
      be returned in the response.

   o  If any of the 'heartbeat-interval', 'missing-hb-allowed', 'max-
      retransmit', 'target-protocol', 'ack-timeout', and 'ack-random-
      factor' attribute values are not acceptable to the DOTS server,
      4.22 (Unprocessable Entity) MUST be returned in the response.
      Upon receipt of this error code, the DOTS client SHOULD request
      the maximum and minimum attribute values acceptable to the DOTS
      server (Section 4.5.1).

      The DOTS client may re-try and send the PUT request with updated
      attribute values acceptable to the DOTS server.

   A DOTS client may issue a GET message with 'sid' Uri-Path parameter
   to retrieve the negotiated configuration.  The response does not need
   to include 'sid' in its message body.

4.5.3.  Configuration Freshness and Notifications

   Max-Age Option (Section 5.10.5 of [RFC7252]) SHOULD be returned by a
   DOTS server to associate a validity time with a configuration it
   sends.  This feature allows the update of the configuration data if a
   change occurs at the DOTS server side.  For example, the new
   configuration may instruct a DOTS client to cease heartbeats or
   reduce heartbeat frequency.

   It is NOT RECOMMENDED to return a Max-Age Option set to 0.

   Returning a Max-Age Option set to 2**32-1 is equivalent to
   associating an infinite lifetime with the configuration.

   If a non-zero value of Max-Age Option is received by a DOTS client,
   it MUST issue a GET request with 'sid' Uri-Path parameter to retrieve
   the current and acceptable configuration before the expiry of the
   value enclosed in the Max-Age option.  This request is considered by
   the client and the server as a means to refresh the configuration



Reddy, et al.             Expires March 3, 2019                [Page 48]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   parameters for the signal channel.  When a DDoS attack is active,
   refresh requests MUST NOT be sent by DOTS clients and the DOTS server
   MUST NOT terminate the (D)TLS session after the expiry of the value
   returned in Max-Age Option.

   If Max-Age Option is not returned in a response, the DOTS client
   initiates GET requests to refresh the configuration parameters each
   60 seconds (Section 5.10.5 of [RFC7252]).  To prevent such overload,
   it is RECOMMENDED that DOTS servers return a Max-Age Option in GET
   responses.  Considerations related to which value to use and how such
   value is set, are implementation- and deployment-specific.

   If an Observe Option set to 0 is included in the configuration
   request, the DOTS server sends notifications of any configuration
   change (Section 4.2 of [RFC7641]).

   If a DOTS server detects that a misbehaving DOTS client does not
   contact the DOTS server after the expiry of Max-Age, in order to
   retrieve the signal channel configuration data, it MAY terminate the
   (D)TLS session.  A (D)TLS session is terminated by the receipt of an
   authenticated message that closes the connection (e.g., a fatal alert
   (Section 6 of [RFC8446])).

4.5.4.  Delete DOTS Signal Channel Session Configuration

   A DELETE request is used to delete the installed DOTS signal channel
   session configuration data (Figure 21).

     Header: DELETE (Code=0.04)
     Uri-Path: ".well-known"
     Uri-Path: "dots"
     Uri-Path: "v1.0"
     Uri-Path: "config"
     Uri-Path: "sid=123"

                      Figure 21: Delete Configuration

   The DOTS server resets the DOTS signal channel session configuration
   back to the default values and acknowledges a DOTS client's request
   to remove the DOTS signal channel session configuration using 2.02
   (Deleted) response code.

   Upon bootstrapping or reboot, a DOTS client MAY send a DELETE request
   to set the configuration parameters to default values.  Such a
   request does not include any 'sid'.






Reddy, et al.             Expires March 3, 2019                [Page 49]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


4.6.  Redirected Signaling

   Redirected DOTS signaling is discussed in detail in Section 3.2.2 of
   [I-D.ietf-dots-architecture].

   If a DOTS server wants to redirect a DOTS client to an alternative
   DOTS server for a signal session, then the response code 5.03
   (Service Unavailable) will be returned in the response to the DOTS
   client.

   The DOTS server can return the error response code 5.03 in response
   to a request from the DOTS client or convey the error response code
   5.03 in a unidirectional notification response from the DOTS server.

   The DOTS server in the error response conveys the alternate DOTS
   server's FQDN, and the alternate DOTS server's IP address(es) values
   in the CBOR body (Figure 22).

   {
     "ietf-dots-signal-channel:redirected-signal": {
       "alt-server": "string",
       "alt-server-record": [
          "string"
        ]
   }

             Figure 22: Redirected Server Error Response Body

   The parameters are described below:

   alt-server:  FQDN of an alternate DOTS server.

      This is a mandatory attribute.

   alt-server-record:  A list of IP addresses of an alternate DOTS
      server.

      This is an optional attribute.

   The DOTS server returns the Time to live (TTL) of the alternate DOTS
   server in a Max-Age Option.  That is, the time interval that the
   alternate DOTS server may be cached for use by a DOTS client.  A Max-
   Age Option set to 2**32-1 is equivalent to receiving an infinite TTL.
   This value means that the alternate DOTS server is to be used until
   the alternate DOTS server redirects the traffic with another 5.03
   response which encloses an alternate server.





Reddy, et al.             Expires March 3, 2019                [Page 50]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   A Max-Age Option set to '0' may be returned for redirecting
   mitigation requests.  Such value means that the redirection applies
   only for the mitigation request in progress.  Returning short TTL in
   a Max-Age Option may adversely impact DOTS clients on slow links.
   Returning short values should be avoided under such conditions.

   If the alternate DOTS server TTL has expired, the DOTS client MUST
   use the DOTS server(s), that was provisioned using means discussed in
   Section 4.1.  This fall back mechanism is triggered immediately upon
   expiry of the TTL, except when a DDoS attack is active.

   Requests issued by misbehaving DOTS clients which do not honor the
   TTL conveyed in the Max-Age Option or react to explicit re-direct
   messages can be rejected by DOTS servers.

   Figure 23 shows a 5.03 response example to convey the DOTS alternate
   server 'alt-server.example' together with its IP addresses
   2001:db8:6401::1 and 2001:db8:6401::2.

   {
     "ietf-dots-signal-channel:redirected-signal": {
       "alt-server": "alt-server.example",
       "alt-server-record": [
          "2001:db8:6401::1",
          "2001:db8:6401::2"
        ]
   }

        Figure 23: Example of Redirected Server Error Response Body

   When the DOTS client receives 5.03 response with an alternate server
   included, it considers the current request as failed, but SHOULD try
   re-sending the request to the alternate DOTS server.  During a DDoS
   attack, the DNS server may be the target of another DDoS attack,
   alternate DOTS server's IP addresses conveyed in the 5.03 response
   help the DOTS client skip DNS lookup of the alternate DOTS server.
   The DOTS client can then try to establish a UDP or a TCP session with
   the alternate DOTS server.  The DOTS client MAY implement a method to
   construct IPv4-embedded IPv6 addresses [RFC6052]; this is required to
   handle the scenario where an IPv6-only DOTS client communicates with
   an IPv4-only alternate DOTS server.

   If the DOTS client has been redirected to a DOTS server to which it
   has already communicated with within the last five (5) minutes, it
   MUST ignore the redirection and try to contact other DOTS servers
   listed in the local configuration or discovered using dynamic means
   such as DHCP or SRV procedures.  It is RECOMMENDED that DOTS clients
   support means to alert administrators about redirect loops.



Reddy, et al.             Expires March 3, 2019                [Page 51]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


4.7.  Heartbeat Mechanism

   To provide an indication of signal health and distinguish an 'idle'
   signal channel from a 'disconnected' or 'defunct' session, the DOTS
   agent sends a heartbeat over the signal channel to maintain its half
   of the channel.  The DOTS agent similarly expects a heartbeat from
   its peer DOTS agent, and may consider a session terminated in the
   prolonged absence of a peer agent heartbeat.

   While the communication between the DOTS agents is quiescent, the
   DOTS client will probe the DOTS server to ensure it has maintained
   cryptographic state and vice versa.  Such probes can also keep
   firewalls and/or stateful translators bindings alive.  This probing
   reduces the frequency of establishing a new handshake when a DOTS
   signal needs to be conveyed to the DOTS server.

   DOTS servers MAY trigger their heartbeat requests immediately after
   receiving heartbeat probes from peer DOTS clients.  As a reminder, it
   is the responsibility of DOTS clients to ensure that on-path
   translators/firewalls are maintaining a binding so that the same
   external IP address and/or port number is retained for the DOTS
   session.

   In case of a massive DDoS attack that saturates the incoming link(s)
   to the DOTS client, all traffic from the DOTS server to the DOTS
   client will likely be dropped, although the DOTS server receives
   heartbeat requests in addition to DOTS messages sent by the DOTS
   client.  In this scenario, the DOTS agents MUST behave differently to
   handle message transmission and DOTS session liveliness during link
   saturation:

   o  The DOTS client MUST NOT consider the DOTS session terminated even
      after a maximum 'missing-hb-allowed' threshold is reached.  The
      DOTS client SHOULD keep on using the current DOTS session to send
      heartbeat requests over it, so that the DOTS server knows the DOTS
      client has not disconnected the DOTS session.

      After the maximum 'missing-hb-allowed' threshold is reached, the
      DOTS client SHOULD try to resume the (D)TLS session.  The DOTS
      client SHOULD send mitigation requests over the current DOTS
      session, and in parallel, for example, try to resume the (D)TLS
      session or use 0-RTT mode in DTLS 1.3 to piggyback the mitigation
      request in the ClientHello message.

      As soon as the link is no longer saturated, if traffic from the
      DOTS server reaches the DOTS client over the current DOTS session,
      the DOTS client can stop (D)TLS session resumption or if (D)TLS




Reddy, et al.             Expires March 3, 2019                [Page 52]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


      session resumption is successful then disconnect the current DOTS
      session.

   o  If the DOTS server does not receive any traffic from the peer DOTS
      client, then the DOTS server sends heartbeat requests to the DOTS
      client and after maximum 'missing-hb-allowed' threshold is
      reached, the DOTS server concludes the session is disconnected.

   In DOTS over UDP, heartbeat messages MUST be exchanged between the
   DOTS agents using the "CoAP Ping" mechanism defined in Section 4.2 of
   [RFC7252].  Concretely, the DOTS agent sends an Empty Confirmable
   message and the peer DOTS agent will respond by sending a Reset
   message.

   In DOTS over TCP, heartbeat messages MUST be exchanged between the
   DOTS agents using the Ping and Pong messages specified in Section 4.4
   of [RFC8323].  That is, the DOTS agent sends a Ping message and the
   peer DOTS agent would respond by sending a single Pong message.

5.  DOTS Signal Channel YANG Module

   This document defines a YANG [RFC7950] module for DOTS mitigation
   scope, DOTS signal channel session configuration data, and DOTS
   redirected signalling.

   This YANG module defines the DOTS client interaction with the DOTS
   server as seen by the DOTS client.  A DOTS server is allowed to
   update the non-configurable 'ro' entities in the responses.  This
   YANG module is not intended to be used for DOTS server management
   purposes.  Such module is out of the scope of this document.

5.1.  Tree Structure

   This document defines the YANG module "ietf-dots-signal-channel"
   (Section 5.2), which has the following tree structure.  A DOTS signal
   message can either be a mitigation or a configuration message.

 module: ietf-dots-signal-channel
     +--rw dots-signal
        +--rw (message-type)?
           +--:(mitigation-scope)
           |  +--rw scope* [cuid mid]
           |     +--rw cdid?                   string
           |     +--rw cuid                    string
           |     +--rw mid                     uint32
           |     +--rw target-prefix*          inet:ip-prefix
           |     +--rw target-port-range* [lower-port upper-port]
           |     |  +--rw lower-port      inet:port-number



Reddy, et al.             Expires March 3, 2019                [Page 53]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


           |     |  +--rw upper-port      inet:port-number
           |     +--rw target-protocol*        uint8
           |     +--rw target-fqdn*            inet:domain-name
           |     +--rw target-uri*             inet:uri
           |     +--rw alias-name*             string
           |     +--rw lifetime?               int32
           |     +--rw trigger-mitigation?     boolean
           |     +--ro mitigation-start?       uint64
           |     +--ro status?                 enumeration
           |     +--ro conflict-information
           |     |  +--ro conflict-status?   enumeration
           |     |  +--ro conflict-cause?    enumeration
           |     |  +--ro retry-timer?       uint32
           |     |  +--ro conflict-scope
           |     |     +--ro target-prefix*       inet:ip-prefix
           |     |     +--ro target-port-range* [lower-port upper-port]
           |     |     |  +--ro lower-port      inet:port-number
           |     |     |  +--ro upper-port      inet:port-number
           |     |     +--ro target-protocol*     uint8
           |     |     +--ro target-fqdn*         inet:domain-name
           |     |     +--ro target-uri*          inet:uri
           |     |     +--ro alias-name*          string
           |     |     +--ro acl-list* [acl-name]
           |     |     |  +--ro acl-name    -> /ietf-acl:acls/acl/name
           |     |     |  +--ro acl-type?   -> /ietf-acl:acls/acl/type
           |     |     +--ro mid?                 -> ../../../mid
           |     +--ro bytes-dropped?          yang:zero-based-counter64
           |     +--ro bps-dropped?            yang:zero-based-counter64
           |     +--ro pkts-dropped?           yang:zero-based-counter64
           |     +--ro pps-dropped?            yang:zero-based-counter64
           |     +--rw attack-status?          enumeration
           +--:(signal-config)
           |  +--rw sid                   uint32
           |  +--rw mitigating-config
           |  |  +--rw heartbeat-interval
           |  |  |  +--ro max-value?       uint16
           |  |  |  +--ro min-value?       uint16
           |  |  |  +--rw current-value?   uint16
           |  |  +--rw missing-hb-allowed
           |  |  |  +--ro max-value?       uint16
           |  |  |  +--ro min-value?       uint16
           |  |  |  +--rw current-value?   uint16
           |  |  +--rw max-retransmit
           |  |  |  +--ro max-value?       uint16
           |  |  |  +--ro min-value?       uint16
           |  |  |  +--rw current-value?   uint16
           |  |  +--rw ack-timeout
           |  |  |  +--ro max-value-decimal?       decimal64



Reddy, et al.             Expires March 3, 2019                [Page 54]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


           |  |  |  +--ro min-value-decimal?       decimal64
           |  |  |  +--rw current-value-decimal?   decimal64
           |  |  +--rw ack-random-factor
           |  |     +--ro max-value-decimal?       decimal64
           |  |     +--ro min-value-decimal?       decimal64
           |  |     +--rw current-value-decimal?   decimal64
           |  +--rw idle-config
           |     +--rw heartbeat-interval
           |     |  +--ro max-value?       uint16
           |     |  +--ro min-value?       uint16
           |     |  +--rw current-value?   uint16
           |     +--rw missing-hb-allowed
           |     |  +--ro max-value?       uint16
           |     |  +--ro min-value?       uint16
           |     |  +--rw current-value?   uint16
           |     +--rw max-retransmit
           |     |  +--ro max-value?       uint16
           |     |  +--ro min-value?       uint16
           |     |  +--rw current-value?   uint16
           |     +--rw ack-timeout
           |     |  +--ro max-value-decimal?       decimal64
           |     |  +--ro min-value-decimal?       decimal64
           |     |  +--rw current-value-decimal?   decimal64
           |     +--rw ack-random-factor
           |        +--ro max-value-decimal?       decimal64
           |        +--ro min-value-decimal?       decimal64
           |        +--rw current-value-decimal?   decimal64
           +--:(redirected-signal)
              +--ro alt-server            string
              +--ro alt-server-record*    inet:ip-address

5.2.  YANG Module

   <CODE BEGINS> file "ietf-dots-signal-channel@2018-08-16.yang"

   module ietf-dots-signal-channel {
     yang-version 1.1;
     namespace "urn:ietf:params:xml:ns:yang:ietf-dots-signal-channel";
     prefix signal;

     import ietf-inet-types {
       prefix inet;
     }
     import ietf-yang-types {
       prefix yang;
     }
     import ietf-access-control-list {
       prefix ietf-acl;



Reddy, et al.             Expires March 3, 2019                [Page 55]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


     }

     organization
       "IETF DDoS Open Threat Signaling (DOTS) Working Group";
     contact
       "WG Web:   <https://datatracker.ietf.org/wg/dots/>
        WG List:  <mailto:dots@ietf.org>

        Editor:  Konda, Tirumaleswar Reddy
                 <mailto:TirumaleswarReddy_Konda@McAfee.com>

        Editor:  Mohamed Boucadair
                 <mailto:mohamed.boucadair@orange.com>

        Author:  Prashanth Patil
                 <mailto:praspati@cisco.com>

        Author:  Andrew Mortensen
                 <mailto:amortensen@arbor.net>

        Author:  Nik Teague
                 <mailto:nteague@verisign.com>";
     description
       "This module contains YANG definition for the signaling
        messages exchanged between a DOTS client and a DOTS server.

        Copyright (c) 2018 IETF Trust and the persons identified as
        authors of the code.  All rights reserved.

        Redistribution and use in source and binary forms, with or
        without modification, is permitted pursuant to, and subject
        to the license terms contained in, the Simplified BSD License
        set forth in Section 4.c of the IETF Trust's Legal Provisions
        Relating to IETF Documents
        (http://trustee.ietf.org/license-info).

        This version of this YANG module is part of RFC XXXX; see
        the RFC itself for full legal notices.";

     revision 2018-08-16 {
       description
         "Initial revision.";
       reference
         "RFC XXXX: Distributed Denial-of-Service Open Threat
                    Signaling (DOTS) Signal Channel Specification";
     }

    /*



Reddy, et al.             Expires March 3, 2019                [Page 56]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


     * Groupings
     */

     grouping target {
       description
         "Specifies the targets of the mitigation request.";
       leaf-list target-prefix {
         type inet:ip-prefix;
         description
           "IPv4 or IPv6 prefix identifying the target.";
       }
       list target-port-range {
         key "lower-port upper-port";
         description
           "Port range. When only lower-port is
            present, it represents a single port number.";
         leaf lower-port {
           type inet:port-number;
           mandatory true;
           description
             "Lower port number of the port range.";
         }
         leaf upper-port {
           type inet:port-number;
           must ". >= ../lower-port" {
             error-message
               "The upper port number must be greater than
                or equal to lower port number.";
           }
           description
             "Upper port number of the port range.";
         }
       }
       leaf-list target-protocol {
         type uint8;
         description
           "Identifies the target protocol number.

            The value '0' means 'all protocols'.

            Values are taken from the IANA protocol registry:
            https://www.iana.org/assignments/protocol-numbers/
            protocol-numbers.xhtml

            For example, 6 for TCP or 17 for UDP.";
       }
       leaf-list target-fqdn {
         type inet:domain-name;



Reddy, et al.             Expires March 3, 2019                [Page 57]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


         description
           "FQDN identifying the target.";
       }
       leaf-list target-uri {
         type inet:uri;
         description
           "URI identifying the target.";
       }
     }

     grouping mitigation-scope {
       description
         "Specifies the scope of the mitigation request.";
       list scope {
         key "cuid mid";
         description
           "The scope of the request.";
         leaf cdid {
           type string;
           description
             "The cdid should be included by a server-domain
              DOTS gateway to propagate the client domain
              identification information from the
              gateway's client-facing-side to the gateway's
              server-facing-side, and from the gateway's
              server-facing-side to the DOTS server.

              It may be used by the final DOTS server
              for policy enforcement purposes.";
         }
         leaf cuid {
           type string;
           description
             "A unique identifier that is randomly
              generated by a DOTS client to prevent
              request collisions.  It is expected that the
              cuid will remain consistent throughout the
              lifetime of the DOTS client.";
         }
         leaf mid {
           type uint32;
           description
             "Mitigation request identifier.

              This identifier must be unique for each mitigation
              request bound to the DOTS client.";
         }
         uses target;



Reddy, et al.             Expires March 3, 2019                [Page 58]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


         leaf-list alias-name {
           type string;
           description
             "An alias name that points to a resource.";
         }
         leaf lifetime {
           type int32;
           units "seconds";
           default "3600";
           description
             "Indicates the lifetime of the mitigation request.

              A lifetime of '0' in a mitigation request is an
              invalid value.

              A lifetime of negative one (-1) indicates indefinite
              lifetime for the mitigation request.";
         }
         leaf trigger-mitigation {
           type boolean;
           default "true";
           description
             "If set to 'false', DDoS mitigation will not be
              triggered unless the DOTS signal channel
              session is lost.";
         }
         leaf mitigation-start {
           type uint64;
           config false;
           description
             "Mitigation start time is represented in seconds
              relative to 1970-01-01T00:00:00Z in UTC time.";
         }
         leaf status {
           type enumeration {
             enum "attack-mitigation-in-progress" {
               value 1;
               description
                 "Attack mitigation setup is in progress (e.g., changing
                  the network path to re-route the inbound traffic
                  to DOTS mitigator).";
             }
             enum "attack-successfully-mitigated" {
               value 2;
               description
                 "Attack is being successfully mitigated (e.g., traffic
                  is redirected to a DDoS mitigator and attack
                  traffic is dropped or blackholed).";



Reddy, et al.             Expires March 3, 2019                [Page 59]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


             }
             enum "attack-stopped" {
               value 3;
               description
                 "Attack has stopped and the DOTS client can
                  withdraw the mitigation request.";
             }
             enum "attack-exceeded-capability" {
               value 4;
               description
                 "Attack has exceeded the mitigation provider
                  capability.";
             }
             enum "dots-client-withdrawn-mitigation" {
               value 5;
               description
                 "DOTS client has withdrawn the mitigation
                  request and the mitigation is active but
                  terminating.";
             }
             enum "attack-mitigation-terminated" {
               value 6;
               description
                 "Attack mitigation is now terminated.";
             }
             enum "attack-mitigation-withdrawn" {
               value 7;
               description
                 "Attack mitigation is withdrawn.";
             }
             enum "attack-mitigation-signal-loss" {
               value 8;
               description
                 "Attack mitigation will be triggered
                  for the mitigation request only when
                  the DOTS signal channel session is lost.";
             }
           }
           config false;
           description
             "Indicates the status of a mitigation request.
              It must be included in responses only.";
         }
         container conflict-information {
           config false;
           description
             "Indicates that a conflict is detected.
              Must only be used for responses.";



Reddy, et al.             Expires March 3, 2019                [Page 60]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


           leaf conflict-status {
             type enumeration {
               enum "request-inactive-other-active" {
                 value 1;
                 description
                   "DOTS Server has detected conflicting mitigation
                    requests from different DOTS clients.
                    This mitigation request is currently inactive
                    until the conflicts are resolved. Another
                    mitigation request is active.";
               }
               enum "request-active" {
                 value 2;
                 description
                   "DOTS Server has detected conflicting mitigation
                    requests from different DOTS clients.
                    This mitigation request is currently active.";
               }
               enum "all-requests-inactive" {
                 value 3;
                 description
                   "DOTS Server has detected conflicting mitigation
                    requests from different DOTS clients.  All
                    conflicting mitigation requests are inactive.";
               }
             }
             description
               "Indicates the conflict status.";
           }
           leaf conflict-cause {
             type enumeration {
               enum "overlapping-targets" {
                 value 1;
                 description
                   "Overlapping targets. conflict-scope provides
                    more details about the exact conflict.";
               }
               enum "conflict-with-whitelist" {
                 value 2;
                 description
                   "Conflicts with an existing white list.

                    This code is returned when the DDoS mitigation
                    detects that some of the source addresses/prefixes
                    listed in the white list ACLs are actually
                    attacking the target.";
               }
               enum "cuid-collision" {



Reddy, et al.             Expires March 3, 2019                [Page 61]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


                 value 3;
                 description
                   "Conflicts with the cuid used by another
                    DOTS client.";
               }
             }
             description
               "Indicates the cause of the conflict.";
           }
           leaf retry-timer {
             type uint32;
             units "seconds";
             description
               "The DOTS client must not re-send the
                same request that has a conflict before the expiry of
                this timer.";
           }
           container conflict-scope {
             description
               "Provides more information about the conflict scope.";
             uses target {
               when "../conflict-cause = 'overlapping-targets'";
             }
             leaf-list alias-name {
               when "../../conflict-cause = 'overlapping-targets'";
               type string;
               description
                 "Conflicting alias-name.";
             }
             list acl-list {
               when "../../conflict-cause = 'conflict-with-whitelist'";
               key "acl-name";
               description
                 "List of conflicting ACLs as defined in the DOTS data
                  channel.  These ACLs are uniquely defined by
                  cuid and acl-name.";
               leaf acl-name {
                 type leafref {
                   path "/ietf-acl:acls/ietf-acl:acl/" +
                        "ietf-acl:name";
                 }
                 description
                   "Reference to the conflicting ACL name bound to
                    a DOTS client.";
               }
               leaf acl-type {
                 type leafref {
                   path "/ietf-acl:acls/ietf-acl:acl/" +



Reddy, et al.             Expires March 3, 2019                [Page 62]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


                        "ietf-acl:type";
                 }
                 description
                   "Reference to the conflicting ACL type bound to
                    a DOTS client.";
               }
             }
             leaf mid {
               when "../../conflict-cause = 'overlapping-targets'";
               type leafref {
                 path "../../../mid";
               }
               description
                 "Reference to the conflicting 'mid' bound to
                  the same DOTS client.";
             }
           }
         }
         leaf bytes-dropped {
           type yang:zero-based-counter64;
           units "bytes";
           config false;
           description
             "The total dropped byte count for the mitigation
              request since the attack mitigation is triggered.
              The count wraps around when it reaches the maximum value
              of counter64 for dropped bytes.";
         }
         leaf bps-dropped {
           type yang:zero-based-counter64;
           config false;
           description
             "The average number of dropped bits per second for
              the mitigation request since the attack
              mitigation is triggered.  This should be a
              five-minute average.";
         }
         leaf pkts-dropped {
           type yang:zero-based-counter64;
           config false;
           description
             "The total number of dropped packet count for the
              mitigation request since the attack mitigation is
              triggered.  The count wraps around when it reaches
              the maximum value of counter64 for dropped packets.";
         }
         leaf pps-dropped {
           type yang:zero-based-counter64;



Reddy, et al.             Expires March 3, 2019                [Page 63]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


           config false;
           description
             "The average number of dropped packets per second
              for the mitigation request since the attack
              mitigation is triggered.  This should be a
              five-minute average.";
         }
         leaf attack-status {
           type enumeration {
             enum "under-attack" {
               value 1;
               description
                 "The DOTS client determines that it is still under
                  attack.";
             }
             enum "attack-successfully-mitigated" {
               value 2;
               description
                 "The DOTS client determines that the attack is
                  successfully mitigated.";
             }
           }
           description
             "Indicates the status of an attack as seen by the
              DOTS client.";
         }
       }
     }

     grouping config-parameters {
       description
         "Subset of DOTS signal channel session configuration.";
       container heartbeat-interval {
         description
           "DOTS agents regularly send heartbeats to each other
            after mutual authentication is successfully
            completed in order to keep the DOTS signal channel
            open.";
         leaf max-value {
           type uint16;
           units "seconds";
           config false;
           description
             "Maximum acceptable heartbeat-interval value.";
         }
         leaf min-value {
           type uint16;
           units "seconds";



Reddy, et al.             Expires March 3, 2019                [Page 64]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


           config false;
           description
             "Minimum acceptable heartbeat-interval value.";
         }
         leaf current-value {
           type uint16;
           units "seconds";
           default "30";
           description
             "Current heartbeat-interval value.

              '0' means that heartbeat mechanism is deactivated.";
         }
       }
       container missing-hb-allowed {
         description
           "Maximum number of missing heartbeats allowed.";
         leaf max-value {
           type uint16;
           config false;
           description
             "Maximum acceptable missing-hb-allowed value.";
         }
         leaf min-value {
           type uint16;
           config false;
           description
             "Minimum acceptable missing-hb-allowed value.";
         }
         leaf current-value {
           type uint16;
           default "5";
           description
             "Current missing-hb-allowed value.";
         }
       }
       container max-retransmit {
         description
           "Maximum number of retransmissions of a Confirmable
            message.";
         leaf max-value {
           type uint16;
           config false;
           description
             "Maximum acceptable max-retransmit value.";
         }
         leaf min-value {
           type uint16;



Reddy, et al.             Expires March 3, 2019                [Page 65]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


           config false;
           description
             "Minimum acceptable max-retransmit value.";
         }
         leaf current-value {
           type uint16;
           default "3";
           description
             "Current max-retransmit value.";
         }
       }
       container ack-timeout {
         description
           "Initial retransmission timeout value.";
         leaf max-value-decimal {
           type decimal64 {
             fraction-digits 2;
           }
           units "seconds";
           config false;
           description
             "Maximum ack-timeout value.";
         }
         leaf min-value-decimal {
           type decimal64 {
             fraction-digits 2;
           }
           units "seconds";
           config false;
           description
             "Minimum ack-timeout value.";
         }
         leaf current-value-decimal {
           type decimal64 {
             fraction-digits 2;
           }
           units "seconds";
           default "2";
           description
             "Current ack-timeout value.";
         }
       }
       container ack-random-factor {
         description
           "Random factor used to influence the timing of
            retransmissions.";
         leaf max-value-decimal {
           type decimal64 {



Reddy, et al.             Expires March 3, 2019                [Page 66]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


             fraction-digits 2;
           }
           config false;
           description
             "Maximum acceptable ack-random-factor value.";
         }
         leaf min-value-decimal {
           type decimal64 {
             fraction-digits 2;
           }
           config false;
           description
             "Minimum acceptable ack-random-factor value.";
         }
         leaf current-value-decimal {
           type decimal64 {
             fraction-digits 2;
           }
           default "1.5";
           description
             "Current ack-random-factor value.";
         }
       }
     }

     grouping signal-config {
       description
         "DOTS signal channel session configuration.";
       leaf sid {
         type uint32;
         mandatory true;
         description
           "An identifier for the DOTS signal channel
            session configuration data.";
       }
       container mitigating-config {
         description
           "Configuration parameters to use when a mitigation
            is active.";
         uses config-parameters;
       }
       container idle-config {
         description
           "Configuration parameters to use when no mitigation
            is active.";
         uses config-parameters;
       }
     }



Reddy, et al.             Expires March 3, 2019                [Page 67]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


     grouping redirected-signal {
       description
         "Grouping for the redirected signaling.";
       leaf alt-server {
         type string;
         config false;
         mandatory true;
         description
           "FQDN of an alternate server.";
       }
       leaf-list alt-server-record {
         type inet:ip-address;
         config false;
         description
           "List of records for the alternate server.";
       }
     }

    /*
     * Main Container for DOTS Signal Channel
     */

     container dots-signal {
       description
         "Main container for DOTS signal message.

          A DOTS signal message can be a mitigation, a configuration,
          or a redirected signal message.";
       choice message-type {
         description
           "Can be a mitigation, a configuration, or a redirect
            message.";
         case mitigation-scope {
           description
             "Mitigation scope of a mitigation message.";
           uses mitigation-scope;
         }
         case signal-config {
           description
             "Configuration message.";
           uses signal-config;
         }
         case redirected-signal {
           description
             "Redirected signaling.";
           uses redirected-signal;
         }
       }



Reddy, et al.             Expires March 3, 2019                [Page 68]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


     }
   }
   <CODE ENDS>

6.  Mapping Parameters to CBOR

   All parameters in the payload of the DOTS signal channel MUST be
   mapped to CBOR types as shown in Table 4 and are assigned an integer
   key to save space.  The CBOR key values are divided into two types:
   comprehension-required and comprehension-optional.  DOTS agents can
   safely ignore comprehension-optional values they don't understand,
   but cannot successfully process a request if it contains
   comprehension-required values that are not understood.  The 4.00
   response SHOULD include a diagnostic payload describing the unknown
   comprehension-required CBOR key values.  The initial set of CBOR key
   values defined in this specification are of type comprehension-
   required.

   +----------------------+-------------+-----+---------------+--------+
   | Parameter Name       | YANG        | CBOR| CBOR Major    | JSON   |
   |                      | Type        | Key |    Type &     | Type   |
   |                      |             |     | Information   |        |
   +----------------------+-------------+-----+---------------+--------+
   | ietf-dots-signal-cha |             |     |               |        |
   | nnel:mitigation-scope| container   |   1 | 5 map         | Object |
   | scope                | list        |   2 | 4 array       | Array  |
   | cdid                 | string      |   3 | 3 text string | String |
   | cuid                 | string      |   4 | 3 text string | String |
   | mid                  | uint32      |   5 | 0 unsigned    | Number |
   | target-prefix        | leaf-list   |   6 | 4 array       | Array  |
   |                      | inet:       |     |               |        |
   |                      |  ip-prefix  |     | 3 text string | String |
   | target-port-range    | list        |   7 | 4 array       | Array  |
   | lower-port           | inet:       |     |               |        |
   |                      |  port-number|   8 | 0 unsigned    | Number |
   | upper-port           | inet:       |     |               |        |
   |                      |  port-number|   9 | 0 unsigned    | Number |
   | target-protocol      | leaf-list   |  10 | 4 array       | Array  |
   |                      | uint8       |     | 0 unsigned    | Number |
   | target-fqdn          | leaf-list   |  11 | 4 array       | Array  |
   |                      | inet:       |     |               |        |
   |                      |  domain-name|     | 3 text string | String |
   | target-uri           | leaf-list   |  12 | 4 array       | Array  |
   |                      | inet:uri    |     | 3 text string | String |
   | alias-name           | leaf-list   |  13 | 4 array       | Array  |
   |                      | string      |     | 3 text string | String |
   | lifetime             | int32       |  14 | 0 unsigned    | Number |
   |                      |             |     | 1 negative    | Number |



Reddy, et al.             Expires March 3, 2019                [Page 69]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   | mitigation-start     | uint64      |  15 | 0 unsigned    | String |
   | status               | enumeration |  16 | 0 unsigned    | String |
   | conflict-information | container   |  17 | 5 map         | Object |
   | conflict-status      | enumeration |  18 | 0 unsigned    | String |
   | conflict-cause       | enumeration |  19 | 0 unsigned    | String |
   | retry-timer          | uint32      |  20 | 0 unsigned    | Number |
   | conflict-scope       | container   |  21 | 5 map         | Object |
   | acl-list             | list        |  22 | 4 array       | Array  |
   | acl-name             | leafref     |  23 | 3 text string | String |
   | acl-type             | leafref     |  24 | 3 text string | String |
   | bytes-dropped        | yang:zero-  |     |               |        |
   |                      |  based-     |     |               |        |
   |                      |  counter64  |  25 | 0 unsigned    | String |
   | bps-dropped          | yang:zero-  |     |               |        |
   |                      |  based-     |     |               |        |
   |                      |  counter64  |  26 | 0 unsigned    | String |
   | pkts-dropped         | yang:zero-  |     |               |        |
   |                      |  based-     |     |               |        |
   |                      |  counter64  |  27 | 0 unsigned    | String |
   | pps-dropped          | yang:zero-  |     |               |        |
   |                      |  based-     |     |               |        |
   |                      |  counter64  |  28 | 0 unsigned    | String |
   | attack-status        | enumeration |  29 | 0 unsigned    | String |
   | ietf-dots-signal-    |             |     |               |        |
   | channel:signal-config| container   |  30 | 5 map         | Object |
   | sid                  | uint32      |  31 | 0 unsigned    | Number |
   | mitigating-config    | container   |  32 | 5 map         | Object |
   | heartbeat-interval   | container   |  33 | 5 map         | Object |
   | max-value            | uint16      |  34 | 0 unsigned    | Number |
   | min-value            | uint16      |  35 | 0 unsigned    | Number |
   | current-value        | uint16      |  36 | 0 unsigned    | Number |
   | missing-hb-allowed   | container   |  37 | 5 map         | Object |
   | max-retransmit       | container   |  38 | 5 map         | Object |
   | ack-timeout          | container   |  39 | 5 map         | Object |
   | ack-random-factor    | container   |  40 | 5 map         | Object |
   | max-value-decimal    | decimal64   |  41 | 6 tag 4       |        |
   |                      |             |     |  [-2, integer]| String |
   | min-value-decimal    | decimal64   |  42 | 6 tag 4       |        |
   |                      |             |     |  [-2, integer]| String |
   | current-value-decimal| decimal64   |  43 | 6 tag 4       |        |
   |                      |             |     |  [-2, integer]| String |
   | idle-config          | container   |  44 | 5 map         | Object |
   | trigger-mitigation   | boolean     |  45 | 7 bits 20     | False  |
   |                      |             |     | 7 bits 21     | True   |
   | ietf-dots-signal-cha |             |     |               |        |
   |nnel:redirected-signal| container   |  46 | 5 map         | Object |
   | alt-server           | string      |  47 | 3 text string | String |
   | alt-server-record    | leaf-list   |  48 | 4 array       | Array  |



Reddy, et al.             Expires March 3, 2019                [Page 70]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   |                      | inet:       |     |               |        |
   |                      |  ip-address |     | 3 text string | String |
   +----------------------+-------------+-----+---------------+--------+

    Table 4: CBOR Mappings Used in DOTS Signal Channel Messages

7.  (D)TLS Protocol Profile and Performance Considerations

7.1.  (D)TLS Protocol Profile

   This section defines the (D)TLS protocol profile of DOTS signal
   channel over (D)TLS and DOTS data channel over TLS.

   There are known attacks on (D)TLS, such as man-in-the-middle and
   protocol downgrade attacks.  These are general attacks on (D)TLS and,
   as such, they are not specific to DOTS over (D)TLS; refer to the
   (D)TLS RFCs for discussion of these security issues.  DOTS agents
   MUST adhere to the (D)TLS implementation recommendations and security
   considerations of [RFC7525] except with respect to (D)TLS version.
   Since DOTS signal channel encryption relies upon (D)TLS is virtually
   a green-field deployment, DOTS agents MUST implement only (D)TLS 1.2
   or later.

   When a DOTS client is configured with a domain name of the DOTS
   server, and connects to its configured DOTS server, the server may
   present it with a PKIX certificate.  In order to ensure proper
   authentication, a DOTS client MUST verify the entire certification
   path per [RFC5280].  The DOTS client additionally uses [RFC6125]
   validation techniques to compare the domain name with the certificate
   provided.

   A key challenge to deploying DOTS is the provisioning of DOTS
   clients, including the distribution of keying material to DOTS
   clients to enable the required mutual authentication of DOTS agents.
   EST defines a method of certificate enrollment by which domains
   operating DOTS servers may provide DOTS clients with all the
   necessary cryptographic keying material, including a private key and
   a certificate to authenticate themselves.  One deployment option is
   DOTS clients behave as EST clients for certificate enrollment from an
   EST server provisioned by the mitigation provider.  This document
   does not specify which EST mechanism the DOTS client uses to achieve
   initial enrollment.

   The Server Name Indication (SNI) extension [RFC6066] defines a
   mechanism for a client to tell a (D)TLS server the name of the server
   it wants to contact.  This is a useful extension for hosting
   environments where multiple virtual servers are reachable over a
   single IP address.  The DOTS client may or may not know if it is



Reddy, et al.             Expires March 3, 2019                [Page 71]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   interacting with a DOTS server in a virtual server hosting
   environment, so the DOTS client SHOULD include the DOTS server FQDN
   in the SNI extension.

   Implementations compliant with this profile MUST implement all of the
   following items:

   o  DTLS record replay detection (Section 3.3 of [RFC6347]) to protect
      against replay attacks.

   o  DTLS session resumption without server-side state to resume
      session and convey the DOTS signal.

   o  Raw public keys [RFC7250] or PSK handshake [RFC4279] with (EC)DHE
      key exchange which reduces the size of the ServerHello, and can be
      used by DOTS agents that cannot obtain certificates.

   Implementations compliant with this profile SHOULD implement all of
   the following items to reduce the delay required to deliver a DOTS
   signal channel message:

   o  TLS False Start [RFC7918] which reduces round-trips by allowing
      the TLS second flight of messages (ChangeCipherSpec) to also
      contain the DOTS signal.

   o  Cached Information Extension [RFC7924] which avoids transmitting
      the server's certificate and certificate chain if the client has
      cached that information from a previous TLS handshake.

   o  TCP Fast Open [RFC7413] can reduce the number of round-trips to
      convey DOTS signal channel message.

7.2.  (D)TLS 1.3 Considerations

   TLS 1.3 provides critical latency improvements for connection
   establishment over TLS 1.2.  The DTLS 1.3 protocol
   [I-D.ietf-tls-dtls13] is based upon the TLS 1.3 protocol and provides
   equivalent security guarantees.  (D)TLS 1.3 provides two basic
   handshake modes the DOTS signal channel can take advantage of:

   o  A full handshake mode in which a DOTS client can send a DOTS
      mitigation request message after one round trip and the DOTS
      server immediately responds with a DOTS mitigation response.  This
      assumes no packet loss is experienced.

   o  0-RTT mode in which the DOTS client can authenticate itself and
      send DOTS mitigation request messages in the first message, thus
      reducing handshake latency. 0-RTT only works if the DOTS client



Reddy, et al.             Expires March 3, 2019                [Page 72]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


      has previously communicated with that DOTS server, which is very
      likely with the DOTS signal channel.

      The DOTS client has to establish a (D)TLS session with the DOTS
      server during peacetime and share a PSK.

      During a DDoS attack, the DOTS client can use the (D)TLS session
      to convey the DOTS mitigation request message and, if there is no
      response from the server after multiple retries, the DOTS client
      can resume the (D)TLS session in 0-RTT mode using PSK.

      Section 8 of [RFC8446] discusses some mechanisms to implement to
      limit the impact of replay attacks on 0-RTT data.  If the DOTS
      server accepts 0-RTT, it MUST implement one of these mechanisms.
      A DOTS server can reject 0-RTT by sending a TLS HelloRetryRequest.

      A simplified TLS 1.3 handshake with 0-RTT DOTS mitigation request
      message exchange is shown in Figure 24.

          DOTS Client                                    DOTS Server

         ClientHello
         (Finished)
         (0-RTT DOTS signal message)
         (end_of_early_data)        -------->
                                                        ServerHello
                                               {EncryptedExtensions}
                                               {ServerConfiguration}
                                                       {Certificate}
                                                 {CertificateVerify}
                                                          {Finished}
                                   <--------   [DOTS signal message]
         {Finished}                -------->

         [DOTS signal message]     <------->   [DOTS signal message]

                  Figure 24: TLS 1.3 Handshake with 0-RTT

7.3.  MTU and Fragmentation

   To avoid DOTS signal message fragmentation and the subsequent
   decreased probability of message delivery, DOTS agents MUST ensure
   that the DTLS record MUST fit within a single datagram.  If the path
   MTU is not known to the DOTS server, an IP MTU of 1280 bytes SHOULD
   be assumed.  If UDP is used to convey the DOTS signal messages then
   the DOTS client must consider the amount of record expansion expected
   by the DTLS processing when calculating the size of CoAP message that
   fits within the path MTU.  Path MTU MUST be greater than or equal to



Reddy, et al.             Expires March 3, 2019                [Page 73]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   [CoAP message size + DTLS overhead of 13 octets + authentication
   overhead of the negotiated DTLS cipher suite + block padding]
   (Section 4.1.1.1 of [RFC6347]).  If the request size exceeds the path
   MTU then the DOTS client MUST split the DOTS signal into separate
   messages, for example the list of addresses in the 'target-prefix'
   parameter could be split into multiple lists and each list conveyed
   in a new PUT request.

   Implementation Note: DOTS choice of message size parameters works
   well with IPv6 and with most of today's IPv4 paths.  However, with
   IPv4, it is harder to safely make sure that there is no IP
   fragmentation.  If IPv4 path MTU is unknown, implementations may want
   to limit themselves to more conservative IPv4 datagram sizes such as
   576 bytes, as per [RFC0791].  IP packets whose size does not exceed
   576 bytes should never need to be fragmented: therefore, sending a
   maximum of 500 bytes of DOTS signal over a UDP datagram will
   generally avoid IP fragmentation.

8.  Mutual Authentication of DOTS Agents & Authorization of DOTS Clients

   (D)TLS based upon client certificate can be used for mutual
   authentication between DOTS agents.  If a DOTS gateway is involved,
   DOTS clients and DOTS gateways MUST perform mutual authentication;
   only authorized DOTS clients are allowed to send DOTS signals to a
   DOTS gateway.  The DOTS gateway and the DOTS server MUST perform
   mutual authentication; a DOTS server only allows DOTS signal channel
   messages from an authorized DOTS gateway, thereby creating a two-link
   chain of transitive authentication between the DOTS client and the
   DOTS server.

   The DOTS server SHOULD support certificate-based client
   authentication.  The DOTS client SHOULD respond to the DOTS server's
   TLS certificate request message with the PKIX certificate held by the
   DOTS client.  DOTS client certificate validation MUST be performed as
   per [RFC5280] and the DOTS client certificate MUST conform to the
   [RFC5280] certificate profile.  If a DOTS client does not support TLS
   client certificate authentication, it MUST support pre-shared key
   based or raw public key based client authentication.













Reddy, et al.             Expires March 3, 2019                [Page 74]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


 +-----------------------------------------------+
 |       example.com domain         +---------+  |
 |                                  | AAA     |  |
 | +---------------+                | Server  |  |
 | | Application   |                +------+--+  |
 | | server        +<-----------------+    ^     |
 | | (DOTS client) |                  |    |     |
 | +---------------+                  |    |     |
 |                                    V    V     |    example.net domain
 |                              +-----+----+--+  |     +---------------+
 | +--------------+             |             |  |     |               |
 | |   Guest      +<-----x----->+    DOTS     +<------>+    DOTS       |
 | | (DOTS client)|             |    gateway  |  |     |    server     |
 | +--------------+             |             |  |     |               |
 |                              +----+--------+  |     +---------------+
 |                                   ^           |
 |                                   |           |
 | +----------------+                |           |
 | | DDoS detector  |                |           |
 | | (DOTS client)  +<---------------+           |
 | +----------------+                            |
 +-----------------------------------------------+

   Figure 25: Example of Authentication and Authorization of DOTS Agents

   In the example depicted in Figure 25, the DOTS gateway and DOTS
   clients within the 'example.com' domain mutually authenticate.  After
   the DOTS gateway validates the identity of a DOTS client, it
   communicates with the AAA server in the 'example.com' domain to
   determine if the DOTS client is authorized to request DDoS
   mitigation.  If the DOTS client is not authorized, a 4.01
   (Unauthorized) is returned in the response to the DOTS client.  In
   this example, the DOTS gateway only allows the application server and
   DDoS attack detector to request DDoS mitigation, but does not permit
   the user of type 'guest' to request DDoS mitigation.

   Also, DOTS gateways and servers located in different domains MUST
   perform mutual authentication (e.g., using certificates).  A DOTS
   server will only allow a DOTS gateway with a certificate for a
   particular domain to request mitigation for that domain.  In
   reference to Figure 25, the DOTS server only allows the DOTS gateway
   to request mitigation for 'example.com' domain and not for other
   domains.








Reddy, et al.             Expires March 3, 2019                [Page 75]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


9.  IANA Considerations

   This specification registers a service port (Section 9.1), a URI
   suffix in the Well-Known URIs registry (Section 9.2), and a YANG
   module (Section 9.4).  It also creates a registry for mappings to
   CBOR (Section 9.3).

9.1.  DOTS Signal Channel UDP and TCP Port Number

   IANA is requested to assign the port number TBD to the DOTS signal
   channel protocol for both UDP and TCP from the "Service Name and
   Transport Protocol Port Number Registry" available at
   https://www.iana.org/assignments/service-names-port-numbers/service-
   names-port-numbers.xhtml.

   The assignment of port number 4646 is strongly suggested, as 4646 is
   the ASCII decimal value for ".." (DOTS).

9.2.  Well-Known 'dots' URI

   This document requests IANA to register the 'dots' well-known URI
   (Table 5) in the Well-Known URIs registry
   (https://www.iana.org/assignments/well-known-uris/well-known-
   uris.xhtml) as defined by [RFC5785]:

   +----------+----------------+---------------------+-----------------+
   | URI      | Change         | Specification       | Related         |
   | suffix   | controller     | document(s)         | information     |
   +----------+----------------+---------------------+-----------------+
   | dots     | IETF           | [RFCXXXX]           | None            |
   +----------+----------------+---------------------+-----------------+

                        Table 5: 'dots' well-known URI

9.3.  DOTS Signal Channel CBOR Mappings Registry

   The DOTS signal channel protocol is extensible to support new
   parameters and instructions for doing it are discussed below:

   The document requests IANA to create a new registry, entitled "DOTS
   Signal Channel CBOR Mappings Registry".  The structure of this
   registry is provided in Section 9.3.1.  Registration requests are
   evaluated using the criteria described in the Claim Key instructions
   in the registration template below after a three-week review period
   on the dots-signal-reg-review@ietf.org mailing list, on the advice of
   one or more Designated Experts [RFC8126].  However, to allow for the
   allocation of values prior to publication, the Designated Experts may
   approve registration once they are satisfied that such a



Reddy, et al.             Expires March 3, 2019                [Page 76]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   specification will be published. [[ Note to the RFC Editor: The name
   of the mailing list should be determined in consultation with the
   IESG and IANA.  Suggested name: dots-signal-reg-review@ietf.org. ]]

   Registration requests sent to the mailing list for review should use
   an appropriate subject (e.g., "Request to register claim: example").
   Registration requests that are undetermined for a period longer than
   21 days can be brought to the IESG's attention (using the
   iesg@ietf.org mailing list) for resolution.

   Criteria that should be applied by the Designated Experts includes
   determining whether the proposed registration duplicates existing
   functionality, whether it is likely to be of general applicability or
   whether it is useful only for a single application, and whether the
   registration description is clear.

   IANA must only accept registry updates from the Designated Experts
   and should direct all requests for registration to the review mailing
   list.

   It is suggested that multiple Designated Experts be appointed who are
   able to represent the perspectives of different applications using
   this specification in order to enable broadly informed review of
   registration decisions.  In cases where a registration decision could
   be perceived as creating a conflict of interest for a particular
   Expert, that Expert should defer to the judgment of the other
   Experts.

   The registry is initially populated with the values in Table 6.

9.3.1.  Registration Template

   Parameter name:
      Parameter name (or Claim Name) as used in the DOTS signal channel.

   CBOR Key Value:
      Key value for the parameter.  The key value MUST be an integer in
      the 1-65535 range.  The key values of the comprehension-required
      range (0x0001 - 0x3FFF) and of the comprehension-optional range
      (0x8000 - 0xBFFF) are assigned by IETF Review [RFC8126].  The key
      values of the comprehension-optional range (0x4000 - 0x7FFF) are
      assigned by Designated Expert [RFC8126] and of the comprehension-
      optional range (0xC000 - 0xFFFF) are reserved for Private Use
      [RFC8126].

   CBOR Major Type:
      CBOR Major type and optional tag for the claim.




Reddy, et al.             Expires March 3, 2019                [Page 77]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   Change Controller:
      For Standards Track RFCs, list the "IESG".  For others, give the
      name of the responsible party.  Other details (e.g., postal
      address, email address, home page URI) may also be included.

   Specification Document(s):
      Reference to the document or documents that specify the parameter,
      preferably including URIs that can be used to retrieve copies of
      the documents.  An indication of the relevant sections may also be
      included but is not required.

9.3.2.  Initial Registry Content

   +----------------------+-------+-------+------------+---------------+
   | Parameter Name       | CBOR  | CBOR  | Change     | Specification |
   |                      | Key   | Major | Controller | Document(s)   |
   |                      | Value | Type  |            |               |
   +----------------------+-------+-------+------------+---------------+
   | ietf-dots-signal-chan|    1  |   5   |    IESG    |   [RFCXXXX]   |
   | nel:mitigation-scope |       |       |            |               |
   | scope                |    2  |   4   |    IESG    |   [RFCXXXX]   |
   | cdid                 |    3  |   3   |    IESG    |   [RFCXXXX]   |
   | cuid                 |    4  |   3   |    IESG    |   [RFCXXXX]   |
   | mid                  |    5  |   0   |    IESG    |   [RFCXXXX]   |
   | target-prefix        |    6  |   4   |    IESG    |   [RFCXXXX]   |
   | target-port-range    |    7  |   4   |    IESG    |   [RFCXXXX]   |
   | lower-port           |    8  |   0   |    IESG    |   [RFCXXXX]   |
   | upper-port           |    9  |   0   |    IESG    |   [RFCXXXX]   |
   | target-protocol      |   10  |   4   |    IESG    |   [RFCXXXX]   |
   | target-fqdn          |   11  |   4   |    IESG    |   [RFCXXXX]   |
   | target-uri           |   12  |   4   |    IESG    |   [RFCXXXX]   |
   | alias-name           |   13  |   4   |    IESG    |   [RFCXXXX]   |
   | lifetime             |   14  |  0/1  |    IESG    |   [RFCXXXX]   |
   | mitigation-start     |   15  |   0   |    IESG    |   [RFCXXXX]   |
   | status               |   16  |   0   |    IESG    |   [RFCXXXX]   |
   | conflict-information |   17  |   5   |    IESG    |   [RFCXXXX]   |
   | conflict-status      |   18  |   0   |    IESG    |   [RFCXXXX]   |
   | conflict-cause       |   19  |   0   |    IESG    |   [RFCXXXX]   |
   | retry-timer          |   20  |   0   |    IESG    |   [RFCXXXX]   |
   | conflict-scope       |   21  |   5   |    IESG    |   [RFCXXXX]   |
   | acl-list             |   22  |   4   |    IESG    |   [RFCXXXX]   |
   | acl-name             |   23  |   3   |    IESG    |   [RFCXXXX]   |
   | acl-type             |   24  |   3   |    IESG    |   [RFCXXXX]   |
   | bytes-dropped        |   25  |   0   |    IESG    |   [RFCXXXX]   |
   | bps-dropped          |   26  |   0   |    IESG    |   [RFCXXXX]   |
   | pkts-dropped         |   27  |   0   |    IESG    |   [RFCXXXX]   |
   | pps-dropped          |   28  |   0   |    IESG    |   [RFCXXXX]   |
   | attack-status        |   29  |   0   |    IESG    |   [RFCXXXX]   |



Reddy, et al.             Expires March 3, 2019                [Page 78]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   | ietf-dots-signal-    |   30  |   5   |    IESG    |   [RFCXXXX]   |
   | channel:signal-config|       |       |            |               |
   | sid                  |   31  |   0   |    IESG    |   [RFCXXXX]   |
   | mitigating-config    |   32  |   5   |    IESG    |   [RFCXXXX]   |
   | heartbeat-interval   |   33  |   5   |    IESG    |   [RFCXXXX]   |
   | min-value            |   34  |   0   |    IESG    |   [RFCXXXX]   |
   | max-value            |   35  |   0   |    IESG    |   [RFCXXXX]   |
   | current-value        |   36  |   0   |    IESG    |   [RFCXXXX]   |
   | missing-hb-allowed   |   37  |   5   |    IESG    |   [RFCXXXX]   |
   | max-retransmit       |   38  |   5   |    IESG    |   [RFCXXXX]   |
   | ack-timeout          |   39  |   5   |    IESG    |   [RFCXXXX]   |
   | ack-random-factor    |   40  |   5   |    IESG    |   [RFCXXXX]   |
   | min-value-decimal    |   41  | 6tag4 |    IESG    |   [RFCXXXX]   |
   | max-value-decimal    |   42  | 6tag4 |    IESG    |   [RFCXXXX]   |
   | current-value-       |   43  | 6tag4 |    IESG    |   [RFCXXXX]   |
   |  decimal             |       |       |            |               |
   | idle-config          |   44  |   5   |    IESG    |   [RFCXXXX]   |
   | trigger-mitigation   |   45  |   7   |    IESG    |   [RFCXXXX]   |
   | ietf-dots-signal-chan|   46  |   5   |    IESG    |   [RFCXXXX]   |
   | nel:redirected-signal|       |       |            |               |
   | alt-server           |   47  |   3   |    IESG    |   [RFCXXXX]   |
   | alt-server-record    |   48  |   4   |    IESG    |   [RFCXXXX]   |
   +----------------------+-------+-------+------------+---------------+

        Table 6: Initial DOTS Signal Channel CBOR Mappings Registry

9.4.  DOTS Signal Channel YANG Module

   This document requests IANA to register the following URI in the
   "IETF XML Registry" [RFC3688]:

            URI: urn:ietf:params:xml:ns:yang:ietf-dots-signal-channel
            Registrant Contact: The IESG.
            XML: N/A; the requested URI is an XML namespace.

   This document requests IANA to register the following YANG module in
   the "YANG Module Names" registry [RFC7950].

         name: ietf-signal
         namespace: urn:ietf:params:xml:ns:yang:ietf-dots-signal-channel
         prefix: signal
         reference: RFC XXXX

10.  Security Considerations

   Authenticated encryption MUST be used for data confidentiality and
   message integrity.  The interaction between the DOTS agents requires
   Datagram Transport Layer Security (DTLS) and Transport Layer Security



Reddy, et al.             Expires March 3, 2019                [Page 79]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   (TLS) with a cipher suite offering confidentiality protection and the
   guidance given in [RFC7525] MUST be followed to avoid attacks on
   (D)TLS.  The (D)TLS protocol profile for DOTS signal channel is
   specified in Section 7.

   If TCP is used between DOTS agents, an attacker may be able to inject
   RST packets, bogus application segments, etc., regardless of whether
   TLS authentication is used.  Because the application data is TLS
   protected, this will not result in the application receiving bogus
   data, but it will constitute a DoS on the connection.  This attack
   can be countered by using TCP-AO [RFC5925].  If TCP-AO is used, then
   any bogus packets injected by an attacker will be rejected by the
   TCP-AO integrity check and therefore will never reach the TLS layer.

   Rate-limiting DOTS requests, including those with new 'cuid' values,
   from the same DOTS client defends against DoS attacks that would
   result in varying the 'cuid' to exhaust DOTS server resources.  Rate-
   limit policies SHOULD be enforced on DOTS gateways (if deployed) and
   DOTS servers.

   In order to prevent leaking internal information outside a client-
   domain, DOTS gateways located in the client-domain SHOULD NOT reveal
   the identification information that pertains to internal DOTS clients
   (e.g., source IP address, client's hostname) unless explicitly
   configured to do so.

   DOTS servers MUST verify that requesting DOTS clients are entitled to
   trigger actions on a given IP prefix.  That is, only actions on IP
   resources that belong to the DOTS client' domain MUST be authorized
   by a DOTS server.  The exact mechanism for the DOTS servers to
   validate that the target prefixes are within the scope of the DOTS
   client's domain is deployment-specific.

   The presence of DOTS gateways may lead to infinite forwarding loops,
   which is undesirable.  To prevent and detect such loops, this
   document uses the Hop-Limit Option.

   CoAP-specific security considerations are discussed in Section 11 of
   [RFC7252], while CBOR-related security considerations are discussed
   in Section 8 of [RFC7049].

11.  Contributors

   The following individuals have contributed to this document:

   o  Jon Shallow, NCC Group, Email: jon.shallow@nccgroup.trust





Reddy, et al.             Expires March 3, 2019                [Page 80]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   o  Mike Geller, Cisco Systems, Inc. 3250 Florida 33309 USA, Email:
      mgeller@cisco.com

   o  Robert Moskowitz, HTT Consulting Oak Park, MI 42837 United States,
      Email: rgm@htt-consult.com

   o  Dan Wing, Email: dwing-ietf@fuggles.com

12.  Acknowledgements

   Thanks to Christian Jacquenet, Roland Dobbins, Roman D.  Danyliw,
   Michael Richardson, Ehud Doron, Kaname Nishizuka, Dave Dolson, Liang
   Xia, Gilbert Clark, Xialiang Frank, Jim Schaad and Nesredien Suleiman
   for the discussion and comments.

   Thanks to the core WG for the recommendations on Hop-Limit and
   redirect signaling.

13.  References

13.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC3688]  Mealling, M., "The IETF XML Registry", BCP 81, RFC 3688,
              DOI 10.17487/RFC3688, January 2004,
              <https://www.rfc-editor.org/info/rfc3688>.

   [RFC4279]  Eronen, P., Ed. and H. Tschofenig, Ed., "Pre-Shared Key
              Ciphersuites for Transport Layer Security (TLS)",
              RFC 4279, DOI 10.17487/RFC4279, December 2005,
              <https://www.rfc-editor.org/info/rfc4279>.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246,
              DOI 10.17487/RFC5246, August 2008,
              <https://www.rfc-editor.org/info/rfc5246>.

   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen, S.,
              Housley, R., and W. Polk, "Internet X.509 Public Key
              Infrastructure Certificate and Certificate Revocation List
              (CRL) Profile", RFC 5280, DOI 10.17487/RFC5280, May 2008,
              <https://www.rfc-editor.org/info/rfc5280>.





Reddy, et al.             Expires March 3, 2019                [Page 81]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   [RFC5785]  Nottingham, M. and E. Hammer-Lahav, "Defining Well-Known
              Uniform Resource Identifiers (URIs)", RFC 5785,
              DOI 10.17487/RFC5785, April 2010,
              <https://www.rfc-editor.org/info/rfc5785>.

   [RFC6066]  Eastlake 3rd, D., "Transport Layer Security (TLS)
              Extensions: Extension Definitions", RFC 6066,
              DOI 10.17487/RFC6066, January 2011,
              <https://www.rfc-editor.org/info/rfc6066>.

   [RFC6125]  Saint-Andre, P. and J. Hodges, "Representation and
              Verification of Domain-Based Application Service Identity
              within Internet Public Key Infrastructure Using X.509
              (PKIX) Certificates in the Context of Transport Layer
              Security (TLS)", RFC 6125, DOI 10.17487/RFC6125, March
              2011, <https://www.rfc-editor.org/info/rfc6125>.

   [RFC6347]  Rescorla, E. and N. Modadugu, "Datagram Transport Layer
              Security Version 1.2", RFC 6347, DOI 10.17487/RFC6347,
              January 2012, <https://www.rfc-editor.org/info/rfc6347>.

   [RFC7049]  Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", RFC 7049, DOI 10.17487/RFC7049,
              October 2013, <https://www.rfc-editor.org/info/rfc7049>.

   [RFC7250]  Wouters, P., Ed., Tschofenig, H., Ed., Gilmore, J.,
              Weiler, S., and T. Kivinen, "Using Raw Public Keys in
              Transport Layer Security (TLS) and Datagram Transport
              Layer Security (DTLS)", RFC 7250, DOI 10.17487/RFC7250,
              June 2014, <https://www.rfc-editor.org/info/rfc7250>.

   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, "The Constrained
              Application Protocol (CoAP)", RFC 7252,
              DOI 10.17487/RFC7252, June 2014,
              <https://www.rfc-editor.org/info/rfc7252>.

   [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,
              "Recommendations for Secure Use of Transport Layer
              Security (TLS) and Datagram Transport Layer Security
              (DTLS)", BCP 195, RFC 7525, DOI 10.17487/RFC7525, May
              2015, <https://www.rfc-editor.org/info/rfc7525>.

   [RFC7641]  Hartke, K., "Observing Resources in the Constrained
              Application Protocol (CoAP)", RFC 7641,
              DOI 10.17487/RFC7641, September 2015,
              <https://www.rfc-editor.org/info/rfc7641>.





Reddy, et al.             Expires March 3, 2019                [Page 82]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   [RFC7950]  Bjorklund, M., Ed., "The YANG 1.1 Data Modeling Language",
              RFC 7950, DOI 10.17487/RFC7950, August 2016,
              <https://www.rfc-editor.org/info/rfc7950>.

   [RFC7959]  Bormann, C. and Z. Shelby, Ed., "Block-Wise Transfers in
              the Constrained Application Protocol (CoAP)", RFC 7959,
              DOI 10.17487/RFC7959, August 2016,
              <https://www.rfc-editor.org/info/rfc7959>.

   [RFC8085]  Eggert, L., Fairhurst, G., and G. Shepherd, "UDP Usage
              Guidelines", BCP 145, RFC 8085, DOI 10.17487/RFC8085,
              March 2017, <https://www.rfc-editor.org/info/rfc8085>.

   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, "Guidelines for
              Writing an IANA Considerations Section in RFCs", BCP 26,
              RFC 8126, DOI 10.17487/RFC8126, June 2017,
              <https://www.rfc-editor.org/info/rfc8126>.

   [RFC8323]  Bormann, C., Lemay, S., Tschofenig, H., Hartke, K.,
              Silverajan, B., and B. Raymor, Ed., "CoAP (Constrained
              Application Protocol) over TCP, TLS, and WebSockets",
              RFC 8323, DOI 10.17487/RFC8323, February 2018,
              <https://www.rfc-editor.org/info/rfc8323>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/info/rfc8446>.

13.2.  Informative References

   [I-D.boucadair-core-hop-limit]
              Boucadair, M., Reddy, T., and J. Shallow, "Constrained
              Application Protocol (CoAP) Hop Limit Option", draft-
              boucadair-core-hop-limit-00 (work in progress), August
              2018.

   [I-D.ietf-core-comi]
              Veillette, M., Stok, P., Pelov, A., and A. Bierman, "CoAP
              Management Interface", draft-ietf-core-comi-03 (work in
              progress), June 2018.

   [I-D.ietf-core-yang-cbor]
              Veillette, M., Pelov, A., Somaraju, A., Turner, R., and A.
              Minaburo, "CBOR Encoding of Data Modeled with YANG",
              draft-ietf-core-yang-cbor-06 (work in progress), February
              2018.





Reddy, et al.             Expires March 3, 2019                [Page 83]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   [I-D.ietf-dots-architecture]
              Mortensen, A., Andreasen, F., Reddy, T.,
              christopher_gray3@cable.comcast.com, c., Compton, R., and
              N. Teague, "Distributed-Denial-of-Service Open Threat
              Signaling (DOTS) Architecture", draft-ietf-dots-
              architecture-06 (work in progress), March 2018.

   [I-D.ietf-dots-data-channel]
              Boucadair, M., Reddy, T., Nishizuka, K., Xia, L., Patil,
              P., Mortensen, A., and N. Teague, "Distributed Denial-of-
              Service Open Threat Signaling (DOTS) Data Channel
              Specification", draft-ietf-dots-data-channel-18 (work in
              progress), July 2018.

   [I-D.ietf-dots-requirements]
              Mortensen, A., Moskowitz, R., and T. Reddy, "Distributed
              Denial of Service (DDoS) Open Threat Signaling
              Requirements", draft-ietf-dots-requirements-15 (work in
              progress), August 2018.

   [I-D.ietf-dots-use-cases]
              Dobbins, R., Migault, D., Fouant, S., Moskowitz, R.,
              Teague, N., Xia, L., and K. Nishizuka, "Use cases for DDoS
              Open Threat Signaling", draft-ietf-dots-use-cases-16 (work
              in progress), July 2018.

   [I-D.ietf-tls-dtls13]
              Rescorla, E., Tschofenig, H., and N. Modadugu, "The
              Datagram Transport Layer Security (DTLS) Protocol Version
              1.3", draft-ietf-tls-dtls13-28 (work in progress), July
              2018.

   [proto_numbers]
              "IANA, "Protocol Numbers"", 2011,
              <http://www.iana.org/assignments/protocol-numbers>.

   [RFC0791]  Postel, J., "Internet Protocol", STD 5, RFC 791,
              DOI 10.17487/RFC0791, September 1981,
              <https://www.rfc-editor.org/info/rfc791>.

   [RFC1983]  Malkin, G., Ed., "Internet Users' Glossary", FYI 18,
              RFC 1983, DOI 10.17487/RFC1983, August 1996,
              <https://www.rfc-editor.org/info/rfc1983>.

   [RFC3022]  Srisuresh, P. and K. Egevang, "Traditional IP Network
              Address Translator (Traditional NAT)", RFC 3022,
              DOI 10.17487/RFC3022, January 2001,
              <https://www.rfc-editor.org/info/rfc3022>.



Reddy, et al.             Expires March 3, 2019                [Page 84]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, DOI 10.17487/RFC3986, January 2005,
              <https://www.rfc-editor.org/info/rfc3986>.

   [RFC4340]  Kohler, E., Handley, M., and S. Floyd, "Datagram
              Congestion Control Protocol (DCCP)", RFC 4340,
              DOI 10.17487/RFC4340, March 2006,
              <https://www.rfc-editor.org/info/rfc4340>.

   [RFC4632]  Fuller, V. and T. Li, "Classless Inter-domain Routing
              (CIDR): The Internet Address Assignment and Aggregation
              Plan", BCP 122, RFC 4632, DOI 10.17487/RFC4632, August
              2006, <https://www.rfc-editor.org/info/rfc4632>.

   [RFC4732]  Handley, M., Ed., Rescorla, E., Ed., and IAB, "Internet
              Denial-of-Service Considerations", RFC 4732,
              DOI 10.17487/RFC4732, December 2006,
              <https://www.rfc-editor.org/info/rfc4732>.

   [RFC4787]  Audet, F., Ed. and C. Jennings, "Network Address
              Translation (NAT) Behavioral Requirements for Unicast
              UDP", BCP 127, RFC 4787, DOI 10.17487/RFC4787, January
              2007, <https://www.rfc-editor.org/info/rfc4787>.

   [RFC4960]  Stewart, R., Ed., "Stream Control Transmission Protocol",
              RFC 4960, DOI 10.17487/RFC4960, September 2007,
              <https://www.rfc-editor.org/info/rfc4960>.

   [RFC4987]  Eddy, W., "TCP SYN Flooding Attacks and Common
              Mitigations", RFC 4987, DOI 10.17487/RFC4987, August 2007,
              <https://www.rfc-editor.org/info/rfc4987>.

   [RFC5389]  Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,
              "Session Traversal Utilities for NAT (STUN)", RFC 5389,
              DOI 10.17487/RFC5389, October 2008,
              <https://www.rfc-editor.org/info/rfc5389>.

   [RFC5925]  Touch, J., Mankin, A., and R. Bonica, "The TCP
              Authentication Option", RFC 5925, DOI 10.17487/RFC5925,
              June 2010, <https://www.rfc-editor.org/info/rfc5925>.

   [RFC6052]  Bao, C., Huitema, C., Bagnulo, M., Boucadair, M., and X.
              Li, "IPv6 Addressing of IPv4/IPv6 Translators", RFC 6052,
              DOI 10.17487/RFC6052, October 2010,
              <https://www.rfc-editor.org/info/rfc6052>.





Reddy, et al.             Expires March 3, 2019                [Page 85]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   [RFC6146]  Bagnulo, M., Matthews, P., and I. van Beijnum, "Stateful
              NAT64: Network Address and Protocol Translation from IPv6
              Clients to IPv4 Servers", RFC 6146, DOI 10.17487/RFC6146,
              April 2011, <https://www.rfc-editor.org/info/rfc6146>.

   [RFC6234]  Eastlake 3rd, D. and T. Hansen, "US Secure Hash Algorithms
              (SHA and SHA-based HMAC and HKDF)", RFC 6234,
              DOI 10.17487/RFC6234, May 2011,
              <https://www.rfc-editor.org/info/rfc6234>.

   [RFC6296]  Wasserman, M. and F. Baker, "IPv6-to-IPv6 Network Prefix
              Translation", RFC 6296, DOI 10.17487/RFC6296, June 2011,
              <https://www.rfc-editor.org/info/rfc6296>.

   [RFC6724]  Thaler, D., Ed., Draves, R., Matsumoto, A., and T. Chown,
              "Default Address Selection for Internet Protocol Version 6
              (IPv6)", RFC 6724, DOI 10.17487/RFC6724, September 2012,
              <https://www.rfc-editor.org/info/rfc6724>.

   [RFC6887]  Wing, D., Ed., Cheshire, S., Boucadair, M., Penno, R., and
              P. Selkirk, "Port Control Protocol (PCP)", RFC 6887,
              DOI 10.17487/RFC6887, April 2013,
              <https://www.rfc-editor.org/info/rfc6887>.

   [RFC6888]  Perreault, S., Ed., Yamagata, I., Miyakawa, S., Nakagawa,
              A., and H. Ashida, "Common Requirements for Carrier-Grade
              NATs (CGNs)", BCP 127, RFC 6888, DOI 10.17487/RFC6888,
              April 2013, <https://www.rfc-editor.org/info/rfc6888>.

   [RFC7413]  Cheng, Y., Chu, J., Radhakrishnan, S., and A. Jain, "TCP
              Fast Open", RFC 7413, DOI 10.17487/RFC7413, December 2014,
              <https://www.rfc-editor.org/info/rfc7413>.

   [RFC7452]  Tschofenig, H., Arkko, J., Thaler, D., and D. McPherson,
              "Architectural Considerations in Smart Object Networking",
              RFC 7452, DOI 10.17487/RFC7452, March 2015,
              <https://www.rfc-editor.org/info/rfc7452>.

   [RFC7589]  Badra, M., Luchuk, A., and J. Schoenwaelder, "Using the
              NETCONF Protocol over Transport Layer Security (TLS) with
              Mutual X.509 Authentication", RFC 7589,
              DOI 10.17487/RFC7589, June 2015,
              <https://www.rfc-editor.org/info/rfc7589>.

   [RFC7918]  Langley, A., Modadugu, N., and B. Moeller, "Transport
              Layer Security (TLS) False Start", RFC 7918,
              DOI 10.17487/RFC7918, August 2016,
              <https://www.rfc-editor.org/info/rfc7918>.



Reddy, et al.             Expires March 3, 2019                [Page 86]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   [RFC7924]  Santesson, S. and H. Tschofenig, "Transport Layer Security
              (TLS) Cached Information Extension", RFC 7924,
              DOI 10.17487/RFC7924, July 2016,
              <https://www.rfc-editor.org/info/rfc7924>.

   [RFC7951]  Lhotka, L., "JSON Encoding of Data Modeled with YANG",
              RFC 7951, DOI 10.17487/RFC7951, August 2016,
              <https://www.rfc-editor.org/info/rfc7951>.

   [RFC8305]  Schinazi, D. and T. Pauly, "Happy Eyeballs Version 2:
              Better Connectivity Using Concurrency", RFC 8305,
              DOI 10.17487/RFC8305, December 2017,
              <https://www.rfc-editor.org/info/rfc8305>.

   [RFC8340]  Bjorklund, M. and L. Berger, Ed., "YANG Tree Diagrams",
              BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,
              <https://www.rfc-editor.org/info/rfc8340>.

Authors' Addresses

   Tirumaleswar Reddy (editor)
   McAfee, Inc.
   Embassy Golf Link Business Park
   Bangalore, Karnataka  560071
   India

   Email: kondtir@gmail.com


   Mohamed Boucadair (editor)
   Orange
   Rennes  35000
   France

   Email: mohamed.boucadair@orange.com


   Prashanth Patil
   Cisco Systems, Inc.

   Email: praspati@cisco.com










Reddy, et al.             Expires March 3, 2019                [Page 87]

Internet-Draft        DOTS Signal Channel Protocol           August 2018


   Andrew Mortensen
   Arbor Networks, Inc.
   2727 S. State St
   Ann Arbor, MI  48104
   United States

   Email: amortensen@arbor.net


   Nik Teague
   Verisign, Inc.
   United States

   Email: nteague@verisign.com





































Reddy, et al.             Expires March 3, 2019                [Page 88]
