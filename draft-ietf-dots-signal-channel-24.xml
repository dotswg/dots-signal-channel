<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-ietf-dots-signal-channel-24"
     ipr="trust200902">
  <front>
    <title abbrev="DOTS Signal Channel Protocol">Distributed Denial-of-Service
    Open Threat Signaling (DOTS) Signal Channel Specification</title>

    <author fullname="Tirumaleswar Reddy" initials="T." role="editor"
            surname="Reddy">
      <organization abbrev="McAfee">McAfee, Inc.</organization>

      <address>
        <postal>
          <street>Embassy Golf Link Business Park</street>

          <city>Bangalore</city>

          <region>Karnataka</region>

          <code>560071</code>

          <country>India</country>
        </postal>

        <email>kondtir@gmail.com</email>
      </address>
    </author>

    <author fullname="Mohamed Boucadair" initials="M." role="editor"
            surname="Boucadair">
      <organization>Orange</organization>

      <address>
        <postal>
          <street></street>

          <city>Rennes</city>

          <region></region>

          <code>35000</code>

          <country>France</country>
        </postal>

        <email>mohamed.boucadair@orange.com</email>
      </address>
    </author>

    <author fullname="Prashanth Patil" initials="P." surname="Patil">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street></street>

          <street></street>

          <city></city>

          <country></country>
        </postal>

        <email>praspati@cisco.com</email>
      </address>
    </author>

    <author fullname="Andrew Mortensen" initials="A." surname="Mortensen">
      <organization>Arbor Networks, Inc.</organization>

      <address>
        <postal>
          <street>2727 S. State St</street>

          <city>Ann Arbor, MI</city>

          <region></region>

          <code>48104</code>

          <country>United States</country>
        </postal>

        <email>amortensen@arbor.net</email>
      </address>
    </author>

    <author fullname="Nik Teague" initials="N." surname="Teague">
      <organization>Verisign, Inc.</organization>

      <address>
        <postal>
          <street></street>

          <city></city>

          <region></region>

          <code></code>

          <country>United States</country>
        </postal>

        <email>nteague@verisign.com</email>
      </address>
    </author>

    <date />

    <workgroup>DOTS</workgroup>

    <keyword>security</keyword>

    <keyword>mitigation</keyword>

    <keyword>service delivery</keyword>

    <keyword>connectivity</keyword>

    <keyword>anti-DDoS</keyword>

    <keyword>automation</keyword>

    <keyword>cooperation</keyword>

    <keyword>Resilience</keyword>

    <keyword>Filtering</keyword>

    <keyword>Security Center</keyword>

    <keyword>Mitigator</keyword>

    <keyword>Scrubbing</keyword>

    <keyword>dynamic service protection</keyword>

    <keyword>dynamic mitigation</keyword>

    <abstract>
      <t>This document specifies the DOTS signal channel, a protocol for
      signaling the need for protection against Distributed Denial-of-Service
      (DDoS) attacks to a server capable of enabling network traffic
      mitigation on behalf of the requesting client.</t>

      <t>A companion document defines the DOTS data channel, a separate
      reliable communication layer for DOTS management and configuration
      purposes.</t>
    </abstract>

    <note title="Editorial Note (To be removed by RFC Editor)">
      <t>Please update these statements within the document with the RFC
      number to be assigned to this document:<list style="symbols">
          <t>"This version of this YANG module is part of RFC XXXX;"</t>

          <t>"RFC XXXX: Distributed Denial-of-Service Open Threat Signaling
          (DOTS) Signal Channel Specification";</t>

          <t>"| [RFCXXXX] |"</t>

          <t>reference: RFC XXXX</t>
        </list>Please update TBD statements with the port number to be
      assigned to DOTS Signal Channel Protocol.</t>

      <t>Also, please update the "revision" date of the YANG module.</t>
    </note>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>A distributed denial-of-service (DDoS) attack is an attempt to make
      machines or network resources unavailable to their intended users. In
      most cases, sufficient scale can be achieved by compromising enough
      end-hosts and using those infected hosts to perpetrate and amplify the
      attack. The victim in this attack can be an application server, a host,
      a router, a firewall, or an entire network.</t>

      <t>Network applications have finite resources like CPU cycles, the
      number of processes or threads they can create and use, the maximum
      number of simultaneous connections it can handle, the limited resources
      of the control plane, etc. When processing network traffic, such
      applications are supposed to use these resources to offer the intended
      task in the most efficient manner. However, a DDoS attacker may be able
      to prevent an application from performing its intended task by making
      the application exhaust its finite resources.</t>

      <t>TCP DDoS SYN-flood, for example, is a memory-exhausting attack while
      ACK-flood is a CPU-exhausting attack <xref target="RFC4987"></xref>.
      Attacks on the link are carried out by sending enough traffic so that
      the link becomes congested, thereby likely causing packet loss for
      legitimate traffic. Stateful firewalls can also be attacked by sending
      traffic that causes the firewall to maintain an excessive number of
      states that may jeopardize the firewall's operation overall, besides
      likely performance impacts. The firewall then runs out of memory, and
      can no longer instantiate the states required to process legitimate
      flows. Other possible DDoS attacks are discussed in <xref
      target="RFC4732"></xref>.</t>

      <t>In many cases, it may not be possible for network administrators to
      determine the cause(s) of an attack. They may instead just realize that
      certain resources seem to be under attack. This document defines a
      lightweight protocol that allows a DOTS client to request mitigation
      from one or more DOTS servers for protection against detected,
      suspected, or anticipated attacks. This protocol enables cooperation
      between DOTS agents to permit a highly-automated network defense that is
      robust, reliable, and secure.</t>

      <t>An example of a network diagram that illustrates a deployment of DOTS
      agents is shown in <xref target="fig1"></xref>. In this example, a DOTS
      server is operating on the access network. A DOTS client is located on
      the LAN (Local Area Network), while a DOTS gateway is embedded in the
      CPE (Customer Premises Equipment).</t>

      <t><figure anchor="fig1" title="Sample DOTS Deployment (1)">
          <artwork align="center"><![CDATA[   
  Network          
  Resource        CPE router         Access network     __________      
+-----------+   +--------------+    +-------------+    /          \   
|           |___|              |____|             |___ | Internet |
|DOTS client|   | DOTS gateway |    | DOTS server |    |          |
|           |   |              |    |             |    |          |
+-----------+   +--------------+    +-------------+    \__________/]]></artwork>
        </figure></t>

      <t>DOTS servers can also be reachable over the Internet, as depicted in
      <xref target="fig_blah"></xref>.</t>

      <t><figure anchor="fig_blah" title="Sample DOTS Deployment (2)">
          <artwork align="center"><![CDATA[   
  Network                                           DDoS mitigation  
  Resource          CPE router      __________        service
+-----------+   +-------------+    /          \    +-------------+
|           |___|             |____|          |___ |             |
|DOTS client|   |DOTS gateway |    | Internet |    | DOTS server |
|           |   |             |    |          |    |             |
+-----------+   +-------------+    \__________/    +-------------+
]]></artwork>
        </figure>In typical deployments, the DOTS client belongs to a
      different administrative domain than the DOTS server. For example, the
      DOTS client is embedded in a firewall protecting services owned and
      operated by a customer, while the DOTS server is owned and operated by a
      different administrative entity (service provider, typically) providing
      DDoS mitigation services. The latter might or might not provide
      connectivity services to the network hosting the DOTS client.</t>

      <t>The DOTS server may (not) be co-located with the DOTS mitigator. In
      typical deployments, the DOTS server belongs to the same administrative
      domain as the mitigator. The DOTS client can communicate directly with a
      DOTS server or indirectly via a DOTS gateway.</t>

      <t>The document adheres to the DOTS architecture <xref
      target="I-D.ietf-dots-architecture"></xref>. The requirements for DOTS
      signal channel protocol are documented in <xref
      target="I-D.ietf-dots-requirements"></xref>. This document satisfies all
      the use cases discussed in <xref
      target="I-D.ietf-dots-use-cases"></xref>.</t>

      <t>This document focuses on the DOTS signal channel. This is a companion
      document of the DOTS data channel specification <xref
      target="I-D.ietf-dots-data-channel"></xref> that defines a configuration
      and a bulk data exchange mechanism supporting the DOTS signal
      channel.</t>
    </section>

    <section anchor="notation" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in <xref
      target="RFC2119"></xref>.</t>

      <t>(D)TLS is used for statements that apply to both Transport Layer
      Security <xref target="RFC5246"></xref><xref target="RFC8446"></xref>
      and Datagram Transport Layer Security <xref target="RFC6347"></xref>.
      Specific terms are used for any statement that applies to either
      protocol alone.</t>

      <t>The reader should be familiar with the terms defined in <xref
      target="I-D.ietf-dots-requirements"></xref>.</t>

      <t>The meaning of the symbols in YANG tree diagrams is defined in <xref
      target="RFC8340"></xref>.</t>
    </section>

    <section title="Design Overview">
      <t>The DOTS signal channel is built on top of the Constrained
      Application Protocol (CoAP) <xref target="RFC7252"></xref>, a
      lightweight protocol originally designed for constrained devices and
      networks. The many features of CoAP (expectation of packet loss, support
      for asynchronous Non-confirmable messaging, congestion control, small
      message overhead limiting the need for fragmentation, use of minimal
      resources, and support for (D)TLS) makes it a good candidate to build
      the DOTS signaling mechanism from.</t>

      <t>The DOTS signal channel is layered on existing standards (<xref
      target="fig_dots"></xref>).</t>

      <t><figure anchor="fig_dots"
          title="Abstract Layering of DOTS Signal Channel over CoAP over (D)TLS">
          <artwork align="center"><![CDATA[+---------------------+
| DOTS Signal Channel |
+---------------------+
|         CoAP        |
+----------+----------+
|   TLS    |   DTLS   |
+----------+----------+
|   TCP    |   UDP    |
+----------+----------+
|          IP         |
+---------------------+
]]></artwork>
        </figure></t>

      <t>By default, a DOTS signal channel MUST run over port number TBD as
      defined in <xref target="port"></xref>, for both UDP and TCP, unless the
      DOTS server has a mutual agreement with its DOTS clients to use a
      different port number. DOTS clients MAY alternatively support means to
      dynamically discover the ports used by their DOTS servers. In order to
      use a distinct port number (as opposed to TBD), DOTS clients and servers
      SHOULD support a configurable parameter to supply the port number to
      use. The rationale for not using the default port number 5684 ((D)TLS
      CoAP) is to allow for differentiated behaviors in environments where
      both a DOTS gateway and an IoT gateway (e.g., Figure 3 of <xref
      target="RFC7452"></xref>) are present.</t>

      <t>The signal channel uses the "coaps" URI scheme defined in Section 6
      of <xref target="RFC7252"></xref> and "coaps+tcp" URI scheme defined in
      Section 8.2 of <xref target="RFC8323"></xref> to identify DOTS server
      resources accessible using CoAP over UDP secured with DTLS and CoAP over
      TCP secured with TLS.</t>

      <t>The signal channel is initiated by the DOTS client (<xref
      target="m_req"></xref>). Once the signal channel is established, the
      DOTS agents periodically send heartbeats to keep the channel active
      (<xref target="hb"></xref>). At any time, the DOTS client may send a
      mitigation request message to a DOTS server over the active channel.
      While mitigation is active because of the higher likelihood of packet
      loss during a DDoS attack, the DOTS server periodically sends status
      messages to the client, including basic mitigation feedback details.
      Mitigation remains active until the DOTS client explicitly terminates
      mitigation, or the mitigation lifetime expires.</t>

      <t>DOTS signaling can happen with DTLS over UDP and TLS over TCP.
      Likewise, DOTS requests may be sent using IPv4 or IPv6 transfer
      capabilities. A Happy Eyeballs procedure for DOTS signal channel is
      specified in <xref target="HE"></xref>.</t>

      <t>Messages exchanged between DOTS agents are serialized using Concise
      Binary Object Representation (CBOR) <xref target="RFC7049"></xref>, a
      binary encoding scheme designed for small code and message size.
      CBOR-encoded payloads are used to carry signal channel-specific payload
      messages which convey request parameters and response information such
      as errors. In order to allow the use of the same data models, <xref
      target="RFC7951"></xref> specifies the JavaScript Object Notation (JSON)
      encoding of YANG-modeled data. A similar effort for CBOR is defined in
      <xref target="I-D.ietf-core-yang-cbor"></xref>.</t>

      <t>From that standpoint, this document specifies a YANG module for
      representing DOTS mitigation scopes, DOTS signal channel session
      configuration data, and DOTS redirected signalling (<xref
      target="YANG"></xref>). Representing these data as CBOR data is assumed
      to follow the rules in <xref target="I-D.ietf-core-yang-cbor"></xref> or
      those in <xref target="RFC7951"></xref> combined with JSON/CBOR
      conversion rules in <xref target="RFC7049"></xref>. All parameters in
      the payload of the DOTS signal channel are mapped to CBOR types as
      specified in <xref target="mapping"></xref>.</t>

      <t>In order to prevent fragmentation, DOTS agents must follow the
      recommendations documented in Section 4.6 of <xref
      target="RFC7252"></xref>. Refer to <xref target="mtu"></xref> for more
      details.</t>

      <t>DOTS agents MUST support GET, PUT, and DELETE CoAP methods. The
      payload included in CoAP responses with 2.xx Response Codes MUST be of
      content type "application/cbor" (Section 5.5.1 of <xref
      target="RFC7252"></xref>). CoAP responses with 4.xx and 5.xx error
      Response Codes MUST include a diagnostic payload (Section 5.5.2 of <xref
      target="RFC7252"></xref>). The Diagnostic Payload may contain additional
      information to aid troubleshooting.</t>

      <t>In deployments where multiple DOTS clients are enabled in a network
      (owned and operated by the same entity), the DOTS server may detect
      conflicting mitigation requests from these clients. This document does
      not aim to specify a comprehensive list of conditions under which a DOTS
      server will characterize two mitigation requests from distinct DOTS
      clients as conflicting, nor recommend a DOTS server behavior for
      processing conflicting mitigation requests. Those considerations are
      implementation- and deployment-specific. Nevertheless, the document
      specifies the mechanisms to notify DOTS clients when conflicts occur,
      including the conflict cause (<xref target="m_req"></xref>).</t>

      <t>In deployments where one or more translators (e.g., Traditional NAT
      <xref target="RFC3022"></xref>, CGN <xref target="RFC6888"></xref>,
      NAT64 <xref target="RFC6146"></xref>, NPTv6 <xref
      target="RFC6296"></xref>) are enabled between the client's network and
      the DOTS server, DOTS signal channel messages forwarded to a DOTS server
      MUST NOT include internal IP addresses/prefixes and/or port numbers;
      external addresses/prefixes and/or port numbers as assigned by the
      translator MUST be used instead. This document does not make any
      recommendation about possible translator discovery mechanisms. The
      following are some (non-exhaustive) deployment examples that may be
      considered: <list style="symbols">
          <t>Port Control Protocol (PCP) <xref target="RFC6887"></xref> or
          Session Traversal Utilities for NAT (STUN) <xref
          target="RFC5389"></xref> may be used to retrieve the external
          addresses/prefixes and/or port numbers. Information retrieved by
          means of PCP or STUN will be used to feed the DOTS signal channel
          messages that will be sent to a DOTS server.</t>

          <t>A DOTS gateway may be co-located with the translator. The DOTS
          gateway will need to update the DOTS messages, based upon the local
          translator's binding table.</t>
        </list></t>
    </section>

    <section title="DOTS Signal Channel: Messages &amp; Behaviors">
      <section anchor="discover" title="DOTS Server(s) Discovery">
        <t>This document assumes that DOTS clients are provisioned with the
        reachability information of their DOTS server(s) using a variety of
        means (e.g., local configuration, or dynamic means such as DHCP). The
        description of such means is out of scope of this document.</t>

        <t>Likewise, it is out of scope of this document to specify the
        behavior to be followed by a DOTS client to send DOTS requests when
        multiple DOTS servers are provisioned (e.g., contact all DOTS servers,
        select one DOTS server among the list).</t>
      </section>

      <section anchor="uri-path" title="CoAP URIs">
        <t>The DOTS server MUST support the use of the path-prefix of
        "/.well-known/" as defined in <xref target="RFC5785"></xref> and the
        registered name of "dots". Each DOTS operation is indicated by a
        path-suffix that indicates the intended operation. The operation path
        (<xref target="uris"></xref>) is appended to the path-prefix to form
        the URI used with a CoAP request to perform the desired DOTS
        operation.</t>

        <texttable align="center" anchor="uris" style="all"
                   title="Operations and their Corresponding URIs">
          <ttcol>Operation</ttcol>

          <ttcol>Operation Path</ttcol>

          <ttcol>Details</ttcol>

          <c>Mitigation</c>

          <c>/v1.0/mitigate</c>

          <c><xref target="m_req"></xref></c>

          <c>Session configuration</c>

          <c>/v1.0/config</c>

          <c><xref target="sigconfig"></xref></c>
        </texttable>

        <t></t>
      </section>

      <section anchor="HE" title="Happy Eyeballs for DOTS Signal Channel">
        <t><xref target="I-D.ietf-dots-requirements"></xref> mentions that
        DOTS agents will have to support both connectionless and
        connection-oriented protocols. As such, the DOTS signal channel is
        designed to operate with DTLS over UDP and TLS over TCP. Further, a
        DOTS client may acquire a list of IPv4 and IPv6 addresses (<xref
        target="discover"></xref>), each of which can be used to contact the
        DOTS server using UDP and TCP. The following specifies the procedure
        to follow to select the address family and the transport protocol for
        sending DOTS signal channel messages.</t>

        <t>Such procedure is needed to avoid experiencing long connection
        delays. For example, if an IPv4 path to reach a DOTS server is found,
        but the DOTS server's IPv6 path is not working, a dual-stack DOTS
        client may experience a significant connection delay compared to an
        IPv4-only DOTS client. The other problem is that if a middlebox
        between the DOTS client and DOTS server is configured to block UDP
        traffic, the DOTS client will fail to establish a DTLS session with
        the DOTS server and, as a consequence, will have to fall back to TLS
        over TCP, thereby incurring significant connection delays.</t>

        <t>To overcome these connection setup problems, the DOTS client
        attempts to connect to its DOTS server(s) using both IPv6 and IPv4,
        and tries both DTLS over UDP and TLS over TCP in a manner similar to
        the Happy Eyeballs mechanism <xref target="RFC8305"></xref>. These
        connection attempts are performed by the DOTS client when it
        initializes. The results of the Happy Eyeballs procedure are used by
        the DOTS client for sending its subsequent messages to the DOTS
        server.</t>

        <t>The order of preference of the DOTS signal channel address family
        and transport protocol (most preferred first) is: UDP over IPv6, UDP
        over IPv4, TCP over IPv6, and finally TCP over IPv4. This order
        adheres to the address preference order specified in <xref
        target="RFC6724"></xref> and the DOTS signal channel preference which
        privileges the use of UDP over TCP (to avoid TCP's head of line
        blocking).</t>

        <t>In reference to <xref target="fig_happy_eyeballs"></xref>, the DOTS
        client sends two TCP SYNs and two DTLS ClientHello messages at the
        same time over IPv6 and IPv4. In this example, it is assumed that the
        IPv6 path is broken and UDP traffic is dropped by a middlebox but has
        little impact to the DOTS client because there is no long delay before
        using IPv4 and TCP. The DOTS client repeats the mechanism to discover
        whether DOTS signal channel messages with DTLS over UDP becomes
        available from the DOTS server, so the DOTS client can migrate the
        DOTS signal channel from TCP to UDP. Such probing SHOULD NOT be done
        more frequently than every 24 hours and MUST NOT be done more
        frequently than every 5 minutes.</t>

        <t>A single DOTS signal channel between DOTS agents can be used to
        exchange multiple DOTS signal messages. To reduce DOTS client and DOTS
        server workload, DOTS clients SHOULD re-use the (D)TLS session.</t>

        <t><figure anchor="fig_happy_eyeballs" title="DOTS Happy Eyeballs">
            <artwork align="center"><![CDATA[+-----------+                                           +-----------+
|DOTS client|                                           |DOTS server|
+-----------+                                           +-----------+
      |                                                       |
      |--DTLS ClientHello, IPv6 ---->X                        |
      |--TCP SYN, IPv6-------------->X                        |
      |--DTLS ClientHello, IPv4 ---->X                        |
      |--TCP SYN, IPv4--------------------------------------->|
      |--DTLS ClientHello, IPv6 ---->X                        |    
      |--TCP SYN, IPv6-------------->X                        |
      |<-TCP SYNACK-------------------------------------------|
      |--DTLS ClientHello, IPv4 ---->X                        |
      |--TCP ACK--------------------------------------------->|
      |<------------Establish TLS Session-------------------->|
      |----------------DOTS signal--------------------------->|
      |                                                       |
]]></artwork>
          </figure></t>

        <t></t>
      </section>

      <section anchor="m_req" title="DOTS Mitigation Methods">
        <t>The following methods are used by a DOTS client to request,
        withdraw, or retrieve the status of mitigation requests:<list
            hangIndent="8" style="hanging">
            <t hangText="PUT:">DOTS clients use the PUT method to request
            mitigation from a DOTS server (<xref target="post"></xref>).
            During active mitigation, DOTS clients may use PUT requests to
            carry mitigation efficacy updates to the DOTS server (<xref
            target="put"></xref>).</t>

            <t hangText="GET:">DOTS clients may use the GET method to
            subscribe to DOTS server status messages, or to retrieve the list
            of its mitigations maintained by a DOTS server (<xref
            target="get"></xref>).</t>

            <t hangText="DELETE:">DOTS clients use the DELETE method to
            withdraw a request for mitigation from a DOTS server (<xref
            target="del"></xref>).</t>
          </list></t>

        <t>Mitigation request and response messages are marked as
        Non-confirmable messages (Section 2.2 of <xref
        target="RFC7252"></xref>).</t>

        <t>DOTS agents SHOULD follow the data transmission guidelines
        discussed in Section 3.1.3 of <xref target="RFC8085"></xref> and
        control transmission behavior by not sending more than one UDP
        datagram per round-trip time (RTT) to the peer DOTS agent on
        average.</t>

        <t>Requests marked by the DOTS client as Non-confirmable messages are
        sent at regular intervals until a response is received from the DOTS
        server. If the DOTS client cannot maintain an RTT estimate, it SHOULD
        NOT send more than one Non-confirmable request every 3 seconds, and
        SHOULD use an even less aggressive rate whenever possible (case 2 in
        Section 3.1.3 of <xref target="RFC8085"></xref>).</t>

        <section anchor="post" title="Request Mitigation">
          <t>When a DOTS client requires mitigation for some reason, the DOTS
          client uses the CoAP PUT method to send a mitigation request to its
          DOTS server(s) (<xref target="Figure1"></xref>, illustrated in JSON
          diagnostic notation).</t>

          <t>If a DOTS client is entitled to solicit the DOTS service, the
          DOTS server can enable mitigation on behalf of the DOTS client by
          communicating the DOTS client's request to a mitigator and relaying
          the feedback of the thus-selected mitigator to the requesting DOTS
          client.</t>

          <t><figure anchor="Figure1"
              title="PUT to Convey DOTS Mitigation Requests">
              <artwork align="left"><![CDATA[  Header: PUT (Code=0.03)
  Uri-Path: ".well-known"
  Uri-Path: "dots"
  Uri-Path: "v1.0"
  Uri-Path: "mitigate"
  Uri-Path: "cuid=dz6pHjaADkaFTbjr0JGBpw"
  Uri-Path: "mid=123"
  Content-Type: "application/cbor"
  {
    "ietf-dots-signal-channel:mitigation-scope": {
      "scope": [
        {
          "target-prefix": [
             "string"
           ],
          "target-port-range": [
             {
               "lower-port": integer,
               "upper-port": integer
             }
           ],     
           "target-protocol": [
             integer
           ],
           "target-fqdn": [
             "string"
           ],
           "target-uri": [
             "string"
           ],
           "alias-name": [
             "string"
           ],
          "lifetime": integer,
          "trigger-mitigation": boolean
        }
      ]
    }
  }
]]></artwork>
            </figure></t>

          <t>The Uri-Path option carries a major and minor version
          nomenclature to manage versioning; DOTS signal channel in this
          specification uses 'v1' major version and '0' minor version.</t>

          <t>The order of the Uri-Path options is important as it defines the
          CoAP resource. In particular, 'mid' MUST follow 'cuid'.</t>

          <t>The additional Uri-Path parameters to those defined in <xref
          target="uri-path"></xref> are as follows:</t>

          <t><list style="hanging">
              <t hangText="cuid:">Stands for Client Unique Identifier. A
              globally unique identifier that is meant to prevent collisions
              among DOTS clients, especially those from the same domain. It
              MUST be generated by DOTS clients.<vspace
              blankLines="1" />Implementations SHOULD use the output of a
              cryptographic hash algorithm whose input is the Distinguished
              Encoding Rules (DER)-encoded Abstract Syntax Notation One
              (ASN.1) representation of the Subject Public Key Info (SPKI) of
              the DOTS client X.509 certificate <xref
              target="RFC5280"></xref>, the DOTS client raw public key <xref
              target="RFC7250"></xref>, or the "Pre-Shared Key (PSK) identity"
              used by the DOTS client in the TLS ClientKeyExchange message to
              set 'cuid'. In this version of the specification, the
              cryptographic hash algorithm used is SHA-256 <xref
              target="RFC6234"></xref>. The output of the cryptographic hash
              algorithm is truncated to 16 bytes; truncation is done by
              stripping off the final 16 bytes. The truncated output is
              base64url encoded.<vspace blankLines="1" />The 'cuid' is
              intended to be stable when communicating with a given DOTS
              server, i.e., the 'cuid' used by a DOTS client SHOULD NOT change
              over time. Distinct 'cuid' values MAY be used per DOTS server.
              <vspace blankLines="1" />DOTS servers MUST return 4.09
              (Conflict) error code to a DOTS peer to notify that the 'cuid'
              is already in-use by another DOTS client. Upon receipt of that
              error code, a new 'cuid' MUST be generated by the DOTS peer.
              <vspace blankLines="1" />Client-domain DOTS gateways MUST handle
              'cuid' collision directly and it is RECOMMENDED that 'cuid'
              collision is handled directly by server-domain DOTS
              gateways.<vspace blankLines="1" />DOTS gateways MAY rewrite the
              'cuid' used by peer DOTS clients. Triggers for such rewriting
              are out of scope. <vspace blankLines="1" />This is a mandatory
              Uri-Path parameter.</t>

              <t hangText="mid:">Identifier for the mitigation request
              represented with an integer. This identifier MUST be unique for
              each mitigation request bound to the DOTS client, i.e., the
              'mid' parameter value in the mitigation request needs to be
              unique relative to the 'mid' parameter values of active
              mitigation requests conveyed from the DOTS client to the DOTS
              server.<vspace blankLines="1" />In order to handle out-of-order
              delivery of mitigation requests, 'mid' values MUST increase
              monotonically. <vspace blankLines="1" />If the 'mid' value has
              reached 3/4 of (2**32 - 1) (i.e., 3221225471) and it is
              peace-time, the DOTS client MUST reset 'mid' to 0 to handle
              'mid' rollover. If the DOTS client maintains mitigation requests
              with pre-configured scopes, it MUST re-create them with the
              'mid' restarting at 0. <vspace blankLines="1" />This identifier
              MUST be generated by the DOTS client.<vspace
              blankLines="1" />This is a mandatory Uri-Path parameter.</t>
            </list></t>

          <t>'cuid' and 'mid' MUST NOT appear in the PUT request message
          body.</t>

          <t>The parameters in the CBOR body of the PUT request are described
          below:</t>

          <t><list style="hanging">
              <t hangText="target-prefix:">A list of prefixes identifying
              resources under attack. Prefixes are represented using Classless
              Inter-Domain Routing (CIDR) notation <xref
              target="RFC4632"></xref>. <vspace blankLines="0" />As a
              reminder, the prefix length must be less than or equal to 32
              (resp. 128) for IPv4 (resp. IPv6).<vspace blankLines="1" />The
              prefix list MUST NOT include broadcast, loopback, or multicast
              addresses. These addresses are considered as invalid values. In
              addition, the DOTS server MUST validate that target prefixes are
              within the scope of the DOTS client's domain. Other validation
              checks may be supported by DOTS servers.<vspace
              blankLines="1" />This is an optional attribute.</t>

              <t hangText="target-port-range:">A list of port numbers bound to
              resources under attack. <vspace blankLines="1" />A port range is
              defined by two bounds, a lower port number (lower-port) and an
              upper port number (upper-port). When only 'lower-port' is
              present, it represents a single port number. <vspace
              blankLines="1" />For TCP, UDP, Stream Control Transmission
              Protocol (SCTP) <xref target="RFC4960"></xref>, or Datagram
              Congestion Control Protocol (DCCP) <xref
              target="RFC4340"></xref>, a range of ports can be, for example,
              0-1023, 1024-65535, or 1024-49151. <vspace blankLines="1" />This
              is an optional attribute.</t>

              <t hangText="target-protocol:">A list of protocols involved in
              an attack. Values are taken from the IANA protocol registry
              <xref target="proto_numbers"></xref>. <vspace
              blankLines="1" />The value '0' has a special meaning for 'all
              protocols'. <vspace blankLines="1" />This is an optional
              attribute.</t>

              <t hangText="target-fqdn: ">A list of Fully Qualified Domain
              Names (FQDNs) identifying resources under attack. An FQDN is the
              full name of a resource, rather than just its hostname. For
              example, "venera" is a hostname, and "venera.isi.edu" is an FQDN
              <xref target="RFC1983"></xref>. <vspace blankLines="1" />How a
              name is passed to an underlying name resolution library is
              implementation- and deployment-specific. Nevertheless, once the
              name is resolved into one or multiple IP addresses, DOTS servers
              MUST apply the same validation checks as those for
              'target-prefix'.<vspace blankLines="1" />This is an optional
              attribute.</t>

              <t hangText="target-uri: ">A list of Uniform Resource
              Identifiers (URIs) <xref target="RFC3986"></xref> identifying
              resources under attack. <vspace blankLines="1" />The same
              validation checks used for 'target-fqdn' MUST be followed by
              DOTS servers to validate a target URI. <vspace
              blankLines="1" />This is an optional attribute.</t>

              <t hangText="alias-name:">A list of aliases of resources for
              which the mitigation is requested. Aliases can be created using
              the DOTS data channel (Section 6.1 of <xref
              target="I-D.ietf-dots-data-channel"></xref>), direct
              configuration, or other means. <vspace blankLines="1" />An alias
              is used in subsequent signal channel exchanges to refer more
              efficiently to the resources under attack.<vspace
              blankLines="1" />This is an optional attribute.</t>

              <t hangText="lifetime: ">Lifetime of the mitigation request in
              seconds. The RECOMMENDED lifetime of a mitigation request is
              3600 seconds -- this value was chosen to be long enough so that
              refreshing is not typically a burden on the DOTS client, while
              expiring the request where the client has unexpectedly quit in a
              timely manner. DOTS clients MUST include this parameter in their
              mitigation requests. Upon the expiry of this lifetime, and if
              the request is not refreshed, the mitigation request is removed.
              The request can be refreshed by sending the same request again.
              <vspace blankLines="1" />A lifetime of '0' in a mitigation
              request is an invalid value. <vspace blankLines="1" />A lifetime
              of negative one (-1) indicates indefinite lifetime for the
              mitigation request. The DOTS server MAY refuse indefinite
              lifetime, for policy reasons; the granted lifetime value is
              returned in the response. DOTS clients MUST be prepared to not
              be granted mitigations with indefinite lifetimes.<vspace
              blankLines="1" />The DOTS server MUST always indicate the actual
              lifetime in the response and the remaining lifetime in status
              messages sent to the DOTS client. <vspace blankLines="1" />This
              is a mandatory attribute.</t>

              <t hangText="trigger-mitigation: ">If the parameter value is set
              to 'false', DDoS mitigation will not be triggered for the
              mitigation request unless the DOTS signal channel session is
              lost. <vspace blankLines="1" />If the DOTS client ceases to
              respond to heartbeat messages, the DOTS server can detect that
              the DOTS session is lost. <vspace blankLines="1" />The default
              value of the parameter is 'true' (that is, the mitigation starts
              immediately). If 'trigger-mitigation' is not present in a
              request, this is equivalent to receiving a request with
              'trigger-mitigation' set to 'true'. <vspace
              blankLines="1" />This is an optional attribute.</t>
            </list></t>

          <t>In deployments where server-domain DOTS gateways are enabled,
          identity information about the origin source client domain SHOULD be
          supplied to the DOTS server. That information is meant to assist the
          DOTS server to enforce some policies such as correlating DOTS
          clients that belong to the same DOTS domain, limiting the number of
          DOTS requests, and identifying the mitigation scope. These policies
          can be enforced per-client, per-client domain, or both. Also, the
          identity information may be used for auditing and debugging
          purposes.</t>

          <t><xref target="Figure1a"></xref> shows an example of a request
          relayed by a server-domain DOTS gateway.</t>

          <t><figure anchor="Figure1a"
              title="PUT to Convey DOTS Mitigation Request as relayed by a Server-Domain DOTS Gateway">
              <artwork align="left"><![CDATA[  Header: PUT (Code=0.03)
  Uri-Path: ".well-known"
  Uri-Path: "dots"
  Uri-Path: "v1.0"
  Uri-Path: "mitigate"
  Uri-Path: "cdid=7eeaf349529eb55ed50113"
  Uri-Path: "cuid=dz6pHjaADkaFTbjr0JGBpw"
  Uri-Path: "mid=123"
  Content-Type: "application/cbor"
  {
    "ietf-dots-signal-channel:mitigation-scope": {
      "scope": [
        {
          "target-prefix": [
             "string"
           ],
          "target-port-range": [
             {
               "lower-port": integer,
               "upper-port": integer
             }
           ],     
           "target-protocol": [
             integer
           ],
           "target-fqdn": [
             "string"
           ],
           "target-uri": [
             "string"
           ],
           "alias-name": [
             "string"
           ],
          "lifetime": integer
        }
      ]
    }
  }
]]></artwork>
            </figure></t>

          <t>A server-domain DOTS gateway SHOULD add the following Uri-Path
          parameter:</t>

          <t><list style="hanging">
              <t hangText="cdid:">Stands for Client Domain Identifier. The
              'cdid' is conveyed by a server-domain DOTS gateway to propagate
              the source domain identity from the gateway's client-facing-side
              to the gateway's server-facing-side, and from the gateway's
              server-facing-side to the DOTS server. 'cdid' may be used by the
              final DOTS server for policy enforcement purposes (e.g., enforce
              a quota on filtering rules). These policies are
              deployment-specific. <vspace blankLines="1" />Server-domain DOTS
              gateways SHOULD support a configuration option to instruct
              whether 'cdid' parameter is to be inserted. <vspace
              blankLines="1" />In order to accommodate deployments that
              require enforcing per-client policies, per-client domain
              policies, or a combination thereof, server-domain DOTS gateways
              MUST supply the SPKI hash of the DOTS client X.509 certificate,
              the DOTS client raw public key, or the hash of the "PSK
              identity" in the 'cdid', following the same rules for generating
              the hash conveyed in 'cuid', which is then used by the ultimate
              DOTS server to determine the corresponding client's domain. The
              'cdid' generated by a server-domain gateway is likely to be the
              same as the 'cuid' except if the DOTS message was relayed by a
              DOTS gateway or was generated from a rogue DOTS client.<vspace
              blankLines="1" />If a DOTS client is provisioned, for example,
              with distinct certificates as a function of the peer
              server-domain DOTS gateway, distinct 'cdid' values may be
              supplied by a server-domain DOTS gateway. The ultimate DOTS
              server MUST treat those 'cdid' values as equivalent. <vspace
              blankLines="1" />The 'cdid' attribute MUST NOT be generated and
              included by DOTS clients. <vspace blankLines="1" />DOTS servers
              MUST ignore 'cdid' attributes that are directly supplied by
              source DOTS clients or client-domain DOTS gateways. This implies
              that first server-domain DOTS gateways MUST strip 'cdid'
              attributes supplied by DOTS clients. DOTS servers SHOULD support
              a configuration parameter to identify DOTS gateways that are
              trusted to supply 'cdid' attributes.<vspace
              blankLines="1" />Only single-valued 'cdid' are defined in this
              document.<vspace blankLines="1" />This is an optional Uri-Path.
              When present, 'cdid' MUST be positioned before 'cuid'.</t>
            </list></t>

          <t>A DOTS gateway MAY add the CoAP Hop-Limit Option <xref
          target="I-D.boucadair-core-hop-limit"></xref>.</t>

          <t>Because of the complexity to handle partial failure cases, this
          specification does not allow for including multiple mitigation
          requests in the same PUT request. Concretely, a DOTS client MUST NOT
          include multiple 'scope' parameters in the same PUT request.</t>

          <t>FQDN and URI mitigation scopes may be thought of as a form of
          scope alias, in which the addresses associated with the domain name
          or URI represent the full scope of the mitigation.</t>

          <t>In the PUT request at least one of the attributes
          'target-prefix', 'target-fqdn','target-uri', or 'alias-name' MUST be
          present.</t>

          <t>Attributes and Uri-Path parameters with empty values MUST NOT be
          present in a request.</t>

          <t><xref target="Figure2"></xref> shows a PUT request example to
          signal that ports 80, 8080, and 443 used by 2001:db8:6401::1 and
          2001:db8:6401::2 servers are under attack (illustrated in JSON
          diagnostic notation). The presence of 'cdid' indicates that a
          server-domain DOTS gateway has modified the initial PUT request sent
          by the DOTS client. Note that 'cdid' MUST NOT appear in the PUT
          request message body.</t>

          <t><figure anchor="Figure2" title="PUT for DOTS Mitigation Request">
              <artwork align="left"><![CDATA[  Header: PUT (Code=0.03)
  Uri-Path: ".well-known"
  Uri-Path: "dots"
  Uri-Path: "v1.0"
  Uri-Path: "mitigate"
  Uri-Path: "cdid=7eeaf349529eb55ed50113"
  Uri-Path: "cuid=dz6pHjaADkaFTbjr0JGBpw"
  Uri-Path: "mid=123"
  Content-Format: "application/cbor"
  {
    "ietf-dots-signal-channel:mitigation-scope": {
      "scope": [
        {
          "target-prefix": [
             "2001:db8:6401::1/128",
             "2001:db8:6401::2/128"
           ],
          "target-port-range": [
            { 
              "lower-port": 80
            },
            { 
              "lower-port": 443 
            },
            { 
               "lower-port": 8080
            }
           ],     
           "target-protocol": [
             6
           ],
          "lifetime": 3600
        }
      ]
    }
  }
]]></artwork>
            </figure></t>

          <t>The corresponding CBOR encoding format is shown in <xref
          target="Figure2a"></xref>.</t>

          <t><figure anchor="Figure2a"
              title="PUT for DOTS Mitigation Request (CBOR)">
              <artwork align="left"><![CDATA[A1                                      # map(1)
   01                                   # unsigned(1)
   A1                                   # map(1)
      02                                # unsigned(2)
      81                                # array(1)
         A3                             # map(3)
            06                          # unsigned(6)
            82                          # array(2)
               74                       # text(20)
                  323030313A6462383A363430313A3A312F313238
               74                       # text(20)
                  323030313A6462383A363430313A3A322F313238
            07                          # unsigned(7)
            83                          # array(3)
               A1                       # map(1)
                  08                    # unsigned(8)
                  18 50                 # unsigned(80)
               A1                       # map(1)
                  08                    # unsigned(8)
                  19 01BB               # unsigned(443)
               A1                       # map(1)
                  08                    # unsigned(8)
                  19 1F90               # unsigned(8080)
            0A                          # unsigned(10)
            81                          # array(1)
               06                       # unsigned(6)
            0E                          # unsigned(14)
               19 0E10                  # unsigned(3600)
]]></artwork>
            </figure></t>

          <t>In both DOTS signal and data channel sessions, the DOTS client
          MUST authenticate itself to the DOTS server (<xref
          target="mutauth"></xref>). The DOTS server MAY use the algorithm
          presented in Section 7 of <xref target="RFC7589"></xref> to derive
          the DOTS client identity or username from the client certificate.
          The DOTS client identity allows the DOTS server to accept mitigation
          requests with scopes that the DOTS client is authorized to
          manage.</t>

          <t>The DOTS server couples the DOTS signal and data channel sessions
          using the DOTS client identity and optionally the 'cdid' parameter
          value, so the DOTS server can validate whether the aliases conveyed
          in the mitigation request were indeed created by the same DOTS
          client using the DOTS data channel session. If the aliases were not
          created by the DOTS client, the DOTS server MUST return 4.00 (Bad
          Request) in the response.</t>

          <t>The DOTS server couples the DOTS signal channel sessions using
          the DOTS client identity and optionally the 'cdid' parameter value,
          and the DOTS server uses 'mid' and 'cuid' Uri-Path parameter values
          to detect duplicate mitigation requests. If the mitigation request
          contains the 'alias-name' and other parameters identifying the
          target resources (such as 'target-prefix', 'target-port-range',
          'target-fqdn', or 'target-uri'), the DOTS server appends the
          parameter values in 'alias-name' with the corresponding parameter
          values in 'target-prefix', 'target-port-range', 'target-fqdn', or
          'target-uri'.</t>

          <t>The DOTS server indicates the result of processing the PUT
          request using CoAP response codes. CoAP 2.xx codes are success. CoAP
          4.xx codes are some sort of invalid requests (client errors). COAP
          5.xx codes are returned if the DOTS server has erred or is currently
          unavailable to provide mitigation in response to the mitigation
          request from the DOTS client.</t>

          <t><xref target="put_response"></xref> shows an example response to
          a PUT request that is successfully processed by a DOTS server (i.e.,
          CoAP 2.xx response codes). This version of the specification forbids
          'cuid' and 'cdid' (if used) to be returned in a response message
          body.</t>

          <t><figure anchor="put_response" title="2.xx Response Body">
              <artwork align="left"><![CDATA[{
  "ietf-dots-signal-channel:mitigation-scope": {
     "scope": [
        {
          "mid": 12332,
          "lifetime": 3600
        }
      ]
   }
}]]></artwork>
            </figure></t>

          <t>If the request is missing a mandatory attribute, does not include
          'cuid' or 'mid' Uri-Path options, includes multiple 'scope'
          parameters, or contains invalid or unknown parameters, the DOTS
          server MUST reply with 4.00 (Bad Request). DOTS agents can safely
          ignore Vendor-Specific parameters they don't understand.</t>

          <t>A DOTS server that receives a mitigation request with a lifetime
          set to '0' MUST reply with a 4.00 (Bad Request).</t>

          <t>If the DOTS server does not find the 'mid' parameter value
          conveyed in the PUT request in its configuration data, it MAY accept
          the mitigation request by sending back a 2.01 (Created) response to
          the DOTS client; the DOTS server will consequently try to mitigate
          the attack.</t>

          <t>If the DOTS server finds the 'mid' parameter value conveyed in
          the PUT request in its configuration data bound to that DOTS client,
          it MAY update the mitigation request, and a 2.04 (Changed) response
          is returned to indicate a successful update of the mitigation
          request.</t>

          <t>The relative order of two mitigation requests, having the same
          'trigger-mitigation' type, from a DOTS client is determined by
          comparing their respective 'mid' values. If two mitigation requests
          with the same 'trigger-mitigation' type have overlapping mitigation
          scopes, the mitigation request with the highest numeric 'mid' value
          will override the other mitigation request. Two mitigation requests
          from a DOTS client have overlapping scopes if there is a common IP
          address, IP prefix, FQDN, URI, or alias-name. To avoid maintaining a
          long list of overlapping mitigation requests (i.e., requests with
          the same 'trigger-mitigation' type and overlapping scopes) from a
          DOTS client and avoid error-prone provisioning of mitigation
          requests from a DOTS client, the overlapped lower numeric 'mid' MUST
          be automatically deleted and no longer available at the DOTS server.
          For example, if the DOTS server receives a mitigation request which
          overlaps with an existing mitigation with a higher numeric 'mid',
          the DOTS server rejects the request by returning 4.09 (Conflict) to
          the DOTS client. The response includes enough information for a DOTS
          client to recognize the source of the conflict as described
          below:</t>

          <t hangText="status:"><list style="hanging">
              <t hangText="conflict-information:">Indicates that a mitigation
              request is conflicting with another mitigation request. This
              optional attribute has the following structure: <list
                  style="hanging">
                  <t hangText="conflict-cause:">Indicates the cause of the
                  conflict. The following values are defined:<list
                      style="format %d:">
                      <t>Overlapping targets. 'conflict-scope' provides more
                      details about the conflicting target clauses.</t>
                    </list></t>

                  <t hangText="conflict-scope:">Indicates the conflict scope.
                  It may include a list of IP addresses, a list of prefixes, a
                  list of port numbers, a list of target protocols, a list of
                  FQDNs, a list of URIs, a list of alias-names, or a
                  'mid'.</t>
                </list></t>
            </list></t>

          <t>If the DOTS server receives a mitigation request which overlaps
          with an active mitigation request, but both having distinct
          'trigger-mitigation' types, the DOTS server MUST deactivate (absent
          explicit policy/configuration otherwise) the mitigation request with
          'trigger-mitigation' set to false. Particularly, if the mitigation
          request with 'trigger-mitigation' set to false is active, the DOTS
          server withdraws the mitigation request (i.e., status code is set to
          '7' as defined in <xref target="status"></xref>) and transitions the
          status of the mitigation request to '8'.</t>

          <t>Upon DOTS signal channel session loss with a peer DOTS client,
          the DOTS server MUST withdraw (absent explicit policy/configuration
          otherwise) any active mitigation requests overlapping with
          mitigation requests having 'trigger-mitigation' set to false from
          that DOTS client. Note that active-but-terminating period is not
          observed for mitigations withdrawn at the initiative of the DOTS
          server.</t>

          <t>DOTS clients may adopt various strategies for setting the scopes
          of immediate and pre-configured mitigation requests to avoid
          potential conflicts. For example, a DOTS client may tweak
          pre-configured scopes so that the scope of any overlapping immediate
          mitigation request will be a subset of the pre-configured scopes.
          Also, if an immediate mitigation request overlaps with any of the
          pre-configured scopes, the DOTS client sets the scope of the
          overlapping immediate mitigation request to be a subset of the
          pre-configured scopes.</t>

          <t>If the request is conflicting with an existing mitigation request
          from a different DOTS client, the DOTS server may return 2.01
          (Created) or 4.09 (Conflict) to the requesting DOTS client. If the
          DOTS server decides to maintain the new mitigation request, the DOTS
          server returns 2.01 (Created) to the requesting DOTS client. If the
          DOTS server decides to reject the new mitigation request, the DOTS
          server returns 4.09 (Conflict) to the requesting DOTS client. For
          both 2.01 (Created) and 4.09 (Conflict) responses, the response
          includes enough information for a DOTS client to recognize the
          source of the conflict as described below:</t>

          <t hangText="status:"><list style="hanging">
              <t hangText="conflict-information:">Indicates that a mitigation
              request is conflicting with another mitigation request(s) from
              other DOTS client(s). This optional attribute has the following
              structure: <list style="hanging">
                  <t hangText="conflict-status:">Indicates the status of a
                  conflicting mitigation request. The following values are
                  defined:<list style="format %d:">
                      <t>DOTS server has detected conflicting mitigation
                      requests from different DOTS clients. This mitigation
                      request is currently inactive until the conflicts are
                      resolved. Another mitigation request is active.</t>

                      <t>DOTS server has detected conflicting mitigation
                      requests from different DOTS clients. This mitigation
                      request is currently active.</t>

                      <t>DOTS server has detected conflicting mitigation
                      requests from different DOTS clients. All conflicting
                      mitigation requests are inactive.</t>
                    </list></t>

                  <t hangText="conflict-cause:">Indicates the cause of the
                  conflict. The following values are defined:<list
                      style="format %d:">
                      <t>Overlapping targets. 'conflict-scope' provides more
                      details about the conflicting target clauses.</t>

                      <t>Conflicts with an existing white list. This code is
                      returned when the DDoS mitigation detects source
                      addresses/prefixes in the white-listed ACLs are
                      attacking the target.</t>

                      <t>CUID Collision. This code is returned when a DOTS
                      client uses a 'cuid' that is already used by another
                      DOTS client. This code is an indication that the request
                      has been rejected and a new request with a new 'cuid' is
                      to be re-sent by the DOTS client. Note that
                      'conflict-status', 'conflict-scope', and 'retry-timer'
                      are not returned in the error response.</t>
                    </list></t>

                  <t hangText="conflict-scope:">Indicates the conflict scope.
                  It may include a list of IP addresses, a list of prefixes, a
                  list of port numbers, a list of target protocols, a list of
                  FQDNs, a list of URIs, a list of alias-names, or references
                  to conflicting ACLs.</t>

                  <t hangText="retry-timer:">Indicates, in seconds, the time
                  after which the DOTS client may re-issue the same request.
                  The DOTS server returns 'retry-timer' only to DOTS client(s)
                  for which a mitigation request is deactivated. Any
                  retransmission of the same mitigation request before the
                  expiry of this timer is likely to be rejected by the DOTS
                  server for the same reasons.<vspace blankLines="1" />The
                  retry-timer SHOULD be equal to the lifetime of the active
                  mitigation request resulting in the deactivation of the
                  conflicting mitigation request. The lifetime of the
                  deactivated mitigation request will be updated to
                  (retry-timer + 45 seconds), so the DOTS client can refresh
                  the deactivated mitigation request after retry-timer seconds
                  before expiry of lifetime and check if the conflict is
                  resolved.</t>
                </list></t>
            </list></t>

          <t hangText="conflict-information:">As an active attack evolves,
          DOTS clients can adjust the scope of requested mitigation as
          necessary, by refining the scope of resources requiring mitigation.
          This can be achieved by sending a PUT request with a new 'mid' value
          that will override the existing one with overlapping mitigation
          scopes.</t>

          <t hangText="conflict-information:">For a mitigation request to
          continue beyond the initial negotiated lifetime, the DOTS client has
          to refresh the current mitigation request by sending a new PUT
          request. This PUT request MUST use the same 'mid' value, and MUST
          repeat all the other parameters as sent in the original mitigation
          request apart from a possible change to the lifetime parameter
          value.</t>
        </section>

        <section anchor="get"
                 title="Retrieve Information Related to a Mitigation">
          <t>A GET request is used by a DOTS client to retrieve information
          (including status) of DOTS mitigations from a DOTS server.</t>

          <t>'cuid' is a mandatory Uri-Path parameter for GET requests.</t>

          <t>Uri-Path parameters with empty values MUST NOT be present in a
          request.</t>

          <t>The same considerations for manipulating 'cdid' parameter by
          server-domain DOTS gateways specified in <xref target="post"></xref>
          MUST be followed for GET requests.</t>

          <t>The 'c' (content) parameter and its permitted values defined in
          <xref target="I-D.ietf-core-comi"></xref> can be used to retrieve
          non-configuration data (attack mitigation status), configuration
          data, or both. The DOTS server MAY support this optional filtering
          capability. It can safely ignore it if not supported. If the DOTS
          client supports the optional filtering capability, it SHOULD use
          &ldquo;c=n&rdquo; query (to get back only the dynamically changing
          data) or &ldquo;c=c&rdquo; query (to get back the static
          configuration values) when the DDoS attack is active to limit the
          size of the response.</t>

          <t>The DOTS client can use Block-wise transfer <xref
          target="RFC7959"></xref> to get the list of all its mitigations
          maintained by a DOTS server, it can send Block2 Option in a GET
          request with NUM = 0 to aid in limiting the size of the response. If
          the representation of all the active mitigation requests associated
          with the DOTS client does not fit within a single datagram, the DOTS
          server MUST use the Block2 Option with NUM = 0 in the GET response.
          The Size2 Option may be conveyed in the response to indicate the
          total size of the resource representation. The DOTS client retrieves
          the rest of the representation by sending additional GET requests
          with Block2 Options containing NUM values greater than zero. The
          DOTS client MUST adhere to the block size preferences indicated by
          the DOTS server in the response. If the DOTS server uses the Block2
          Option in the GET response and the response is for a dynamically
          changing resource (e.g. &ldquo;c=n&rdquo; or &ldquo;c=a&rdquo;
          query), the DOTS server MUST include the ETag Option in the
          response. The DOTS client MUST include the same ETag value in
          subsequent GET requests to retrieve the rest of the representation.
          </t>

          <t>The following examples illustrate how a DOTS client retrieves
          active mitigation requests from a DOTS server. In particular: <list
              style="symbols">
              <t><xref target="Figure4"></xref> shows the example of a GET
              request to retrieve all DOTS mitigation requests signaled by a
              DOTS client.</t>

              <t><xref target="Figure4a"></xref> shows the example of a GET
              request to retrieve a specific DOTS mitigation request signaled
              by a DOTS client. The configuration data to be reported in the
              response is formatted in the same order as was processed by the
              DOTS server in the original mitigation request.</t>
            </list>These two examples assume the default of "c=a"; that is,
          the DOTS client asks for all data to be reported by the DOTS
          server.</t>

          <figure anchor="Figure4"
                  title="GET to Retrieve all DOTS Mitigation Requests">
            <artwork align="left"><![CDATA[  Header: GET (Code=0.01)
  Uri-Path: ".well-known"
  Uri-Path: "dots"
  Uri-Path: "v1.0"
  Uri-Path: "mitigate"
  Uri-Path: "cuid=dz6pHjaADkaFTbjr0JGBpw"
  Observe: 0]]></artwork>
          </figure>

          <t><figure anchor="Figure4a"
              title="GET to Retrieve a Specific DOTS Mitigation Request">
              <artwork align="left"><![CDATA[  Header: GET (Code=0.01)
  Uri-Path: ".well-known"
  Uri-Path: "dots"
  Uri-Path: "v1.0"
  Uri-Path: "mitigate"
  Uri-Path: "cuid=dz6pHjaADkaFTbjr0JGBpw"
  Uri-Path: "mid=12332"
  Observe: 0
]]></artwork>
            </figure></t>

          <t>If the DOTS server does not find the 'mid' Uri-Path value
          conveyed in the GET request in its configuration data for the
          requesting DOTS client, it MUST respond with a 4.04 (Not Found)
          error response code. Likewise, the same error MUST be returned as a
          response to a request to retrieve all mitigation records (i.e.,
          'mid' Uri-Path is not defined) of a given DOTS client if the DOTS
          server does not find any mitigation record for that DOTS client. As
          a reminder, a DOTS client is identified by its identity (e.g.,
          client certificate, 'cuid') and optionally the 'cdid'.</t>

          <t><xref target="Figure5"></xref> shows a response example of all
          active mitigation requests associated with the DOTS client as
          maintained by the DOTS server. The response indicates the mitigation
          status of each mitigation request.</t>

          <t><figure anchor="Figure5" title="Response Body to a GET Request">
              <artwork align="left"><![CDATA[{
  "ietf-dots-signal-channel:mitigation-scope": {
    "scope": [
      {
        "mid": 12332,
        "mitigation-start": "1507818434",
        "target-prefix": [
             "2001:db8:6401::1/128",
             "2001:db8:6401::2/128"
        ],
        "target-protocol": [
          17
        ],
        "lifetime": 1800,
        "status": "attack-successfully-mitigated",
        "bytes-dropped": "134334555",
        "bps-dropped": "43344",
        "pkts-dropped": "333334444",
        "pps-dropped": "432432"
      },
      {
        "mid": 12333,
        "mitigation-start": "1507818393",
        "target-prefix": [
             "2001:db8:6401::1/128",
             "2001:db8:6401::2/128"
        ],
        "target-protocol": [
          6
        ],
        "lifetime": 1800,
        "status": "attack-stopped",
        "bytes-dropped": "0",
        "bps-dropped": "0",
        "pkts-dropped": "0",
        "pps-dropped": "0"
      }
    ]
  }
}]]></artwork>
            </figure></t>

          <t>The mitigation status parameters are described below:</t>

          <t><list style="hanging">
              <t hangText="mitigation-start:">Mitigation start time is
              expressed in seconds relative to 1970-01-01T00:00Z in UTC time
              (Section 2.4.1 of <xref target="RFC7049"></xref>). The CBOR
              encoding is modified so that the leading tag 1 (epoch-based
              date/time) MUST be omitted.<vspace blankLines="1" />This is a
              mandatory attribute when an attack mitigation is triggered.
              Particularly, 'mitigation-start' is not returned for a
              mitigation with 'status' code set to 8.</t>

              <t hangText="lifetime:">The remaining lifetime of the mitigation
              request, in seconds.<vspace blankLines="1" />This is a mandatory
              attribute.</t>

              <t hangText="status:">Status of attack mitigation. The various
              possible values of 'status' parameter are explained in <xref
              target="status"></xref>.<vspace blankLines="1" />This is a
              mandatory attribute.</t>

              <t hangText="bytes-dropped:">The total dropped byte count for
              the mitigation request since the attack mitigation is triggered.
              The count wraps around when it reaches the maximum value of
              unsigned integer64. <vspace blankLines="1" />This is an optional
              attribute.</t>

              <t hangText="bps-dropped:">The average number of dropped bytes
              per second for the mitigation request since the attack
              mitigation is triggered. This SHOULD be a five-minute average.
              <vspace blankLines="1" />This is an optional attribute.</t>

              <t hangText="pkts-dropped:">The total number of dropped packet
              count for the mitigation request since the attack mitigation is
              triggered. The count wraps around when it reaches the maximum
              value of unsigned integer64.<vspace blankLines="1" />This is an
              optional attribute.</t>

              <t hangText="pps-dropped:">The average number of dropped packets
              per second for the mitigation request since the attack
              mitigation is triggered. This SHOULD be a five-minute average.
              <vspace blankLines="1" />This is an optional attribute.</t>
            </list></t>

          <t></t>

          <texttable anchor="status" style="all"
                     title=" Values of 'status' Parameter">
            <ttcol align="right">Parameter Value</ttcol>

            <ttcol align="left">Description</ttcol>

            <c>1</c>

            <c>Attack mitigation setup is in progress (e.g., changing the
            network path to redirect the inbound traffic to a DOTS
            mitigator).</c>

            <c>2</c>

            <c>Attack is being successfully mitigated (e.g., traffic is
            redirected to a DDoS mitigator and attack traffic is dropped).</c>

            <c>3</c>

            <c>Attack has stopped and the DOTS client can withdraw the
            mitigation request. This status code will be transmitted for
            immediate mitigation requests till the mitigation is withdrawn or
            the lifetime expires. For mitigation requests with pre-configured
            scopes (i.e., 'trigger-mitigation' set to 'false'), this status
            code will be transmitted 4 times and then transition to "8".</c>

            <c>4</c>

            <c>Attack has exceeded the mitigation provider capability.</c>

            <c>5</c>

            <c>DOTS client has withdrawn the mitigation request and the
            mitigation is active but terminating.</c>

            <c>6</c>

            <c>Attack mitigation is now terminated.</c>

            <c>7</c>

            <c>Attack mitigation is withdrawn. If a mitigation request with
            'trigger-mitigation' set to false is withdrawn because it overlaps
            with an immediate mitigation request, this status code will be
            transmitted 4 times and then transition to "8" for the mitigation
            request with pre-configured scopes.</c>

            <c>8</c>

            <c>Attack mitigation will be triggered for the mitigation request
            only when the DOTS signal channel session is lost.</c>
          </texttable>

          <t></t>

          <section title="DOTS Servers Sending Mitigation Status">
            <t>The Observe Option defined in <xref target="RFC7641"></xref>
            extends the CoAP core protocol with a mechanism for a CoAP client
            to "observe" a resource on a CoAP server: The client retrieves a
            representation of the resource and requests this representation be
            updated by the server as long as the client is interested in the
            resource. DOTS implementations MUST use the Observe Option for
            both 'mitigate' and 'config' (<xref
            target="uri-path"></xref>).</t>

            <t>A DOTS client conveys the Observe Option set to '0' in the GET
            request to receive asynchronous notifications of attack mitigation
            status from the DOTS server.</t>

            <t>Unidirectional mitigation notifications within the
            bidirectional signal channel enables asynchronous notifications
            between the agents. <xref target="RFC7641"></xref> indicates that
            (1) a notification can be sent in a Confirmable (CON) or a
            Non-confirmable (NON) message, and (2) the message type used is
            typically application dependent and may be determined by the
            server for each notification individually. For DOTS server
            application, the message type MUST always be set to
            Non-confirmable even if the underlying COAP library elects a
            notification to be sent in a Confirmable message.</t>

            <t>Due to the higher likelihood of packet loss during a DDoS
            attack, the DOTS server periodically sends attack mitigation
            status to the DOTS client and also notifies the DOTS client
            whenever the status of the attack mitigation changes. If the DOTS
            server cannot maintain an RTT estimate, it SHOULD NOT send more
            than one asynchronous notification every 3 seconds, and SHOULD use
            an even less aggressive rate whenever possible (case 2 in Section
            3.1.3 of <xref target="RFC8085"></xref>).</t>

            <t><!--The DOTS server MUST use the same CUID as the one used by the DOTS client to observe a mitigation request.-->When
            conflicting requests are detected, the DOTS server enforces the
            corresponding policy (e.g., accept all requests, reject all
            requests, accept only one request but reject all the others, ...).
            It is assumed that this policy is supplied by the DOTS server
            administrator or it is a default behavior of the DOTS server
            implementation. Then, the DOTS server sends notification
            message(s) to the DOTS client(s) at the origin of the conflict
            (refer to the conflict parameters defined in <xref
            target="post"></xref>). A conflict notification message includes
            information about the conflict cause, scope, and the status of the
            mitigation request(s). For example,<list style="symbols">
                <t>A notification message with 'status' code set to '7 (Attack
                mitigation is withdrawn)' and 'conflict-status' set to '1' is
                sent to a DOTS client to indicate that an active mitigation
                request is deactivated because a conflict is detected.</t>

                <t>A notification message with 'status' code set to '1 (Attack
                mitigation is in progress)' and 'conflict-status' set to '2'
                is sent to a DOTS client to indicate that this mitigation
                request is in progress, but a conflict is detected.</t>
              </list></t>

            <t>Upon receipt of a conflict notification message indicating that
            a mitigation request is deactivated because of a conflict, a DOTS
            client MUST NOT resend the same mitigation request before the
            expiry of 'retry-timer'. It is also recommended that DOTS clients
            support means to alert administrators about mitigation
            conflicts.</t>

            <t>A DOTS client that is no longer interested in receiving
            notifications from the DOTS server can simply "forget" the
            observation. When the DOTS server sends the next notification, the
            DOTS client will not recognize the token in the message and thus
            will return a Reset message. This causes the DOTS server to remove
            the associated entry. Alternatively, the DOTS client can
            explicitly deregister itself by issuing a GET request that has the
            Token field set to the token of the observation to be cancelled
            and includes an Observe Option with the value set to '1'
            (deregister).</t>

            <t><xref target="Figure6"></xref> shows an example of a DOTS
            client requesting a DOTS server to send notifications related to a
            mitigation request. Note that for mitigations with pre-configured
            scopes (i.e., 'trigger-mitigation' set to 'false'), the state will
            need to transition from 3 (attack-stopped) to 8
            (attack-mitigation-signal-loss).</t>

            <t><figure anchor="Figure6"
                title="Notifications of Attack Mitigation Status">
                <artwork align="center"><![CDATA[+-----------+                              +-----------+
|DOTS client|                              |DOTS server|
+-----------+                              +-----------+
      |                                          |
      |  GET /<mid>                              |
      |  Token: 0x4a                             | Registration
      |  Observe: 0                              |
      +----------------------------------------->|
      |                                          |
      |  2.05 Content                            |
      |  Token: 0x4a                             | Notification of 
      |  Observe: 12                             | the current state
      |  status: "attack-mitigation-in-progress" |  
      |                                          |
      |<-----------------------------------------+
      |  2.05 Content                            |
      |  Token: 0x4a                             | Notification upon
      |  Observe: 44                             | a state change
      |  status: "attack-successfully-mitigated" |  
      |                                          |
      |<-----------------------------------------+
      |  2.05 Content                            |
      |  Token: 0x4a                             | Notification upon
      |  Observe: 60                             | a state change
      |  status: "attack-stopped"                |  
      |<-----------------------------------------+
      |                                          |
                         ...     ]]></artwork>
              </figure></t>
          </section>

          <section title="DOTS Clients Polling for Mitigation Status">
            <t>The DOTS client can send the GET request at frequent intervals
            without the Observe Option to retrieve the configuration data of
            the mitigation request and non-configuration data (i.e., the
            attack status). The frequency of polling the DOTS server to get
            the mitigation status SHOULD follow the transmission guidelines in
            Section 3.1.3 of <xref target="RFC8085"></xref>.</t>

            <t>If the DOTS server has been able to mitigate the attack and the
            attack has stopped, the DOTS server indicates as such in the
            status. In such case, the DOTS client recalls the mitigation
            request by issuing a DELETE request for this mitigation request
            (<xref target="del"></xref>).</t>

            <t>A DOTS client SHOULD react to the status of the attack as per
            the information sent by the DOTS server rather than acknowledging
            by itself, using its own means, that the attack has been
            mitigated. This ensures that the DOTS client does not recall a
            mitigation request prematurely because it is possible that the
            DOTS client does not sense the DDoS attack on its resources, but
            the DOTS server could be actively mitigating the attack because
            the attack is not completely averted.</t>
          </section>
        </section>

        <section anchor="put" title="Efficacy Update from DOTS Clients">
          <t>While DDoS mitigation is in progress, due to the likelihood of
          packet loss, a DOTS client MAY periodically transmit DOTS mitigation
          efficacy updates to the relevant DOTS server. A PUT request is used
          to convey the mitigation efficacy update to the DOTS server. This
          PUT request is treated as a refresh of the current mitigation.</t>

          <t>The PUT request used for efficacy update MUST include all the
          parameters used in the PUT request to carry the DOTS mitigation
          request (<xref target="post"></xref>) unchanged apart from the
          'lifetime' parameter value. If this is not the case, the DOTS server
          MUST reject the request with a 4.00 (Bad Request).</t>

          <t>The If-Match Option (Section 5.10.8.1 of <xref
          target="RFC7252"></xref>) with an empty value is used to make the
          PUT request conditional on the current existence of the mitigation
          request. If UDP is used as transport, CoAP requests may arrive
          out-of-order. For example, the DOTS client may send a PUT request to
          convey an efficacy update to the DOTS server followed by a DELETE
          request to withdraw the mitigation request, but the DELETE request
          arrives at the DOTS server before the PUT request. To handle
          out-of-order delivery of requests, if an If-Match Option is present
          in the PUT request and the 'mid' in the request matches a mitigation
          request from that DOTS client, the request is processed by the DOTS
          server. If no match is found, the PUT request is silently ignored by
          the DOTS server.</t>

          <t>An example of an efficacy update message, which includes an
          If-Match Option with an empty value, is depicted in <xref
          target="Figure7"></xref>.</t>

          <figure anchor="Figure7" title="Efficacy Update">
            <artwork align="left"><![CDATA[   Header: PUT (Code=0.03)
   Uri-Path: ".well-known"
   Uri-Path: "dots"
   Uri-Path: "v1.0"
   Uri-Path: "mitigate"
   Uri-Path: "cuid=dz6pHjaADkaFTbjr0JGBpw"
   Uri-Path: "mid=123"
   Content-Format: "application/cbor"
   If-Match: 
   {
    "ietf-dots-signal-channel:mitigation-scope": {
      "scope": [
        {
          "target-prefix": [
             "string"
           ],
          "target-port-range": [
             {
               "lower-port": integer,
               "upper-port": integer
             }
           ],     
           "target-protocol": [
             integer
           ],
           "target-fqdn": [
             "string"
           ],
           "target-uri": [
             "string"
           ],
           "alias-name": [
             "string"
           ],
          "lifetime": integer,
          "attack-status": integer
        }
      ]
    }
   }]]></artwork>
          </figure>

          <t></t>

          <t>The 'attack-status' parameter is a mandatory attribute when
          performing an efficacy update. The various possible values contained
          in the 'attack-status' parameter are described in <xref
          target="astatus"></xref>.</t>

          <texttable anchor="astatus" style="all"
                     title=" Values of 'attack-status' Parameter">
            <ttcol align="right">Parameter value</ttcol>

            <ttcol align="left">Description</ttcol>

            <c>1</c>

            <c>The DOTS client determines that it is still under attack.</c>

            <c>2</c>

            <c>The DOTS client determines that the attack is successfully
            mitigated (e.g., attack traffic is not seen).</c>
          </texttable>

          <t>The DOTS server indicates the result of processing a PUT request
          using CoAP response codes. The response code 2.04 (Changed) is
          returned if the DOTS server has accepted the mitigation efficacy
          update. The error response code 5.03 (Service Unavailable) is
          returned if the DOTS server has erred or is incapable of performing
          the mitigation.</t>
        </section>

        <section anchor="del" title="Withdraw a Mitigation">
          <t>DELETE requests are used to withdraw DOTS mitigation requests
          from DOTS servers (<xref target="Figure3"></xref>).</t>

          <t>'cuid' and 'mid' are mandatory Uri-Path parameters for DELETE
          requests.</t>

          <t>The same considerations for manipulating 'cdid' parameter by DOTS
          gateways, as specified in <xref target="post"></xref>, MUST be
          followed for DELETE requests. Uri-Path parameters with empty values
          MUST NOT be present in a request.</t>

          <figure anchor="Figure3" title="Withdraw a DOTS Mitigation">
            <artwork align="left"><![CDATA[  Header: DELETE (Code=0.04)
  Uri-Path: ".well-known"
  Uri-Path: "dots"
  Uri-Path: "v1.0"
  Uri-Path: "mitigate"
  Uri-Path: "cuid=dz6pHjaADkaFTbjr0JGBpw"
  Uri-Path: "mid=123"
]]></artwork>
          </figure>

          <t>If the DELETE request does not include 'cuid' and 'mid'
          parameters, the DOTS server MUST reply with a 4.00 (Bad
          Request).</t>

          <t>Once the request is validated, the DOTS server immediately
          acknowledges a DOTS client's request to withdraw the DOTS signal
          using 2.02 (Deleted) response code with no response payload. A 2.02
          (Deleted) Response Code is returned even if the 'mid' parameter
          value conveyed in the DELETE request does not exist in its
          configuration data before the request.</t>

          <t>If the DOTS server finds the 'mid' parameter value conveyed in
          the DELETE request in its configuration data for the DOTS client,
          then to protect against route or DNS flapping caused by a DOTS
          client rapidly removing a mitigation, and to dampen the effect of
          oscillating attacks, the DOTS server MAY allow mitigation to
          continue for a limited period after acknowledging a DOTS client's
          withdrawal of a mitigation request. During this period, the DOTS
          server status messages SHOULD indicate that mitigation is active but
          terminating (<xref target="get"></xref>).</t>

          <t>The initial active-but-terminating period SHOULD be sufficiently
          long to absorb latency incurred by route propagation. The
          active-but-terminating period SHOULD be set by default to 120
          seconds. If the client requests mitigation again before the initial
          active-but-terminating period elapses, the DOTS server MAY
          exponentially increase the active-but-terminating period up to a
          maximum of 300 seconds (5 minutes).</t>

          <t>Once the active-but-terminating period elapses, the DOTS server
          MUST treat the mitigation as terminated, as the DOTS client is no
          longer responsible for the mitigation. For example, if there is a
          financial relationship between the DOTS client and server domains,
          the DOTS client stops incurring cost at this point.</t>

          <t>If a mitigation is triggered due to a signal channel loss, the
          DOTS server relies upon normal triggers to stop that mitigation
          (typically, receipt of a valid DELETE request, expiry of the
          mitigation lifetime, or observation of traffic to the attack
          target). In particular, the DOTS server MUST NOT consider the signal
          channel recovery as a trigger to stop the mitigation.</t>
        </section>
      </section>

      <section anchor="sigconfig"
               title="DOTS Signal Channel Session Configuration">
        <t>A DOTS client can negotiate, configure, and retrieve the DOTS
        signal channel session behavior with its DOTS peers. The DOTS signal
        channel can be used, for example, to configure the following:<list
            style="letters">
            <t>Heartbeat interval (heartbeat-interval): DOTS agents regularly
            send heartbeats (CoAP Ping/Pong) to each other after mutual
            authentication is successfully completed in order to keep the DOTS
            signal channel open. Heartbeat messages are exchanged between DOTS
            agents every 'heartbeat-interval' seconds to detect the current
            status of the DOTS signal channel session.</t>

            <t>Missing heartbeats allowed (missing-hb-allowed): This variable
            indicates the maximum number of consecutive heartbeat messages for
            which a DOTS agent did not receive a response before concluding
            that the session is disconnected or defunct.</t>

            <t>Acceptable signal loss ratio: Maximum retransmissions,
            retransmission timeout value, and other message transmission
            parameters for the DOTS signal channel.</t>
          </list></t>

        <t>The same or distinct configuration sets may be used during times
        when a mitigation is active ('mitigating-config') and when no
        mitigation is active ('idle-config'). This is particularly useful for
        DOTS servers that might want to reduce heartbeat frequency or cease
        heartbeat exchanges when an active DOTS client has not requested
        mitigation. If distinct configurations are used, DOTS agents MUST
        follow the appropriate configuration set as a function of the
        mitigation activity (e.g., if no mitigation request is active,
        'idle-config'-related values must be followed). Additionally, DOTS
        agents MUST automatically switch to the other configuration upon a
        change in the mitigation activity (e.g., if an attack mitigation is
        launched after a peacetime, the DOTS agent switches from 'idle-config'
        to 'mitigating-config'-related values).</t>

        <t>Requests and responses are deemed reliable by marking them as
        Confirmable messages. DOTS signal channel session configuration
        requests and responses are marked as Confirmable messages. As
        explained in Section 2.1 of <xref target="RFC7252"></xref>, a
        Confirmable message is retransmitted using a default timeout and
        exponential back-off between retransmissions, until the DOTS server
        sends an Acknowledgement message (ACK) with the same Message ID
        conveyed from the DOTS client.</t>

        <t>Message transmission parameters are defined in Section 4.8 of <xref
        target="RFC7252"></xref>. The DOTS server can either piggyback the
        response in the acknowledgement message or, if the DOTS server cannot
        respond immediately to a request carried in a Confirmable message, it
        simply responds with an Empty Acknowledgement message so that the DOTS
        client can stop retransmitting the request. Empty Acknowledgement
        message is explained in Section 2.2 of <xref target="RFC7252"></xref>.
        When the response is ready, the server sends it in a new Confirmable
        message which in turn needs to be acknowledged by the DOTS client (see
        Sections 5.2.1 and 5.2.2 of <xref target="RFC7252"></xref>). Requests
        and responses exchanged between DOTS agents during peacetime are
        marked as Confirmable messages.<list style="empty">
            <t>Implementation Note: A DOTS client that receives a response in
            a CON message may want to clean up the message state right after
            sending the ACK. If that ACK is lost and the DOTS server
            retransmits the CON, the DOTS client may no longer have any state
            that would help it correlate this response: from the DOTS client's
            standpoint, the retransmission message is unexpected. The DOTS
            client will send a Reset message so it does not receive any more
            retransmissions. This behavior is normal and not an indication of
            an error (see Section 5.3.2 of <xref target="RFC7252"></xref> for
            more details).</t>
          </list></t>

        <section anchor="discovery" title="Discover Configuration Parameters">
          <t>A GET request is used to obtain acceptable (e.g., minimum and
          maximum values) and current configuration parameters on the DOTS
          server for DOTS signal channel session configuration. This procedure
          occurs between a DOTS client and its immediate peer DOTS server. As
          such, this GET request MUST NOT be relayed by an on-path DOTS
          gateway.</t>

          <t><xref target="Figure18"></xref> shows how to obtain acceptable
          configuration parameters for the DOTS server.</t>

          <figure anchor="Figure18" title="GET to Retrieve Configuration">
            <artwork align="left"><![CDATA[  Header: GET (Code=0.01)
  Uri-Path: ".well-known"
  Uri-Path: "dots"
  Uri-Path: "v1.0"
  Uri-Path: "config"
]]></artwork>
          </figure>

          <t>The DOTS server in the 2.05 (Content) response conveys the
          current, minimum, and maximum attribute values acceptable by the
          DOTS server (<xref target="Figure19"></xref>).</t>

          <t><figure anchor="Figure19" title="GET Configuration Response Body">
              <artwork align="left"><![CDATA[Content-Format: "application/cbor"
{    
  "ietf-dots-signal-channel:signal-config": {
    "mitigating-config": {
      "heartbeat-interval": {
        "max-value": integer,
        "min-value": integer,
        "current-value": integer
      },
      "missing-hb-allowed": {
        "max-value": integer,
        "min-value": integer,
        "current-value": integer
      },
      "max-retransmit": {
        "max-value": integer,
        "min-value": integer,
        "current-value": integer
      },
      "ack-timeout": {
        "max-value-decimal": number,
        "min-value-decimal": number,
        "current-value-decimal": number
      },
      "ack-random-factor": {
        "max-value-decimal": number,
        "min-value-decimal": number,
        "current-value-decimal": number
      }
    },
    "idle-config": {
      "heartbeat-interval": {
        "max-value": integer,
        "min-value": integer,
        "current-value": integer
      },
      "missing-hb-allowed": {
        "max-value": integer,
        "min-value": integer,
        "current-value": integer
      },
      "max-retransmit": {
        "max-value": integer,
        "min-value": integer,
        "current-value": integer
      },
      "ack-timeout": {
        "max-value-decimal": number,
        "min-value-decimal": number,
        "current-value-decimal": number
      },
      "ack-random-factor": {
        "max-value-decimal": number,
        "min-value-decimal": number,
        "current-value-decimal": number
      }
    }
  }
}]]></artwork>
            </figure></t>

          <t>The parameters in <xref target="Figure19"></xref> are described
          below:</t>

          <t><list style="hanging">
              <t hangText="mitigating-config:">Set of configuration parameters
              to use when a mitigation is active. The following parameters may
              be included: <list style="hanging">
                  <t hangText="heartbeat-interval: ">Time interval in seconds
                  between two consecutive heartbeat messages. <vspace
                  blankLines="1" />'0' is used to disable the heartbeat
                  mechanism. <vspace blankLines="1" />This is an optional
                  attribute.</t>

                  <t hangText="missing-hb-allowed: ">Maximum number of
                  consecutive heartbeat messages for which the DOTS agent did
                  not receive a response before concluding that the session is
                  disconnected. <vspace blankLines="1" />This is an optional
                  attribute.</t>

                  <t hangText="max-retransmit: ">Maximum number of
                  retransmissions for a message (referred to as MAX_RETRANSMIT
                  parameter in CoAP). <vspace blankLines="1" />This is an
                  optional attribute.</t>

                  <t hangText="ack-timeout: ">Timeout value in seconds used to
                  calculate the initial retransmission timeout value (referred
                  to as ACK_TIMEOUT parameter in CoAP). <vspace
                  blankLines="1" />This is an optional attribute.</t>

                  <t hangText="ack-random-factor: ">Random factor used to
                  influence the timing of retransmissions (referred to as
                  ACK_RANDOM_FACTOR parameter in CoAP). <vspace
                  blankLines="1" />This is an optional attribute.</t>
                </list></t>

              <t hangText="idle-config: ">Set of configuration parameters to
              use when no mitigation is active. This attribute has the same
              structure as 'mitigating-config'.</t>
            </list></t>

          <t><xref target="Figure17"></xref> shows an example of acceptable
          and current configuration parameters on a DOTS server for DOTS
          signal channel session configuration. The same acceptable
          configuration is used during attack and peace times.</t>

          <t><figure anchor="Figure17"
              title="Example of a Configuration Response Body">
              <artwork align="left"><![CDATA[Content-Format: "application/cbor"
{
  "ietf-dots-signal-channel:signal-config": {
    "mitigating-config": {
      "heartbeat-interval": {
        "max-value": 240,
        "min-value": 15,
        "current-value": 30
      },
      "missing-hb-allowed": {
        "max-value": 9,
        "min-value": 3,
        "current-value": 5
      },
      "max-retransmit": {
        "max-value": 15,
        "min-value": 2,
        "current-value": 3
      },
      "ack-timeout": {
        "max-value-decimal": "30.0",
        "min-value-decimal": "1.0",
        "current-value-decimal": "2.0"
      },
      "ack-random-factor": {
        "max-value-decimal": "4.0",
        "min-value-decimal": "1.1",
        "current-value-decimal": "1.5"
      }
    },
    "idle-config": {
      "heartbeat-interval": {
        "max-value": 240,
        "min-value": 15,
        "current-value": 30
      },
      "missing-hb-allowed": {
        "max-value": 9,
        "min-value": 3,
        "current-value": 5
      },
      "max-retransmit": {
        "max-value": 15,
        "min-value": 2,
        "current-value": 3
      },
      "ack-timeout": {
        "max-value-decimal": "30.0",
        "min-value-decimal": "1.0",
        "current-value-decimal": "2.0"
      },
      "ack-random-factor": {
        "max-value-decimal": "4.0",
        "min-value-decimal": "1.1",
        "current-value-decimal": "1.5"
      }
    }
  }
}]]></artwork>
            </figure></t>
        </section>

        <section anchor="convey"
                 title="Convey DOTS Signal Channel Session Configuration">
          <t>A PUT request is used to convey the configuration parameters for
          the signal channel (e.g., heartbeat interval, maximum
          retransmissions). Message transmission parameters for CoAP are
          defined in Section 4.8 of <xref target="RFC7252"></xref>. The
          RECOMMENDED values of transmission parameter values are ack-timeout
          (2 seconds), max-retransmit (3), ack-random-factor (1.5). In
          addition to those parameters, the RECOMMENDED specific DOTS
          transmission parameter values are 'heartbeat-interval' (30 seconds)
          and 'missing-hb-allowed' (5). <list style="empty">
              <t>Note: heartbeat-interval should be tweaked to also assist
              DOTS messages for NAT traversal (SIG-011 of <xref
              target="I-D.ietf-dots-requirements"></xref>). According to <xref
              target="RFC8085"></xref>, keepalive messages must not be sent
              more frequently than once every 15 seconds and should use longer
              intervals when possible. Furthermore, <xref
              target="RFC4787"></xref> recommends NATs to use a state timeout
              of 2 minutes or longer, but experience shows that sending
              packets every 15 to 30 seconds is necessary to prevent the
              majority of middleboxes from losing state for UDP flows. From
              that standpoint, this specification recommends a minimum
              heartbeat-interval of 15 seconds and a maximum
              heartbeat-interval of 240 seconds. The recommended value of 30
              seconds is selected to anticipate the expiry of NAT state.</t>

              <t>A heartbeat-interval of 30 seconds may be considered as too
              chatty in some deployments. For such deployments, DOTS agents
              may negotiate longer heartbeat-interval values to prevent any
              network overload with too frequent keepalives.</t>

              <t>Different heartbeat intervals can be defined for
              'mitigating-config' and 'idle-config' to reduce being too chatty
              during idle times. If there is an on-path translator between the
              DOTS client (standalone or part of a DOTS gateway) and the DOTS
              server, the 'mitigating-config' heartbeat-interval has to be
              smaller than the translator session timeout. It is recommended
              that the 'idle-config' heartbeat-interval is also smaller than
              the translator session timeout to prevent translator traversal
              issues, or set to '0'. Means to discover the lifetime assigned
              by a translator are out of scope.</t>
            </list></t>

          <t>When a Confirmable "CoAP Ping" is sent, and if there is no
          response, the "CoAP Ping" is retransmitted max-retransmit number of
          times by the CoAP layer using an initial timeout set to a random
          duration between ack-timeout and (ack-timeout*ack-random-factor) and
          exponential back-off between retransmissions. By choosing the
          recommended transmission parameters, the "CoAP Ping" will timeout
          after 45 seconds. If the DOTS agent does not receive any response
          from the peer DOTS agent for 'missing-hb-allowed' number of
          consecutive "CoAP Ping" Confirmable messages, it concludes that the
          DOTS signal channel session is disconnected. A DOTS client MUST NOT
          transmit a "CoAP Ping" while waiting for the previous "CoAP Ping"
          response from the same DOTS server.</t>

          <t>If the DOTS agent wishes to change the default values of message
          transmission parameters, it SHOULD follow the guidance given in
          Section 4.8.1 of <xref target="RFC7252"></xref>. The DOTS agents
          MUST use the negotiated values for message transmission parameters
          and default values for non-negotiated message transmission
          parameters.</t>

          <t>The signal channel session configuration is applicable to a
          single DOTS signal channel session between DOTS agents, so the
          'cuid' Uri-Path MUST NOT be used.</t>

          <t><figure anchor="Figure13"
              title="PUT to Convey the DOTS Signal Channel Session Configuration Data">
              <artwork align="left"><![CDATA[  Header: PUT (Code=0.03)
  Uri-Path: ".well-known"
  Uri-Path: "dots"
  Uri-Path: "v1.0"
  Uri-Path: "config"
  Uri-Path: "sid=123"
  Content-Format: "application/cbor"
  {
    "ietf-dots-signal-channel:signal-config": {
      "mitigating-config": {
        "heartbeat-interval": {
          "current-value": integer
        },
        "missing-hb-allowed": {
          "current-value": integer
        },
        "max-retransmit": {
          "current-value": integer
        },
        "ack-timeout": {
          "current-value-decimal": number
        },
        "ack-random-factor": {
          "current-value-decimal": number
        }
      },
      "idle-config": {
        "heartbeat-interval": {
          "current-value": integer
        },
        "missing-hb-allowed": {
          "current-value": integer
        },
        "max-retransmit": {
          "current-value": integer
        },
        "ack-timeout": {
          "current-value-decimal": number
        },
        "ack-random-factor": {
          "current-value-decimal": number
        }
      }
    }
  }]]></artwork>
            </figure></t>

          <t>The additional Uri-Path parameter to those defined in <xref
          target="uris"></xref> is as follows: <list style="hanging">
              <t hangText="sid:">Session Identifier is an identifier for the
              DOTS signal channel session configuration data represented as an
              integer. This identifier MUST be generated by DOTS clients.
              'sid' values MUST increase monotonically. <vspace
              blankLines="1" />This is a mandatory attribute.</t>
            </list></t>

          <t>The meaning of the parameters in the CBOR body is defined in
          <xref target="discovery"></xref>.</t>

          <t>At least one of the attributes 'heartbeat-interval',
          'missing-hb-allowed', 'max-retransmit', 'ack-timeout', and
          'ack-random-factor' MUST be present in the PUT request. Note that
          'heartbeat-interval', 'missing-hb-allowed', 'max-retransmit',
          'ack-timeout', and 'ack-random-factor', if present, do not need to
          be provided for both 'mitigating-config', and 'idle-config' in a PUT
          request.</t>

          <t>The PUT request with a higher numeric 'sid' value overrides the
          DOTS signal channel session configuration data installed by a PUT
          request with a lower numeric 'sid' value. To avoid maintaining a
          long list of 'sid' requests from a DOTS client, the lower numeric
          'sid' MUST be automatically deleted and no longer available at the
          DOTS server.</t>

          <t><xref target="Figure14"></xref> shows a PUT request example to
          convey the configuration parameters for the DOTS signal channel. In
          this example, the heartbeat mechanism is disabled when no mitigation
          is active, while the heartbeat interval is set to '91' when a
          mitigation is active.</t>

          <t><figure anchor="Figure14"
              title="PUT to Convey the Configuration Parameters">
              <artwork align="left"><![CDATA[  Header: PUT (Code=0.03)
  Uri-Path: ".well-known"
  Uri-Path: "dots"
  Uri-Path: "v1.0"
  Uri-Path: "config"
  Uri-Path: "sid=123"
  Content-Format: "application/cbor"
  {
    "ietf-dots-signal-channel:signal-config": {
      "mitigating-config": {
        "heartbeat-interval": {
          "current-value": 91
        },
        "missing-hb-allowed": {
          "current-value": 3
        },
        "max-retransmit": {
          "current-value": 3
        },
        "ack-timeout": {
          "current-value-decimal": "2.0"
        },
        "ack-random-factor": {
          "current-value-decimal": "1.5"
        }
      },
      "idle-config": {
        "heartbeat-interval": {
          "current-value": 0
        },
        "max-retransmit": {
          "current-value": 3
        },
        "ack-timeout": {
          "current-value-decimal": "2.0"
        },
        "ack-random-factor": {
          "current-value-decimal": "1.5"
        }
      }
    }
  }]]></artwork>
            </figure></t>

          <t>The DOTS server indicates the result of processing the PUT
          request using CoAP response codes:<list style="symbols">
              <t>If the request is missing a mandatory attribute, does not
              include a 'sid' Uri-Path, or contains one or more invalid or
              unknown parameters, 4.00 (Bad Request) MUST be returned in the
              response.</t>

              <t>If the DOTS server does not find the 'sid' parameter value
              conveyed in the PUT request in its configuration data and if the
              DOTS server has accepted the configuration parameters, then a
              response code 2.01 (Created) MUST be returned in the
              response.</t>

              <t>If the DOTS server finds the 'sid' parameter value conveyed
              in the PUT request in its configuration data and if the DOTS
              server has accepted the updated configuration parameters, 2.04
              (Changed) MUST be returned in the response.</t>

              <t>If any of the 'heartbeat-interval', 'missing-hb-allowed',
              'max-retransmit', 'target-protocol', 'ack-timeout', and
              'ack-random-factor' attribute values are not acceptable to the
              DOTS server, 4.22 (Unprocessable Entity) MUST be returned in the
              response. Upon receipt of this error code, the DOTS client
              SHOULD request the maximum and minimum attribute values
              acceptable to the DOTS server (<xref
              target="discovery"></xref>).<vspace blankLines="1" />The DOTS
              client may re-try and send the PUT request with updated
              attribute values acceptable to the DOTS server.</t>
            </list></t>

          <t>A DOTS client may issue a GET message with 'sid' Uri-Path
          parameter to retrieve the negotiated configuration. The response
          does not need to include 'sid' in its message body.</t>
        </section>

        <section title="Configuration Freshness and Notifications">
          <t>Max-Age Option (Section 5.10.5 of <xref target="RFC7252"></xref>)
          SHOULD be returned by a DOTS server to associate a validity time
          with a configuration it sends. This feature allows the update of the
          configuration data if a change occurs at the DOTS server side. For
          example, the new configuration may instruct a DOTS client to cease
          heartbeats or reduce heartbeat frequency.</t>

          <t>It is NOT RECOMMENDED to return a Max-Age Option set to 0.</t>

          <t>Returning a Max-Age Option set to 2**32-1 is equivalent to
          associating an infinite lifetime with the configuration.</t>

          <t>If a non-zero value of Max-Age Option is received by a DOTS
          client, it MUST issue a GET request with 'sid' Uri-Path parameter to
          retrieve the current and acceptable configuration before the expiry
          of the value enclosed in the Max-Age option. This request is
          considered by the client and the server as a means to refresh the
          configuration parameters for the signal channel. When a DDoS attack
          is active, refresh requests MUST NOT be sent by DOTS clients and the
          DOTS server MUST NOT terminate the (D)TLS session after the expiry
          of the value returned in Max-Age Option.</t>

          <t>If Max-Age Option is not returned in a response, the DOTS client
          initiates GET requests to refresh the configuration parameters each
          60 seconds (Section 5.10.5 of <xref target="RFC7252"></xref>). To
          prevent such overload, it is RECOMMENDED that DOTS servers return a
          Max-Age Option in GET responses. Considerations related to which
          value to use and how such value is set, are implementation- and
          deployment-specific.</t>

          <t>If an Observe Option set to 0 is included in the configuration
          request, the DOTS server sends notifications of any configuration
          change (Section 4.2 of <xref target="RFC7641"></xref>).</t>

          <t>If a DOTS server detects that a misbehaving DOTS client does not
          contact the DOTS server after the expiry of Max-Age, in order to
          retrieve the signal channel configuration data, it MAY terminate the
          (D)TLS session. A (D)TLS session is terminated by the receipt of an
          authenticated message that closes the connection (e.g., a fatal
          alert (Section 6 of <xref target="RFC8446"></xref>)).</t>
        </section>

        <section title="Delete DOTS Signal Channel Session Configuration">
          <t>A DELETE request is used to delete the installed DOTS signal
          channel session configuration data (<xref
          target="Figure15"></xref>).</t>

          <figure anchor="Figure15" title="Delete Configuration">
            <artwork align="left"><![CDATA[  Header: DELETE (Code=0.04)
  Uri-Path: ".well-known"
  Uri-Path: "dots"
  Uri-Path: "v1.0"
  Uri-Path: "config"
  Uri-Path: "sid=123"
]]></artwork>
          </figure>

          <t>The DOTS server resets the DOTS signal channel session
          configuration back to the default values and acknowledges a DOTS
          client's request to remove the DOTS signal channel session
          configuration using 2.02 (Deleted) response code.</t>

          <t>Upon bootstrapping or reboot, a DOTS client MAY send a DELETE
          request to set the configuration parameters to default values. Such
          a request does not include any 'sid'.</t>
        </section>
      </section>

      <section title="Redirected Signaling">
        <t>Redirected DOTS signaling is discussed in detail in Section 3.2.2
        of <xref target="I-D.ietf-dots-architecture"></xref>.</t>

        <t>If a DOTS server wants to redirect a DOTS client to an alternative
        DOTS server for a signal session, then the response code 5.03 (Service
        Unavailable) will be returned in the response to the DOTS client.</t>

        <t>The DOTS server can return the error response code 5.03 in response
        to a request from the DOTS client or convey the error response code
        5.03 in a unidirectional notification response from the DOTS
        server.</t>

        <t>The DOTS server in the error response conveys the alternate DOTS
        server's FQDN, and the alternate DOTS server's IP address(es) values
        in the CBOR body (<xref target="Figure20"></xref>).</t>

        <figure anchor="Figure20"
                title="Redirected Server Error Response Body">
          <artwork align="left"><![CDATA[{ 
  "ietf-dots-signal-channel:redirected-signal": {
    "alt-server": "string",
    "alt-server-record": [
       "string"
     ]
}]]></artwork>
        </figure>

        <t>The parameters are described below:</t>

        <t><list style="hanging">
            <t hangText="alt-server:">FQDN of an alternate DOTS server.
            <vspace blankLines="1" />This is a mandatory attribute.</t>

            <t hangText="alt-server-record:">A list of IP addresses of an
            alternate DOTS server.<vspace blankLines="1" />This is an optional
            attribute.</t>
          </list></t>

        <t>The DOTS server returns the Time to live (TTL) of the alternate
        DOTS server in a Max-Age Option. That is, the time interval that the
        alternate DOTS server may be cached for use by a DOTS client. A
        Max-Age Option set to 2**32-1 is equivalent to receiving an infinite
        TTL. This value means that the alternate DOTS server is to be used
        until the alternate DOTS server redirects the traffic with another
        5.03 response which encloses an alternate server.</t>

        <t>A Max-Age Option set to '0' may be returned for redirecting
        mitigation requests. Such value means that the redirection applies
        only for the mitigation request in progress. Returning short TTL in a
        Max-Age Option may adversely impact DOTS clients on slow links.
        Returning short values should be avoided under such conditions.</t>

        <t>If the alternate DOTS server TTL has expired, the DOTS client MUST
        use the DOTS server(s), that was provisioned using means discussed in
        <xref target="discover"></xref>. This fall back mechanism is triggered
        immediately upon expiry of the TTL, except when a DDoS attack is
        active.</t>

        <t>Requests issued by misbehaving DOTS clients which do not honor the
        TTL conveyed in the Max-Age Option or react to explicit re-direct
        messages can be rejected by DOTS servers.</t>

        <t><xref target="Figure21"></xref> shows a 5.03 response example to
        convey the DOTS alternate server 'alt-server.example' together with
        its IP addresses 2001:db8:6401::1 and 2001:db8:6401::2.</t>

        <t><figure anchor="Figure21"
            title="Example of Redirected Server Error Response Body">
            <artwork align="left"><![CDATA[{ 
  "ietf-dots-signal-channel:redirected-signal": {
    "alt-server": "alt-server.example",
    "alt-server-record": [
       "2001:db8:6401::1",
       "2001:db8:6401::2"         
     ]           
}]]></artwork>
          </figure></t>

        <t>When the DOTS client receives 5.03 response with an alternate
        server included, it considers the current request as failed, but
        SHOULD try re-sending the request to the alternate DOTS server. During
        a DDoS attack, the DNS server may be the target of another DDoS
        attack, alternate DOTS server's IP addresses conveyed in the 5.03
        response help the DOTS client skip DNS lookup of the alternate DOTS
        server. The DOTS client can then try to establish a UDP or a TCP
        session with the alternate DOTS server. The DOTS client MAY implement
        a method to construct IPv4-embedded IPv6 addresses <xref
        target="RFC6052"></xref>; this is required to handle the scenario
        where an IPv6-only DOTS client communicates with an IPv4-only
        alternate DOTS server.</t>

        <t>If the DOTS client has been redirected to a DOTS server to which it
        has already communicated with within the last five (5) minutes, it
        MUST ignore the redirection and try to contact other DOTS servers
        listed in the local configuration or discovered using dynamic means
        such as DHCP or SRV procedures. It is RECOMMENDED that DOTS clients
        support means to alert administrators about redirect loops.</t>
      </section>

      <section anchor="hb" title="Heartbeat Mechanism">
        <t>To provide an indication of signal health and distinguish an 'idle'
        signal channel from a 'disconnected' or 'defunct' session, the DOTS
        agent sends a heartbeat over the signal channel to maintain its half
        of the channel. The DOTS agent similarly expects a heartbeat from its
        peer DOTS agent, and may consider a session terminated in the
        prolonged absence of a peer agent heartbeat.</t>

        <t>While the communication between the DOTS agents is quiescent, the
        DOTS client will probe the DOTS server to ensure it has maintained
        cryptographic state and vice versa. Such probes can also keep
        firewalls and/or stateful translators bindings alive. This probing
        reduces the frequency of establishing a new handshake when a DOTS
        signal needs to be conveyed to the DOTS server.</t>

        <t>DOTS servers MAY trigger their heartbeat requests immediately after
        receiving heartbeat probes from peer DOTS clients. As a reminder, it
        is the responsibility of DOTS clients to ensure that on-path
        translators/firewalls are maintaining a binding so that the same
        external IP address and/or port number is retained for the DOTS
        session.</t>

        <t>In case of a massive DDoS attack that saturates the incoming
        link(s) to the DOTS client, all traffic from the DOTS server to the
        DOTS client will likely be dropped, although the DOTS server receives
        heartbeat requests in addition to DOTS messages sent by the DOTS
        client. In this scenario, the DOTS agents MUST behave differently to
        handle message transmission and DOTS session liveliness during link
        saturation:</t>

        <t><list style="symbols">
            <t>The DOTS client MUST NOT consider the DOTS session terminated
            even after a maximum 'missing-hb-allowed' threshold is reached.
            The DOTS client SHOULD keep on using the current DOTS session to
            send heartbeat requests over it, so that the DOTS server knows the
            DOTS client has not disconnected the DOTS session. <vspace
            blankLines="1" />After the maximum 'missing-hb-allowed' threshold
            is reached, the DOTS client SHOULD try to resume the (D)TLS
            session. The DOTS client SHOULD send mitigation requests over the
            current DOTS session, and in parallel, for example, try to resume
            the (D)TLS session or use 0-RTT mode in DTLS 1.3 to piggyback the
            mitigation request in the ClientHello message. <vspace
            blankLines="1" />As soon as the link is no longer saturated, if
            traffic from the DOTS server reaches the DOTS client over the
            current DOTS session, the DOTS client can stop (D)TLS session
            resumption or if (D)TLS session resumption is successful then
            disconnect the current DOTS session.</t>

            <t>If the DOTS server does not receive any traffic from the peer
            DOTS client, then the DOTS server sends heartbeat requests to the
            DOTS client and after maximum 'missing-hb-allowed' threshold is
            reached, the DOTS server concludes the session is
            disconnected.</t>
          </list></t>

        <t>In DOTS over UDP, heartbeat messages MUST be exchanged between the
        DOTS agents using the &ldquo;CoAP Ping&rdquo; mechanism defined in
        Section 4.2 of <xref target="RFC7252"></xref>. Concretely, the DOTS
        agent sends an Empty Confirmable message and the peer DOTS agent will
        respond by sending a Reset message.</t>

        <t>In DOTS over TCP, heartbeat messages MUST be exchanged between the
        DOTS agents using the Ping and Pong messages specified in Section 4.4
        of <xref target="RFC8323"></xref>. That is, the DOTS agent sends a
        Ping message and the peer DOTS agent would respond by sending a single
        Pong message.</t>
      </section>
    </section>

    <section anchor="YANG" title="DOTS Signal Channel YANG Module">
      <t>This document defines a YANG <xref target="RFC7950"></xref> module
      for DOTS mitigation scope, DOTS signal channel session configuration
      data, and DOTS redirected signalling.</t>

      <t>This YANG module defines the DOTS client interaction with the DOTS
      server as seen by the DOTS client. A DOTS server is allowed to update
      the non-configurable 'ro' entities in the responses. This YANG module is
      not intended to be used for DOTS server management purposes. Such module
      is out of the scope of this document.</t>

      <section title="Tree Structure">
        <t>This document defines the YANG module "ietf-dots-signal-channel"
        (<xref target="yrequest"></xref>), which has the following tree
        structure. A DOTS signal message can either be a mitigation or a
        configuration message.</t>

        <t><figure>
            <artwork><![CDATA[module: ietf-dots-signal-channel
    +--rw dots-signal
       +--rw (message-type)?
          +--:(mitigation-scope)
          |  +--rw scope* [cuid mid]
          |     +--rw cdid?                   string
          |     +--rw cuid                    string
          |     +--rw mid                     uint32
          |     +--rw target-prefix*          inet:ip-prefix
          |     +--rw target-port-range* [lower-port upper-port]
          |     |  +--rw lower-port      inet:port-number
          |     |  +--rw upper-port      inet:port-number
          |     +--rw target-protocol*        uint8
          |     +--rw target-fqdn*            inet:domain-name
          |     +--rw target-uri*             inet:uri
          |     +--rw alias-name*             string
          |     +--rw lifetime?               int32
          |     +--rw trigger-mitigation?     boolean
          |     +--ro mitigation-start?       uint64
          |     +--ro status?                 enumeration
          |     +--ro conflict-information
          |     |  +--ro conflict-status?   enumeration
          |     |  +--ro conflict-cause?    enumeration
          |     |  +--ro retry-timer?       uint32
          |     |  +--ro conflict-scope
          |     |     +--ro target-prefix*       inet:ip-prefix
          |     |     +--ro target-port-range* [lower-port upper-port]
          |     |     |  +--ro lower-port      inet:port-number
          |     |     |  +--ro upper-port      inet:port-number
          |     |     +--ro target-protocol*     uint8
          |     |     +--ro target-fqdn*         inet:domain-name
          |     |     +--ro target-uri*          inet:uri
          |     |     +--ro alias-name*          string
          |     |     +--ro acl-list* [acl-name]
          |     |     |  +--ro acl-name    -> /ietf-acl:acls/acl/name
          |     |     |  +--ro acl-type?   -> /ietf-acl:acls/acl/type
          |     |     +--ro mid?                 -> ../../../mid
          |     +--ro bytes-dropped?          yang:zero-based-counter64
          |     +--ro bps-dropped?            yang:zero-based-counter64
          |     +--ro pkts-dropped?           yang:zero-based-counter64
          |     +--ro pps-dropped?            yang:zero-based-counter64
          |     +--rw attack-status?          enumeration
          +--:(signal-config)
          |  +--rw sid                   uint32
          |  +--rw mitigating-config
          |  |  +--rw heartbeat-interval
          |  |  |  +--ro max-value?       uint16
          |  |  |  +--ro min-value?       uint16
          |  |  |  +--rw current-value?   uint16
          |  |  +--rw missing-hb-allowed
          |  |  |  +--ro max-value?       uint16
          |  |  |  +--ro min-value?       uint16
          |  |  |  +--rw current-value?   uint16
          |  |  +--rw max-retransmit
          |  |  |  +--ro max-value?       uint16
          |  |  |  +--ro min-value?       uint16
          |  |  |  +--rw current-value?   uint16
          |  |  +--rw ack-timeout
          |  |  |  +--ro max-value-decimal?       decimal64
          |  |  |  +--ro min-value-decimal?       decimal64
          |  |  |  +--rw current-value-decimal?   decimal64
          |  |  +--rw ack-random-factor
          |  |     +--ro max-value-decimal?       decimal64
          |  |     +--ro min-value-decimal?       decimal64
          |  |     +--rw current-value-decimal?   decimal64
          |  +--rw idle-config
          |     +--rw heartbeat-interval
          |     |  +--ro max-value?       uint16
          |     |  +--ro min-value?       uint16
          |     |  +--rw current-value?   uint16
          |     +--rw missing-hb-allowed
          |     |  +--ro max-value?       uint16
          |     |  +--ro min-value?       uint16
          |     |  +--rw current-value?   uint16
          |     +--rw max-retransmit
          |     |  +--ro max-value?       uint16
          |     |  +--ro min-value?       uint16
          |     |  +--rw current-value?   uint16
          |     +--rw ack-timeout
          |     |  +--ro max-value-decimal?       decimal64
          |     |  +--ro min-value-decimal?       decimal64
          |     |  +--rw current-value-decimal?   decimal64
          |     +--rw ack-random-factor
          |        +--ro max-value-decimal?       decimal64
          |        +--ro min-value-decimal?       decimal64
          |        +--rw current-value-decimal?   decimal64
          +--:(redirected-signal)
             +--ro alt-server            string
             +--ro alt-server-record*    inet:ip-address
]]></artwork>
          </figure></t>
      </section>

      <section anchor="yrequest" title="YANG Module ">
        <t><figure>
            <artwork><![CDATA[<CODE BEGINS> file "ietf-dots-signal-channel@2018-08-16.yang"

module ietf-dots-signal-channel {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-dots-signal-channel";
  prefix signal;

  import ietf-inet-types {
    prefix inet;
  }
  import ietf-yang-types {
    prefix yang;
  }
  import ietf-access-control-list {
    prefix ietf-acl;
  }

  organization
    "IETF DDoS Open Threat Signaling (DOTS) Working Group";
  contact
    "WG Web:   <https://datatracker.ietf.org/wg/dots/>
     WG List:  <mailto:dots@ietf.org>
     
     Editor:  Konda, Tirumaleswar Reddy
              <mailto:TirumaleswarReddy_Konda@McAfee.com>
     
     Editor:  Mohamed Boucadair
              <mailto:mohamed.boucadair@orange.com>
     
     Author:  Prashanth Patil
              <mailto:praspati@cisco.com>
     
     Author:  Andrew Mortensen
              <mailto:amortensen@arbor.net>
     
     Author:  Nik Teague
              <mailto:nteague@verisign.com>";
  description
    "This module contains YANG definition for the signaling
     messages exchanged between a DOTS client and a DOTS server.
     
     Copyright (c) 2018 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.
     
     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).
     
     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";

  revision 2018-08-16 {
    description
      "Initial revision.";
    reference
      "RFC XXXX: Distributed Denial-of-Service Open Threat
                 Signaling (DOTS) Signal Channel Specification";
  }

 /*
  * Groupings
  */

  grouping target {
    description
      "Specifies the targets of the mitigation request.";
    leaf-list target-prefix {
      type inet:ip-prefix;
      description
        "IPv4 or IPv6 prefix identifying the target.";
    }
    list target-port-range {
      key "lower-port upper-port";
      description
        "Port range. When only lower-port is
         present, it represents a single port number.";
      leaf lower-port {
        type inet:port-number;
        mandatory true;
        description
          "Lower port number of the port range.";
      }
      leaf upper-port {
        type inet:port-number;
        must ". >= ../lower-port" {
          error-message
            "The upper port number must be greater than
             or equal to lower port number.";
        }
        description
          "Upper port number of the port range.";
      }
    }
    leaf-list target-protocol {
      type uint8;
      description
        "Identifies the target protocol number.
         
         The value '0' means 'all protocols'.
         
         Values are taken from the IANA protocol registry:
         https://www.iana.org/assignments/protocol-numbers/
         protocol-numbers.xhtml
         
         For example, 6 for TCP or 17 for UDP.";
    }
    leaf-list target-fqdn {
      type inet:domain-name;
      description
        "FQDN identifying the target.";
    }
    leaf-list target-uri {
      type inet:uri;
      description
        "URI identifying the target.";
    }
  }

  grouping mitigation-scope {
    description
      "Specifies the scope of the mitigation request.";
    list scope {
      key "cuid mid";
      description
        "The scope of the request.";
      leaf cdid {
        type string;
        description
          "The cdid should be included by a server-domain 
           DOTS gateway to propagate the client domain 
           identification information from the
           gateway's client-facing-side to the gateway's
           server-facing-side, and from the gateway's
           server-facing-side to the DOTS server.
         
           It may be used by the final DOTS server
           for policy enforcement purposes.";
      }
      leaf cuid {
        type string;
        description
          "A unique identifier that is randomly
           generated by a DOTS client to prevent
           request collisions.  It is expected that the 
           cuid will remain consistent throughout the
           lifetime of the DOTS client.";
      }
      leaf mid {
        type uint32;
        description
          "Mitigation request identifier.

           This identifier must be unique for each mitigation
           request bound to the DOTS client.";
      }
      uses target;
      leaf-list alias-name {
        type string;
        description
          "An alias name that points to a resource.";
      }
      leaf lifetime {
        type int32;
        units "seconds";
        default "3600";
        description
          "Indicates the lifetime of the mitigation request.

           A lifetime of '0' in a mitigation request is an 
           invalid value.

           A lifetime of negative one (-1) indicates indefinite
           lifetime for the mitigation request.";
      }
      leaf trigger-mitigation {
        type boolean;
        default "true";
        description
          "If set to 'false', DDoS mitigation will not be 
           triggered unless the DOTS signal channel 
           session is lost.";
      }
      leaf mitigation-start {
        type uint64;
        config false;
        description
          "Mitigation start time is represented in seconds
           relative to 1970-01-01T00:00:00Z in UTC time.";
      }
      leaf status {
        type enumeration {
          enum "attack-mitigation-in-progress" {
            value 1;
            description
              "Attack mitigation setup is in progress (e.g., changing
               the network path to re-route the inbound traffic
               to DOTS mitigator).";
          }
          enum "attack-successfully-mitigated" {
            value 2;
            description
              "Attack is being successfully mitigated (e.g., traffic
               is redirected to a DDoS mitigator and attack
               traffic is dropped or blackholed).";
          }
          enum "attack-stopped" {
            value 3;
            description
              "Attack has stopped and the DOTS client can
               withdraw the mitigation request.";
          }
          enum "attack-exceeded-capability" {
            value 4;
            description
              "Attack has exceeded the mitigation provider
               capability.";
          }
          enum "dots-client-withdrawn-mitigation" {
            value 5;
            description
              "DOTS client has withdrawn the mitigation
               request and the mitigation is active but
               terminating.";
          }
          enum "attack-mitigation-terminated" {
            value 6;
            description
              "Attack mitigation is now terminated.";
          }
          enum "attack-mitigation-withdrawn" {
            value 7;
            description
              "Attack mitigation is withdrawn.";
          }
          enum "attack-mitigation-signal-loss" {
            value 8;
            description
              "Attack mitigation will be triggered 
               for the mitigation request only when
               the DOTS signal channel session is lost.";
          }
        }
        config false;
        description
          "Indicates the status of a mitigation request.
           It must be included in responses only.";
      }
      container conflict-information {
        config false;
        description
          "Indicates that a conflict is detected.
           Must only be used for responses.";
        leaf conflict-status {
          type enumeration {
            enum "request-inactive-other-active" {
              value 1;
              description
                "DOTS Server has detected conflicting mitigation
                 requests from different DOTS clients.
                 This mitigation request is currently inactive
                 until the conflicts are resolved. Another
                 mitigation request is active.";
            }
            enum "request-active" {
              value 2;
              description
                "DOTS Server has detected conflicting mitigation
                 requests from different DOTS clients.
                 This mitigation request is currently active.";
            }
            enum "all-requests-inactive" {
              value 3;
              description
                "DOTS Server has detected conflicting mitigation
                 requests from different DOTS clients.  All
                 conflicting mitigation requests are inactive.";
            }
          }
          description
            "Indicates the conflict status.";
        }
        leaf conflict-cause {
          type enumeration {
            enum "overlapping-targets" {
              value 1;
              description
                "Overlapping targets. conflict-scope provides
                 more details about the exact conflict.";
            }
            enum "conflict-with-whitelist" {
              value 2;
              description
                "Conflicts with an existing white list.
                 
                 This code is returned when the DDoS mitigation
                 detects that some of the source addresses/prefixes
                 listed in the white list ACLs are actually
                 attacking the target.";
            }
            enum "cuid-collision" {
              value 3;
              description
                "Conflicts with the cuid used by another
                 DOTS client.";
            }
          }
          description
            "Indicates the cause of the conflict.";
        }
        leaf retry-timer {
          type uint32;
          units "seconds";
          description
            "The DOTS client must not re-send the
             same request that has a conflict before the expiry of
             this timer.";
        }
        container conflict-scope {
          description
            "Provides more information about the conflict scope.";
          uses target {
            when "../conflict-cause = 'overlapping-targets'";
          }
          leaf-list alias-name {
            when "../../conflict-cause = 'overlapping-targets'";
            type string;
            description
              "Conflicting alias-name.";
          }
          list acl-list {
            when "../../conflict-cause = 'conflict-with-whitelist'";
            key "acl-name";
            description
              "List of conflicting ACLs as defined in the DOTS data
               channel.  These ACLs are uniquely defined by
               cuid and acl-name.";
            leaf acl-name {
              type leafref {
                path "/ietf-acl:acls/ietf-acl:acl/" + 
                     "ietf-acl:name";
              }
              description
                "Reference to the conflicting ACL name bound to
                 a DOTS client.";
            }
            leaf acl-type {
              type leafref {
                path "/ietf-acl:acls/ietf-acl:acl/" + 
                     "ietf-acl:type";
              }
              description
                "Reference to the conflicting ACL type bound to
                 a DOTS client.";
            }
          }
          leaf mid {
            when "../../conflict-cause = 'overlapping-targets'";
            type leafref {
              path "../../../mid";
            }
            description
              "Reference to the conflicting 'mid' bound to
               the same DOTS client.";
          }
        }
      }
      leaf bytes-dropped {
        type yang:zero-based-counter64;
        units "bytes";
        config false;
        description
          "The total dropped byte count for the mitigation
           request since the attack mitigation is triggered.
           The count wraps around when it reaches the maximum value
           of counter64 for dropped bytes.";
      }
      leaf bps-dropped {
        type yang:zero-based-counter64;
        config false;
        description
          "The average number of dropped bits per second for
           the mitigation request since the attack
           mitigation is triggered.  This should be a
           five-minute average.";
      }
      leaf pkts-dropped {
        type yang:zero-based-counter64;
        config false;
        description
          "The total number of dropped packet count for the
           mitigation request since the attack mitigation is
           triggered.  The count wraps around when it reaches 
           the maximum value of counter64 for dropped packets.";
      }
      leaf pps-dropped {
        type yang:zero-based-counter64;
        config false;
        description
          "The average number of dropped packets per second
           for the mitigation request since the attack
           mitigation is triggered.  This should be a
           five-minute average.";
      }
      leaf attack-status {
        type enumeration {
          enum "under-attack" {
            value 1;
            description
              "The DOTS client determines that it is still under
               attack.";
          }
          enum "attack-successfully-mitigated" {
            value 2;
            description
              "The DOTS client determines that the attack is
               successfully mitigated.";
          }
        }
        description
          "Indicates the status of an attack as seen by the
           DOTS client.";
      }
    }
  }

  grouping config-parameters {
    description
      "Subset of DOTS signal channel session configuration.";
    container heartbeat-interval {
      description
        "DOTS agents regularly send heartbeats to each other
         after mutual authentication is successfully
         completed in order to keep the DOTS signal channel
         open.";
      leaf max-value {
        type uint16;
        units "seconds";
        config false;
        description
          "Maximum acceptable heartbeat-interval value.";
      }
      leaf min-value {
        type uint16;
        units "seconds";
        config false;
        description
          "Minimum acceptable heartbeat-interval value.";
      }
      leaf current-value {
        type uint16;
        units "seconds";
        default "30";
        description
          "Current heartbeat-interval value.
           
           '0' means that heartbeat mechanism is deactivated.";
      }
    }
    container missing-hb-allowed {
      description
        "Maximum number of missing heartbeats allowed.";
      leaf max-value {
        type uint16;
        config false;
        description
          "Maximum acceptable missing-hb-allowed value.";
      }
      leaf min-value {
        type uint16;
        config false;
        description
          "Minimum acceptable missing-hb-allowed value.";
      }
      leaf current-value {
        type uint16;
        default "5";
        description
          "Current missing-hb-allowed value.";
      }
    }
    container max-retransmit {
      description
        "Maximum number of retransmissions of a Confirmable
         message.";
      leaf max-value {
        type uint16;
        config false;
        description
          "Maximum acceptable max-retransmit value.";
      }
      leaf min-value {
        type uint16;
        config false;
        description
          "Minimum acceptable max-retransmit value.";
      }
      leaf current-value {
        type uint16;
        default "3";
        description
          "Current max-retransmit value.";
      }
    }
    container ack-timeout {
      description
        "Initial retransmission timeout value.";
      leaf max-value-decimal {
        type decimal64 {
          fraction-digits 2;
        }
        units "seconds";
        config false;
        description
          "Maximum ack-timeout value.";
      }
      leaf min-value-decimal {
        type decimal64 {
          fraction-digits 2;
        }
        units "seconds";
        config false;
        description
          "Minimum ack-timeout value.";
      }
      leaf current-value-decimal {
        type decimal64 {
          fraction-digits 2;
        }
        units "seconds";
        default "2";
        description
          "Current ack-timeout value.";
      }
    }
    container ack-random-factor {
      description
        "Random factor used to influence the timing of
         retransmissions.";
      leaf max-value-decimal {
        type decimal64 {
          fraction-digits 2;
        }
        config false;
        description
          "Maximum acceptable ack-random-factor value.";
      }
      leaf min-value-decimal {
        type decimal64 {
          fraction-digits 2;
        }
        config false;
        description
          "Minimum acceptable ack-random-factor value.";
      }
      leaf current-value-decimal {
        type decimal64 {
          fraction-digits 2;
        }
        default "1.5";
        description
          "Current ack-random-factor value.";
      }
    }
  }

  grouping signal-config {
    description
      "DOTS signal channel session configuration.";
    leaf sid {
      type uint32;
      mandatory true;
      description
        "An identifier for the DOTS signal channel
         session configuration data.";
    }
    container mitigating-config {
      description
        "Configuration parameters to use when a mitigation
         is active.";
      uses config-parameters;
    }
    container idle-config {
      description
        "Configuration parameters to use when no mitigation 
         is active.";
      uses config-parameters;
    }
  }

  grouping redirected-signal {
    description
      "Grouping for the redirected signaling.";
    leaf alt-server {
      type string;
      config false;
      mandatory true;
      description
        "FQDN of an alternate server.";
    }
    leaf-list alt-server-record {
      type inet:ip-address;
      config false;
      description      
        "List of records for the alternate server.";
    }
  }

 /*
  * Main Container for DOTS Signal Channel
  */

  container dots-signal {
    description
      "Main container for DOTS signal message.

       A DOTS signal message can be a mitigation, a configuration,
       or a redirected signal message.";
    choice message-type {
      description
        "Can be a mitigation, a configuration, or a redirect
         message.";
      case mitigation-scope {
        description
          "Mitigation scope of a mitigation message.";
        uses mitigation-scope;
      }
      case signal-config {
        description
          "Configuration message.";
        uses signal-config;
      }
      case redirected-signal {
        description
          "Redirected signaling.";
        uses redirected-signal;
      }
    }
  }
}
<CODE ENDS>]]></artwork>
          </figure></t>
      </section>
    </section>

    <section anchor="mapping" title="Mapping Parameters to CBOR">
      <t>All parameters in the payload of the DOTS signal channel MUST be
      mapped to CBOR types as shown in Table 4 and are assigned an integer key
      to save space. The CBOR key values are divided into two types:
      comprehension-required and comprehension-optional. DOTS agents can
      safely ignore comprehension-optional values they don't understand, but
      cannot successfully process a request if it contains
      comprehension-required values that are not understood. The 4.00 response
      SHOULD include a diagnostic payload describing the unknown
      comprehension-required CBOR key values. The initial set of CBOR key
      values defined in this specification are of type comprehension-required.
      </t>

      <t><figure>
          <artwork><![CDATA[   +----------------------+-------------+-----+---------------+--------+
   | Parameter Name       | YANG        | CBOR| CBOR Major    | JSON   |
   |                      | Type        | Key |    Type &     | Type   |
   |                      |             |     | Information   |        |
   +----------------------+-------------+-----+---------------+--------+
   | ietf-dots-signal-cha |             |     |               |        |
   | nnel:mitigation-scope| container   |   1 | 5 map         | Object |
   | scope                | list        |   2 | 4 array       | Array  |
   | cdid                 | string      |   3 | 3 text string | String |
   | cuid                 | string      |   4 | 3 text string | String |
   | mid                  | uint32      |   5 | 0 unsigned    | Number |
   | target-prefix        | leaf-list   |   6 | 4 array       | Array  |
   |                      | inet:       |     |               |        |
   |                      |  ip-prefix  |     | 3 text string | String |
   | target-port-range    | list        |   7 | 4 array       | Array  |
   | lower-port           | inet:       |     |               |        |
   |                      |  port-number|   8 | 0 unsigned    | Number |
   | upper-port           | inet:       |     |               |        |
   |                      |  port-number|   9 | 0 unsigned    | Number |
   | target-protocol      | leaf-list   |  10 | 4 array       | Array  |
   |                      | uint8       |     | 0 unsigned    | Number |
   | target-fqdn          | leaf-list   |  11 | 4 array       | Array  |
   |                      | inet:       |     |               |        |
   |                      |  domain-name|     | 3 text string | String |
   | target-uri           | leaf-list   |  12 | 4 array       | Array  |
   |                      | inet:uri    |     | 3 text string | String |
   | alias-name           | leaf-list   |  13 | 4 array       | Array  |
   |                      | string      |     | 3 text string | String |
   | lifetime             | int32       |  14 | 0 unsigned    | Number |
   |                      |             |     | 1 negative    | Number |
   | mitigation-start     | uint64      |  15 | 0 unsigned    | String |
   | status               | enumeration |  16 | 0 unsigned    | String |
   | conflict-information | container   |  17 | 5 map         | Object |
   | conflict-status      | enumeration |  18 | 0 unsigned    | String |
   | conflict-cause       | enumeration |  19 | 0 unsigned    | String |
   | retry-timer          | uint32      |  20 | 0 unsigned    | Number |
   | conflict-scope       | container   |  21 | 5 map         | Object |
   | acl-list             | list        |  22 | 4 array       | Array  |
   | acl-name             | leafref     |  23 | 3 text string | String |
   | acl-type             | leafref     |  24 | 3 text string | String |
   | bytes-dropped        | yang:zero-  |     |               |        |
   |                      |  based-     |     |               |        |
   |                      |  counter64  |  25 | 0 unsigned    | String |
   | bps-dropped          | yang:zero-  |     |               |        |
   |                      |  based-     |     |               |        |
   |                      |  counter64  |  26 | 0 unsigned    | String |
   | pkts-dropped         | yang:zero-  |     |               |        |
   |                      |  based-     |     |               |        |
   |                      |  counter64  |  27 | 0 unsigned    | String |
   | pps-dropped          | yang:zero-  |     |               |        |
   |                      |  based-     |     |               |        |
   |                      |  counter64  |  28 | 0 unsigned    | String |
   | attack-status        | enumeration |  29 | 0 unsigned    | String |
   | ietf-dots-signal-    |             |     |               |        |
   | channel:signal-config| container   |  30 | 5 map         | Object |
   | sid                  | uint32      |  31 | 0 unsigned    | Number |
   | mitigating-config    | container   |  32 | 5 map         | Object |
   | heartbeat-interval   | container   |  33 | 5 map         | Object |
   | max-value            | uint16      |  34 | 0 unsigned    | Number |
   | min-value            | uint16      |  35 | 0 unsigned    | Number |
   | current-value        | uint16      |  36 | 0 unsigned    | Number |
   | missing-hb-allowed   | container   |  37 | 5 map         | Object |
   | max-retransmit       | container   |  38 | 5 map         | Object |
   | ack-timeout          | container   |  39 | 5 map         | Object |
   | ack-random-factor    | container   |  40 | 5 map         | Object |
   | max-value-decimal    | decimal64   |  41 | 6 tag 4       |        |
   |                      |             |     |  [-2, integer]| String |
   | min-value-decimal    | decimal64   |  42 | 6 tag 4       |        |
   |                      |             |     |  [-2, integer]| String |
   | current-value-decimal| decimal64   |  43 | 6 tag 4       |        |
   |                      |             |     |  [-2, integer]| String |
   | idle-config          | container   |  44 | 5 map         | Object |
   | trigger-mitigation   | boolean     |  45 | 7 bits 20     | False  |
   |                      |             |     | 7 bits 21     | True   |
   | ietf-dots-signal-cha |             |     |               |        |
   |nnel:redirected-signal| container   |  46 | 5 map         | Object |
   | alt-server           | string      |  47 | 3 text string | String |
   | alt-server-record    | leaf-list   |  48 | 4 array       | Array  |
   |                      | inet:       |     |               |        |
   |                      |  ip-address |     | 3 text string | String |
   +----------------------+-------------+-----+---------------+--------+

    Table 4: CBOR Mappings Used in DOTS Signal Channel Messages]]></artwork>
        </figure></t>
    </section>

    <section anchor="profile"
             title="(D)TLS Protocol Profile and Performance Considerations">
      <section title="(D)TLS Protocol Profile">
        <t>This section defines the (D)TLS protocol profile of DOTS signal
        channel over (D)TLS and DOTS data channel over TLS.</t>

        <t>There are known attacks on (D)TLS, such as man-in-the-middle and
        protocol downgrade attacks. These are general attacks on (D)TLS and,
        as such, they are not specific to DOTS over (D)TLS; refer to the
        (D)TLS RFCs for discussion of these security issues. DOTS agents MUST
        adhere to the (D)TLS implementation recommendations and security
        considerations of <xref target="RFC7525"></xref> except with respect
        to (D)TLS version. Since DOTS signal channel encryption relies upon
        (D)TLS is virtually a green-field deployment, DOTS agents MUST
        implement only (D)TLS 1.2 or later.</t>

        <t>When a DOTS client is configured with a domain name of the DOTS
        server, and connects to its configured DOTS server, the server may
        present it with a PKIX certificate. In order to ensure proper
        authentication, a DOTS client MUST verify the entire certification
        path per <xref target="RFC5280"></xref>. The DOTS client additionally
        uses <xref target="RFC6125"></xref> validation techniques to compare
        the domain name with the certificate provided.</t>

        <t>A key challenge to deploying DOTS is the provisioning of DOTS
        clients, including the distribution of keying material to DOTS clients
        to enable the required mutual authentication of DOTS agents. EST
        defines a method of certificate enrollment by which domains operating
        DOTS servers may provide DOTS clients with all the necessary
        cryptographic keying material, including a private key and a
        certificate to authenticate themselves. One deployment option is DOTS
        clients behave as EST clients for certificate enrollment from an EST
        server provisioned by the mitigation provider. This document does not
        specify which EST mechanism the DOTS client uses to achieve initial
        enrollment.</t>

        <t>The Server Name Indication (SNI) extension <xref
        target="RFC6066"></xref> defines a mechanism for a client to tell a
        (D)TLS server the name of the server it wants to contact. This is a
        useful extension for hosting environments where multiple virtual
        servers are reachable over a single IP address. The DOTS client may or
        may not know if it is interacting with a DOTS server in a virtual
        server hosting environment, so the DOTS client SHOULD include the DOTS
        server FQDN in the SNI extension.</t>

        <t>Implementations compliant with this profile MUST implement all of
        the following items:</t>

        <t><list style="symbols">
            <t>DTLS record replay detection (Section 3.3 of <xref
            target="RFC6347"></xref>) to protect against replay attacks.</t>

            <t>DTLS session resumption without server-side state to resume
            session and convey the DOTS signal.</t>

            <t>Raw public keys <xref target="RFC7250"></xref> or PSK handshake
            <xref target="RFC4279"></xref> with (EC)DHE key exchange which
            reduces the size of the ServerHello, and can be used by DOTS
            agents that cannot obtain certificates.</t>
          </list></t>

        <t>Implementations compliant with this profile SHOULD implement all of
        the following items to reduce the delay required to deliver a DOTS
        signal channel message:</t>

        <t><list style="symbols">
            <t>TLS False Start <xref target="RFC7918"></xref> which reduces
            round-trips by allowing the TLS second flight of messages
            (ChangeCipherSpec) to also contain the DOTS signal.</t>

            <t>Cached Information Extension <xref target="RFC7924"></xref>
            which avoids transmitting the server's certificate and certificate
            chain if the client has cached that information from a previous
            TLS handshake.</t>

            <t>TCP Fast Open <xref target="RFC7413"></xref> can reduce the
            number of round-trips to convey DOTS signal channel message.</t>
          </list></t>
      </section>

      <section anchor="DTLS" title="(D)TLS 1.3 Considerations">
        <t>TLS 1.3 provides critical latency improvements for connection
        establishment over TLS 1.2. The DTLS 1.3 protocol <xref
        target="I-D.ietf-tls-dtls13"></xref> is based upon the TLS 1.3
        protocol and provides equivalent security guarantees. (D)TLS 1.3
        provides two basic handshake modes the DOTS signal channel can take
        advantage of:</t>

        <t><list style="symbols">
            <t>A full handshake mode in which a DOTS client can send a DOTS
            mitigation request message after one round trip and the DOTS
            server immediately responds with a DOTS mitigation response. This
            assumes no packet loss is experienced.</t>

            <t>0-RTT mode in which the DOTS client can authenticate itself and
            send DOTS mitigation request messages in the first message, thus
            reducing handshake latency. 0-RTT only works if the DOTS client
            has previously communicated with that DOTS server, which is very
            likely with the DOTS signal channel. <vspace blankLines="1" />The
            DOTS client has to establish a (D)TLS session with the DOTS server
            during peacetime and share a PSK. <vspace blankLines="1" />During
            a DDoS attack, the DOTS client can use the (D)TLS session to
            convey the DOTS mitigation request message and, if there is no
            response from the server after multiple retries, the DOTS client
            can resume the (D)TLS session in 0-RTT mode using PSK. <vspace
            blankLines="1" />Section 8 of <xref target="RFC8446"></xref>
            discusses some mechanisms to implement to limit the impact of
            replay attacks on 0-RTT data. If the DOTS server accepts 0-RTT, it
            MUST implement one of these mechanisms. A DOTS server can reject
            0-RTT by sending a TLS HelloRetryRequest.<vspace
            blankLines="1" />A simplified TLS 1.3 handshake with 0-RTT DOTS
            mitigation request message exchange is shown in <xref
            target="Figure24"></xref>.<figure anchor="Figure24"
                title="TLS 1.3 Handshake with 0-RTT">
                <artwork align="left"><![CDATA[       DOTS Client                                    DOTS Server

      ClientHello
      (Finished)
      (0-RTT DOTS signal message)
      (end_of_early_data)        -------->
                                                     ServerHello
                                            {EncryptedExtensions}
                                            {ServerConfiguration}
                                                    {Certificate}
                                              {CertificateVerify}
                                                       {Finished}
                                <--------   [DOTS signal message]
      {Finished}                -------->

      [DOTS signal message]     <------->   [DOTS signal message]
]]></artwork>
              </figure></t>
          </list></t>
      </section>

      <section anchor="mtu" title="MTU and Fragmentation">
        <t>To avoid DOTS signal message fragmentation and the subsequent
        decreased probability of message delivery, DOTS agents MUST ensure
        that the DTLS record MUST fit within a single datagram. If the path
        MTU is not known to the DOTS server, an IP MTU of 1280 bytes SHOULD be
        assumed. If UDP is used to convey the DOTS signal messages then the
        DOTS client must consider the amount of record expansion expected by
        the DTLS processing when calculating the size of CoAP message that
        fits within the path MTU. Path MTU MUST be greater than or equal to
        [CoAP message size + DTLS overhead of 13 octets + authentication
        overhead of the negotiated DTLS cipher suite + block padding] (Section
        4.1.1.1 of <xref target="RFC6347"></xref>). If the request size
        exceeds the path MTU then the DOTS client MUST split the DOTS signal
        into separate messages, for example the list of addresses in the
        'target-prefix' parameter could be split into multiple lists and each
        list conveyed in a new PUT request.</t>

        <t>Implementation Note: DOTS choice of message size parameters works
        well with IPv6 and with most of today's IPv4 paths. However, with
        IPv4, it is harder to safely make sure that there is no IP
        fragmentation. If IPv4 path MTU is unknown, implementations may want
        to limit themselves to more conservative IPv4 datagram sizes such as
        576 bytes, as per <xref target="RFC0791"></xref>. IP packets whose
        size does not exceed 576 bytes should never need to be fragmented:
        therefore, sending a maximum of 500 bytes of DOTS signal over a UDP
        datagram will generally avoid IP fragmentation.</t>
      </section>
    </section>

    <section anchor="mutauth"
             title="Mutual Authentication of DOTS Agents &amp; Authorization of DOTS Clients">
      <t>(D)TLS based upon client certificate can be used for mutual
      authentication between DOTS agents. If a DOTS gateway is involved, DOTS
      clients and DOTS gateways MUST perform mutual authentication; only
      authorized DOTS clients are allowed to send DOTS signals to a DOTS
      gateway. The DOTS gateway and the DOTS server MUST perform mutual
      authentication; a DOTS server only allows DOTS signal channel messages
      from an authorized DOTS gateway, thereby creating a two-link chain of
      transitive authentication between the DOTS client and the DOTS
      server.</t>

      <t>The DOTS server SHOULD support certificate-based client
      authentication. The DOTS client SHOULD respond to the DOTS server's TLS
      certificate request message with the PKIX certificate held by the DOTS
      client. DOTS client certificate validation MUST be performed as per
      <xref target="RFC5280"></xref> and the DOTS client certificate MUST
      conform to the <xref target="RFC5280"></xref> certificate profile. If a
      DOTS client does not support TLS client certificate authentication, it
      MUST support pre-shared key based or raw public key based client
      authentication.</t>

      <t><figure anchor="Figure12"
          title="Example of Authentication and Authorization of DOTS Agents">
          <artwork align="left"><![CDATA[ +-----------------------------------------------+
 |       example.com domain         +---------+  |
 |                                  | AAA     |  |
 | +---------------+                | Server  |  |
 | | Application   |                +------+--+  |
 | | server        +<-----------------+    ^     |
 | | (DOTS client) |                  |    |     |
 | +---------------+                  |    |     |
 |                                    V    V     |    example.net domain
 |                              +-----+----+--+  |     +---------------+
 | +--------------+             |             |  |     |               |
 | |   Guest      +<-----x----->+    DOTS     +<------>+    DOTS       |
 | | (DOTS client)|             |    gateway  |  |     |    server     |
 | +--------------+             |             |  |     |               |
 |                              +----+--------+  |     +---------------+
 |                                   ^           |
 |                                   |           |
 | +----------------+                |           |
 | | DDoS detector  |                |           |
 | | (DOTS client)  +<---------------+           |
 | +----------------+                            |
 +-----------------------------------------------+
]]></artwork>
        </figure>In the example depicted in <xref target="Figure12"></xref>,
      the DOTS gateway and DOTS clients within the 'example.com' domain
      mutually authenticate. After the DOTS gateway validates the identity of
      a DOTS client, it communicates with the AAA server in the 'example.com'
      domain to determine if the DOTS client is authorized to request DDoS
      mitigation. If the DOTS client is not authorized, a 4.01 (Unauthorized)
      is returned in the response to the DOTS client. In this example, the
      DOTS gateway only allows the application server and DDoS attack detector
      to request DDoS mitigation, but does not permit the user of type 'guest'
      to request DDoS mitigation.</t>

      <t>Also, DOTS gateways and servers located in different domains MUST
      perform mutual authentication (e.g., using certificates). A DOTS server
      will only allow a DOTS gateway with a certificate for a particular
      domain to request mitigation for that domain. In reference to <xref
      target="Figure12"></xref>, the DOTS server only allows the DOTS gateway
      to request mitigation for 'example.com' domain and not for other
      domains.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This specification registers a service port (<xref
      target="port"></xref>), a URI suffix in the Well-Known URIs registry
      (<xref target="uri"></xref>), and a YANG module (<xref
      target="yang"></xref>). It also creates a registry for mappings to CBOR
      (<xref target="map"></xref>).</t>

      <section anchor="port"
               title="DOTS Signal Channel UDP and TCP Port Number">
        <t>IANA is requested to assign the port number TBD to the DOTS signal
        channel protocol for both UDP and TCP from the "Service Name and
        Transport Protocol Port Number Registry" available at
        https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml.</t>

        <t>The assignment of port number 4646 is strongly suggested, as 4646
        is the ASCII decimal value for ".." (DOTS).</t>
      </section>

      <section anchor="uri" title="Well-Known 'dots' URI">
        <t>This document requests IANA to register the 'dots' well-known URI
        (Table 5) in the Well-Known URIs registry
        (https://www.iana.org/assignments/well-known-uris/well-known-uris.xhtml)
        as defined by <xref target="RFC5785"></xref>:<figure>
            <artwork><![CDATA[   +----------+----------------+---------------------+-----------------+
   | URI      | Change         | Specification       | Related         |
   | suffix   | controller     | document(s)         | information     |
   +----------+----------------+---------------------+-----------------+
   | dots     | IETF           | [RFCXXXX]           | None            |
   +----------+----------------+---------------------+-----------------+

                        Table 5: 'dots' well-known URI]]></artwork>
          </figure></t>
      </section>

      <section anchor="map" title="DOTS Signal Channel CBOR Mappings Registry">
        <t>The DOTS signal channel protocol is extensible to support new
        parameters and instructions for doing it are discussed below:</t>

        <t>The document requests IANA to create a new registry, entitled "DOTS
        Signal Channel CBOR Mappings Registry". The structure of this registry
        is provided in <xref target="format"></xref>. Registration requests
        are evaluated using the criteria described in the Claim Key
        instructions in the registration template below after a three-week
        review period on the dots-signal-reg-review@ietf.org mailing list, on
        the advice of one or more Designated Experts <xref
        target="RFC8126"></xref>. However, to allow for the allocation of
        values prior to publication, the Designated Experts may approve
        registration once they are satisfied that such a specification will be
        published. [[ Note to the RFC Editor: The name of the mailing list
        should be determined in consultation with the IESG and IANA. Suggested
        name: dots-signal-reg-review@ietf.org. ]]</t>

        <t>Registration requests sent to the mailing list for review should
        use an appropriate subject (e.g., "Request to register claim:
        example"). Registration requests that are undetermined for a period
        longer than 21 days can be brought to the IESG's attention (using the
        iesg@ietf.org mailing list) for resolution.</t>

        <t>Criteria that should be applied by the Designated Experts includes
        determining whether the proposed registration duplicates existing
        functionality, whether it is likely to be of general applicability or
        whether it is useful only for a single application, and whether the
        registration description is clear.</t>

        <t>IANA must only accept registry updates from the Designated Experts
        and should direct all requests for registration to the review mailing
        list.</t>

        <t>It is suggested that multiple Designated Experts be appointed who
        are able to represent the perspectives of different applications using
        this specification in order to enable broadly informed review of
        registration decisions. In cases where a registration decision could
        be perceived as creating a conflict of interest for a particular
        Expert, that Expert should defer to the judgment of the other
        Experts.</t>

        <t>The registry is initially populated with the values in Table 6.</t>

        <section anchor="format" title="Registration Template">
          <t><list style="hanging">
              <t hangText="Parameter name:"><vspace />Parameter name (or Claim
              Name) as used in the DOTS signal channel.</t>

              <t hangText="CBOR Key Value:"><vspace />Key value for the
              parameter. The key value MUST be an integer in the 1-65535
              range. The key values of the comprehension-required range
              (0x0001 - 0x3FFF) and of the comprehension-optional range
              (0x8000 - 0xBFFF) are assigned by IETF Review <xref
              target="RFC8126"></xref>. The key values of the
              comprehension-optional range (0x4000 - 0x7FFF) are assigned by
              Designated Expert <xref target="RFC8126"></xref> and of the
              comprehension-optional range (0xC000 - 0xFFFF) are reserved for
              Private Use <xref target="RFC8126"></xref>. </t>

              <t hangText="CBOR Major Type:"><vspace />CBOR Major type and
              optional tag for the claim.</t>

              <t hangText="Change Controller:"><vspace />For Standards Track
              RFCs, list the "IESG". For others, give the name of the
              responsible party. Other details (e.g., postal address, email
              address, home page URI) may also be included.</t>

              <t hangText="Specification Document(s):"><vspace />Reference to
              the document or documents that specify the parameter, preferably
              including URIs that can be used to retrieve copies of the
              documents. An indication of the relevant sections may also be
              included but is not required.</t>
            </list></t>
        </section>

        <section anchor="initial" title="Initial Registry Content">
          <t><figure>
              <artwork><![CDATA[   +----------------------+-------+-------+------------+---------------+
   | Parameter Name       | CBOR  | CBOR  | Change     | Specification |
   |                      | Key   | Major | Controller | Document(s)   |
   |                      | Value | Type  |            |               |
   +----------------------+-------+-------+------------+---------------+
   | ietf-dots-signal-chan|    1  |   5   |    IESG    |   [RFCXXXX]   |
   | nel:mitigation-scope |       |       |            |               |
   | scope                |    2  |   4   |    IESG    |   [RFCXXXX]   |
   | cdid                 |    3  |   3   |    IESG    |   [RFCXXXX]   |
   | cuid                 |    4  |   3   |    IESG    |   [RFCXXXX]   |
   | mid                  |    5  |   0   |    IESG    |   [RFCXXXX]   |
   | target-prefix        |    6  |   4   |    IESG    |   [RFCXXXX]   |
   | target-port-range    |    7  |   4   |    IESG    |   [RFCXXXX]   |
   | lower-port           |    8  |   0   |    IESG    |   [RFCXXXX]   |
   | upper-port           |    9  |   0   |    IESG    |   [RFCXXXX]   |
   | target-protocol      |   10  |   4   |    IESG    |   [RFCXXXX]   |
   | target-fqdn          |   11  |   4   |    IESG    |   [RFCXXXX]   |
   | target-uri           |   12  |   4   |    IESG    |   [RFCXXXX]   |
   | alias-name           |   13  |   4   |    IESG    |   [RFCXXXX]   |
   | lifetime             |   14  |  0/1  |    IESG    |   [RFCXXXX]   |
   | mitigation-start     |   15  |   0   |    IESG    |   [RFCXXXX]   |
   | status               |   16  |   0   |    IESG    |   [RFCXXXX]   |
   | conflict-information |   17  |   5   |    IESG    |   [RFCXXXX]   |
   | conflict-status      |   18  |   0   |    IESG    |   [RFCXXXX]   |
   | conflict-cause       |   19  |   0   |    IESG    |   [RFCXXXX]   |
   | retry-timer          |   20  |   0   |    IESG    |   [RFCXXXX]   |
   | conflict-scope       |   21  |   5   |    IESG    |   [RFCXXXX]   |
   | acl-list             |   22  |   4   |    IESG    |   [RFCXXXX]   |
   | acl-name             |   23  |   3   |    IESG    |   [RFCXXXX]   |
   | acl-type             |   24  |   3   |    IESG    |   [RFCXXXX]   |
   | bytes-dropped        |   25  |   0   |    IESG    |   [RFCXXXX]   |
   | bps-dropped          |   26  |   0   |    IESG    |   [RFCXXXX]   |
   | pkts-dropped         |   27  |   0   |    IESG    |   [RFCXXXX]   |
   | pps-dropped          |   28  |   0   |    IESG    |   [RFCXXXX]   |
   | attack-status        |   29  |   0   |    IESG    |   [RFCXXXX]   |
   | ietf-dots-signal-    |   30  |   5   |    IESG    |   [RFCXXXX]   |
   | channel:signal-config|       |       |            |               |
   | sid                  |   31  |   0   |    IESG    |   [RFCXXXX]   |
   | mitigating-config    |   32  |   5   |    IESG    |   [RFCXXXX]   |
   | heartbeat-interval   |   33  |   5   |    IESG    |   [RFCXXXX]   |
   | min-value            |   34  |   0   |    IESG    |   [RFCXXXX]   |
   | max-value            |   35  |   0   |    IESG    |   [RFCXXXX]   |
   | current-value        |   36  |   0   |    IESG    |   [RFCXXXX]   |
   | missing-hb-allowed   |   37  |   5   |    IESG    |   [RFCXXXX]   |
   | max-retransmit       |   38  |   5   |    IESG    |   [RFCXXXX]   |
   | ack-timeout          |   39  |   5   |    IESG    |   [RFCXXXX]   |
   | ack-random-factor    |   40  |   5   |    IESG    |   [RFCXXXX]   |
   | min-value-decimal    |   41  | 6tag4 |    IESG    |   [RFCXXXX]   |
   | max-value-decimal    |   42  | 6tag4 |    IESG    |   [RFCXXXX]   |
   | current-value-       |   43  | 6tag4 |    IESG    |   [RFCXXXX]   |
   |  decimal             |       |       |            |               |
   | idle-config          |   44  |   5   |    IESG    |   [RFCXXXX]   |
   | trigger-mitigation   |   45  |   7   |    IESG    |   [RFCXXXX]   |
   | ietf-dots-signal-chan|   46  |   5   |    IESG    |   [RFCXXXX]   |
   | nel:redirected-signal|       |       |            |               |
   | alt-server           |   47  |   3   |    IESG    |   [RFCXXXX]   |
   | alt-server-record    |   48  |   4   |    IESG    |   [RFCXXXX]   |
   +----------------------+-------+-------+------------+---------------+

        Table 6: Initial DOTS Signal Channel CBOR Mappings Registry
]]></artwork>
            </figure></t>
        </section>
      </section>

      <section anchor="yang" title="DOTS Signal Channel YANG Module">
        <t>This document requests IANA to register the following URI in the
        "IETF XML Registry" <xref target="RFC3688"></xref>: <figure>
            <artwork><![CDATA[         URI: urn:ietf:params:xml:ns:yang:ietf-dots-signal-channel
         Registrant Contact: The IESG.
         XML: N/A; the requested URI is an XML namespace.
]]></artwork>
          </figure> This document requests IANA to register the following YANG
        module in the "YANG Module Names" registry <xref
        target="RFC7950"></xref>.<figure>
            <artwork><![CDATA[         name: ietf-signal
         namespace: urn:ietf:params:xml:ns:yang:ietf-dots-signal-channel
         prefix: signal
         reference: RFC XXXX
]]></artwork>
          </figure></t>
      </section>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>Authenticated encryption MUST be used for data confidentiality and
      message integrity. The interaction between the DOTS agents requires
      Datagram Transport Layer Security (DTLS) and Transport Layer Security
      (TLS) with a cipher suite offering confidentiality protection and the
      guidance given in <xref target="RFC7525"></xref> MUST be followed to
      avoid attacks on (D)TLS. The (D)TLS protocol profile for DOTS signal
      channel is specified in <xref target="profile"></xref>.</t>

      <t>If TCP is used between DOTS agents, an attacker may be able to inject
      RST packets, bogus application segments, etc., regardless of whether TLS
      authentication is used. Because the application data is TLS protected,
      this will not result in the application receiving bogus data, but it
      will constitute a DoS on the connection. This attack can be countered by
      using TCP-AO <xref target="RFC5925"></xref>. If TCP-AO is used, then any
      bogus packets injected by an attacker will be rejected by the TCP-AO
      integrity check and therefore will never reach the TLS layer.</t>

      <t>Rate-limiting DOTS requests, including those with new 'cuid' values,
      from the same DOTS client defends against DoS attacks that would result
      in varying the 'cuid' to exhaust DOTS server resources. Rate-limit
      policies SHOULD be enforced on DOTS gateways (if deployed) and DOTS
      servers.</t>

      <t>In order to prevent leaking internal information outside a
      client-domain, DOTS gateways located in the client-domain SHOULD NOT
      reveal the identification information that pertains to internal DOTS
      clients (e.g., source IP address, client's hostname) unless explicitly
      configured to do so.</t>

      <t>DOTS servers MUST verify that requesting DOTS clients are entitled to
      trigger actions on a given IP prefix. That is, only actions on IP
      resources that belong to the DOTS client' domain MUST be authorized by a
      DOTS server. The exact mechanism for the DOTS servers to validate that
      the target prefixes are within the scope of the DOTS client's domain is
      deployment-specific.</t>

      <t>The presence of DOTS gateways may lead to infinite forwarding loops,
      which is undesirable. To prevent and detect such loops, this document
      uses the Hop-Limit Option.</t>

      <t>CoAP-specific security considerations are discussed in Section 11 of
      <xref target="RFC7252"></xref>, while CBOR-related security
      considerations are discussed in Section 8 of <xref
      target="RFC7049"></xref>.</t>
    </section>

    <section anchor="contr" title="Contributors">
      <t>The following individuals have contributed to this document:<list
          style="symbols">
          <t>Jon Shallow, NCC Group, Email: jon.shallow@nccgroup.trust</t>

          <t>Mike Geller, Cisco Systems, Inc. 3250 Florida 33309 USA, Email:
          mgeller@cisco.com</t>

          <t>Robert Moskowitz, HTT Consulting Oak Park, MI 42837 United
          States, Email: rgm@htt-consult.com</t>

          <t>Dan Wing, Email: dwing-ietf@fuggles.com</t>
        </list></t>
    </section>

    <section anchor="ack" title="Acknowledgements">
      <t>Thanks to Christian Jacquenet, Roland Dobbins, Roman D. Danyliw,
      Michael Richardson, Ehud Doron, Kaname Nishizuka, Dave Dolson, Liang
      Xia, Gilbert Clark, Xialiang Frank, Jim Schaad and Nesredien Suleiman
      for the discussion and comments.</t>

      <t>Thanks to the core WG for the recommendations on Hop-Limit and
      redirect signaling.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include="reference.RFC.7525"?>

      <?rfc include="reference.RFC.6347"?>

      <?rfc include="reference.RFC.7252"?>

      <?rfc include="reference.RFC.7250"?>

      <?rfc include="reference.RFC.7641"?>

      <?rfc include="reference.RFC.5785"?>

      <?rfc include="reference.RFC.4279"?>

      <?rfc include="reference.RFC.5280"?>

      <?rfc include='reference.RFC.5246'?>

      <?rfc include="reference.RFC.6125"?>

      <?rfc include='reference.RFC.3688'?>

      <?rfc include="reference.RFC.7950"?>

      <?rfc include='reference.RFC.8126'?>

      <?rfc include='reference.RFC.6066'?>

      <?rfc include="reference.RFC.8323"?>

      <?rfc include="reference.RFC.8085"?>

      <?rfc include="reference.RFC.7049"?>

      <?rfc include="reference.RFC.8446"?>

      <?rfc include="reference.RFC.7959"?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.4732"?>

      <?rfc include='reference.I-D.boucadair-core-hop-limit'?>

      <?rfc include="reference.RFC.6234"?>

      <?rfc include='reference.RFC.6052'?>

      <?rfc include='reference.RFC.7452'?>

      <?rfc include="reference.RFC.5925"?>

      <?rfc include='reference.RFC.5389'?>

      <?rfc include='reference.RFC.3986'?>

      <?rfc include='reference.RFC.4987'?>

      <?rfc include="reference.RFC.7413"?>

      <?rfc include='reference.RFC.3022'?>

      <?rfc include='reference.RFC.6146'?>

      <?rfc include='reference.RFC.6296'?>

      <?rfc include='reference.RFC.8305'?>

      <?rfc include='reference.RFC.0791'?>

      <?rfc include='reference.RFC.6724'?>

      <?rfc include="reference.RFC.4632"?>

      <?rfc include="reference.RFC.7918"?>

      <?rfc include="reference.RFC.7924"?>

      <?rfc include="reference.RFC.7589"?>

      <?rfc include='reference.RFC.6888'?>

      <?rfc include='reference.RFC.4787'?>

      <?rfc include='reference.RFC.4340'?>

      <?rfc include='reference.RFC.4960'?>

      <?rfc include='reference.RFC.7951'?>

      <?rfc include='reference.RFC.1983'?>

      <?rfc include='reference.RFC.8340'?>

      <?rfc include="reference.I-D.ietf-core-yang-cbor"?>

      <?rfc include="reference.I-D.ietf-core-comi"?>

      <?rfc include="reference.I-D.ietf-dots-requirements"?>

      <?rfc include="reference.I-D.ietf-dots-use-cases"?>

      <?rfc include="reference.I-D.ietf-dots-architecture"
?>

      <?rfc include="reference.I-D.ietf-dots-data-channel" ?>

      <?rfc include="reference.I-D.ietf-tls-dtls13" ?>

      <?rfc include='reference.RFC.6887'?>

      <reference anchor="proto_numbers"
                 target="http://www.iana.org/assignments/protocol-numbers">
        <front>
          <title>IANA, "Protocol Numbers"</title>

          <author>
            <organization></organization>
          </author>

          <date year="2011" />
        </front>
      </reference>
    </references>
  </back>
</rfc>
